'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class GISADataset
    Inherits DataSet
    
    Private tableControloAutRel As ControloAutRelDataTable
    
    Private tableClientLicense As ClientLicenseDataTable
    
    Private tableIndexFRDCA As IndexFRDCADataTable
    
    Private tableControloAut As ControloAutDataTable
    
    Private tableTipoNoticiaATipoControloAForma As TipoNoticiaATipoControloAFormaDataTable
    
    Private tableNivelDesignado As NivelDesignadoDataTable
    
    Private tableTipoFRDBase As TipoFRDBaseDataTable
    
    Private tableTipoOperation As TipoOperationDataTable
    
    Private tableTipoFunctionGroup As TipoFunctionGroupDataTable
    
    Private tableFRDBase As FRDBaseDataTable
    
    Private tableDicionario As DicionarioDataTable
    
    Private tableNivelUnidadeFisicaCodigo As NivelUnidadeFisicaCodigoDataTable
    
    Private tableTipoEntidadeProdutora As TipoEntidadeProdutoraDataTable
    
    Private tableClientActivity As ClientActivityDataTable
    
    Private tableGlobalConfig As GlobalConfigDataTable
    
    Private tableFunctionOperation As FunctionOperationDataTable
    
    Private tableTipoControloAutRel As TipoControloAutRelDataTable
    
    Private tableTipoNivelRelacionadoCodigo As TipoNivelRelacionadoCodigoDataTable
    
    Private tableTipoControloAutForma As TipoControloAutFormaDataTable
    
    Private tableIso15924 As Iso15924DataTable
    
    Private tableAutoEliminacao As AutoEliminacaoDataTable
    
    Private tableIso639 As Iso639DataTable
    
    Private tableTipoTecnicasDeRegisto As TipoTecnicasDeRegistoDataTable
    
    Private tableTipoNoticiaAut As TipoNoticiaAutDataTable
    
    Private tableTipoFormaSuporteAcond As TipoFormaSuporteAcondDataTable
    
    Private tableTipoEstadoDeConservacao As TipoEstadoDeConservacaoDataTable
    
    Private tableTipoOrdenacao As TipoOrdenacaoDataTable
    
    Private tableNivelUnidadeFisica As NivelUnidadeFisicaDataTable
    
    Private tableTipoTradicaoDocumental As TipoTradicaoDocumentalDataTable
    
    Private tableTipoMaterialDeSuporte As TipoMaterialDeSuporteDataTable
    
    Private tableSFRDAvaliacao As SFRDAvaliacaoDataTable
    
    Private tableSFRDUFMateriaisComponente As SFRDUFMateriaisComponenteDataTable
    
    Private tableControloAutDicionario As ControloAutDicionarioDataTable
    
    Private tableTrustee As TrusteeDataTable
    
    Private tableNivelControloAut As NivelControloAutDataTable
    
    Private tableControloAutEntidadeProdutora As ControloAutEntidadeProdutoraDataTable
    
    Private tableSFRDCondicaoDeAcesso As SFRDCondicaoDeAcessoDataTable
    
    Private tableSFRDUFDescricaoFisica As SFRDUFDescricaoFisicaDataTable
    
    Private tableSecurableObject As SecurableObjectDataTable
    
    Private tableSFRDUnidadeFisica As SFRDUnidadeFisicaDataTable
    
    Private tableIso3166 As Iso3166DataTable
    
    Private tableSFRDUFComponente As SFRDUFComponenteDataTable
    
    Private tableTipoDensidade As TipoDensidadeDataTable
    
    Private tableSFRDConteudoEEstrutura As SFRDConteudoEEstruturaDataTable
    
    Private tableTipoSubDensidade As TipoSubDensidadeDataTable
    
    Private tableSFRDContexto As SFRDContextoDataTable
    
    Private tableSFRDUFTecnicasRegComponente As SFRDUFTecnicasRegComponenteDataTable
    
    Private tableTipoMedida As TipoMedidaDataTable
    
    Private tableNivel As NivelDataTable
    
    Private tableSFRDDocumentacaoAssociada As SFRDDocumentacaoAssociadaDataTable
    
    Private tableSFRDAvaliacaoRel As SFRDAvaliacaoRelDataTable
    
    Private tableTipoAcondicionamento As TipoAcondicionamentoDataTable
    
    Private tableTipoEstadoConservacao As TipoEstadoConservacaoDataTable
    
    Private tableSFRDImagemVolume As SFRDImagemVolumeDataTable
    
    Private tableTipoTecnicaRegisto As TipoTecnicaRegistoDataTable
    
    Private tableServerLicense As ServerLicenseDataTable
    
    Private tableAccessControlElement As AccessControlElementDataTable
    
    Private tableTipoMaterial As TipoMaterialDataTable
    
    Private tableTipoNivel As TipoNivelDataTable
    
    Private tableSFRDNotaGeral As SFRDNotaGeralDataTable
    
    Private tableSecurableObjectNivel As SecurableObjectNivelDataTable
    
    Private tableTipoServer As TipoServerDataTable
    
    Private tableTipoNivelRelacionado As TipoNivelRelacionadoDataTable
    
    Private tableSFRDUFCota As SFRDUFCotaDataTable
    
    Private tableTipoClient As TipoClientDataTable
    
    Private tableTrusteeGroup As TrusteeGroupDataTable
    
    Private tableTrusteePrivilege As TrusteePrivilegeDataTable
    
    Private tableTipoSuporte As TipoSuporteDataTable
    
    Private tableSFRDTradicaoDocumental As SFRDTradicaoDocumentalDataTable
    
    Private tableTrusteeUser As TrusteeUserDataTable
    
    Private tableUserGroups As UserGroupsDataTable
    
    Private tableSFRDMaterialDeSuporte As SFRDMaterialDeSuporteDataTable
    
    Private tableProductFunction As ProductFunctionDataTable
    
    Private tableSFRDOrdenacao As SFRDOrdenacaoDataTable
    
    Private tableTipoFunction As TipoFunctionDataTable
    
    Private tableControloAutDataDeDescricao As ControloAutDataDeDescricaoDataTable
    
    Private tableSFRDEstadoDeConservacao As SFRDEstadoDeConservacaoDataTable
    
    Private tableRelacaoTipoNivelRelacionado As RelacaoTipoNivelRelacionadoDataTable
    
    Private tableSFRDFormaSuporteAcond As SFRDFormaSuporteAcondDataTable
    
    Private tableTipoPertinencia As TipoPertinenciaDataTable
    
    Private tableSFRDTecnicasDeRegisto As SFRDTecnicasDeRegistoDataTable
    
    Private tableSFRDUFAutoEliminacao As SFRDUFAutoEliminacaoDataTable
    
    Private tableSFRDImagem As SFRDImagemDataTable
    
    Private tableControloAutDatasExistencia As ControloAutDatasExistenciaDataTable
    
    Private tableFRDBaseDataDeDescricao As FRDBaseDataDeDescricaoDataTable
    
    Private tableSFRDDatasProducao As SFRDDatasProducaoDataTable
    
    Private tableRelacaoHierarquica As RelacaoHierarquicaDataTable
    
    Private relationTipoNivelRelacionadoRelacaoHierarquica As DataRelation
    
    Private relationNivelRelacaoHierarquicaUpper As DataRelation
    
    Private relationNivelRelacaoHierarquica As DataRelation
    
    Private relationFRDBaseSFRDDatasProducao As DataRelation
    
    Private relationTrusteeUserFRDBaseDataDeDescricaoAuthority As DataRelation
    
    Private relationTrusteeUserFRDBaseDataDeDescricao As DataRelation
    
    Private relationFRDBaseFRDBaseDataDeDescricao As DataRelation
    
    Private relationControloAutControloAutDatasExistencia As DataRelation
    
    Private relationFRDBaseSFRDImagem As DataRelation
    
    Private relationSFRDImagemVolumeSFRDImagem As DataRelation
    
    Private relationAutoEliminacaoSFRDUFAutoEliminacao As DataRelation
    
    Private relationFRDBaseSFRDUFAutoEliminacao As DataRelation
    
    Private relationTipoTecnicasDeRegistoSFRDTecnicasDeRegisto As DataRelation
    
    Private relationSFRDCondicaoDeAcessoSFRDTecnicasDeRegisto As DataRelation
    
    Private relationSFRDCondicaoDeAcessoSFRDFormaSuporteAcond As DataRelation
    
    Private relationTipoFormaSuporteAcondSFRDFormaSuporteAcond As DataRelation
    
    Private relationTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper As DataRelation
    
    Private relationTipoNivelRelacionadoRelacaoTipoNivelRelacionado As DataRelation
    
    Private relationTipoEstadoDeConservacaoSFRDEstadoDeConservacao As DataRelation
    
    Private relationSFRDCondicaoDeAcessoSFRDEstadoDeConservacao As DataRelation
    
    Private relationTrusteeUserControloAutDataDeDescricaoAuthority As DataRelation
    
    Private relationTrusteeUserControloAutDataDeDescricao As DataRelation
    
    Private relationControloAutControloAutDataDeDescricao As DataRelation
    
    Private relationTipoFunctionTipoFunction As DataRelation
    
    Private relationTipoFunctionGroupTipoFunction As DataRelation
    
    Private relationTipoOrdenacaoSFRDOrdenacao As DataRelation
    
    Private relationFRDBaseSFRDOrdenacao As DataRelation
    
    Private relationTipoServerProductFunction As DataRelation
    
    Private relationTipoClientProductFunction As DataRelation
    
    Private relationTipoFunctionProductFunction As DataRelation
    
    Private relationTipoMaterialDeSuporteSFRDMaterialDeSuporte As DataRelation
    
    Private relationSFRDCondicaoDeAcessoSFRDMaterialDeSuporte As DataRelation
    
    Private relationTrusteeUserUserGroups As DataRelation
    
    Private relationTrusteeGroupUserGroups As DataRelation
    
    Private relationTrusteeTrusteeUser As DataRelation
    
    Private relationTrusteeUserTrusteeUserAuthority As DataRelation
    
    Private relationTipoTradicaoDocumentalSFRDTradicaoDocumental As DataRelation
    
    Private relationFRDBaseSFRDTradicaoDocumental As DataRelation
    
    Private relationTrusteeTrusteePrivilege As DataRelation
    
    Private relationFunctionOperationTrusteePrivilege As DataRelation
    
    Private relationTrusteeTrusteeGroup As DataRelation
    
    Private relationFRDBaseSFRDUFCota As DataRelation
    
    Private relationTipoNivelTipoNivelRelacionado As DataRelation
    
    Private relationNivelSecurableObjectNivel As DataRelation
    
    Private relationSecurableObjectSecurableObjectNivel As DataRelation
    
    Private relationFRDBaseSFRDNotaGeral As DataRelation
    
    Private relationSecurableObjectAccessControlElement As DataRelation
    
    Private relationTrusteeAccessControlElement As DataRelation
    
    Private relationTipoServerServerLicense As DataRelation
    
    Private relationTipoSubDensidadeSFRDAvaliacaoRel As DataRelation
    
    Private relationNivelSFRDAvaliacaoRel As DataRelation
    
    Private relationTipoDensidadeSFRDAvaliacaoRel As DataRelation
    
    Private relationSFRDAvaliacaoSFRDAvaliacaoRel As DataRelation
    
    Private relationFRDBaseSFRDDocumentacaoAssociada As DataRelation
    
    Private relationTipoNivelNivel As DataRelation
    
    Private relationTipoTecnicaRegistoSFRDUFTecnicasRegComponente As DataRelation
    
    Private relationSFRDUFComponenteSFRDUFTecnicasRegComponente As DataRelation
    
    Private relationFRDBaseSFRDContexto As DataRelation
    
    Private relationTipoDensidadeTipoSubDensidade As DataRelation
    
    Private relationFRDBaseSFRDConteudoEEstrutura As DataRelation
    
    Private relationTipoSuporteSFRDUFComponente As DataRelation
    
    Private relationTipoEstadoConservacaoSFRDUFComponente As DataRelation
    
    Private relationSFRDUFDescricaoFisicaSFRDUFComponente As DataRelation
    
    Private relationTipoMedidaSFRDUFComponente As DataRelation
    
    Private relationSFRDUnidadeFisicaSFRDUFComponente As DataRelation
    
    Private relationNivelSFRDUnidadeFisica As DataRelation
    
    Private relationFRDBaseSFRDUnidadeFisica As DataRelation
    
    Private relationTipoAcondicionamentoSFRDUFDescricaoFisica As DataRelation
    
    Private relationTipoMedidaSFRDUFDescricaoFisica As DataRelation
    
    Private relationFRDBaseSFRDUFDescricaoFisica As DataRelation
    
    Private relationFRDBaseSFRDCondicaoDeAcesso As DataRelation
    
    Private relationTipoEntidadeProdutoraControloAutEntidadeProdutora As DataRelation
    
    Private relationControloAutControloAutEntidadeProdutora As DataRelation
    
    Private relationNivelNivelControloAut As DataRelation
    
    Private relationControloAutNivelControloAut As DataRelation
    
    Private relationTipoControloAutFormaControloAutDicionario As DataRelation
    
    Private relationDicionarioControloAutDicionario As DataRelation
    
    Private relationControloAutControloAutDicionario As DataRelation
    
    Private relationTipoMaterialSFRDUFMateriaisComponente As DataRelation
    
    Private relationSFRDUFComponenteSFRDUFMateriaisComponente As DataRelation
    
    Private relationAutoEliminacaoSFRDAvaliacao As DataRelation
    
    Private relationFRDBaseSFRDAvaliacao As DataRelation
    
    Private relationTipoPertinenciaSFRDAvaliacao As DataRelation
    
    Private relationTipoSubDensidadeSFRDAvaliacao As DataRelation
    
    Private relationTipoDensidadeSFRDAvaliacao As DataRelation
    
    Private relationNivelDesignadoNivelUnidadeFisica As DataRelation
    
    Private relationTipoNivelRelacionadoTipoNivelRelacionadoCodigo As DataRelation
    
    Private relationTipoFunctionFunctionOperation As DataRelation
    
    Private relationTipoOperationFunctionOperation As DataRelation
    
    Private relationClientLicenseClientActivity As DataRelation
    
    Private relationNivelNivelUnidadeFisicaCodigo As DataRelation
    
    Private relationNivelFRDBase As DataRelation
    
    Private relationTipoFRDBaseFRDBase As DataRelation
    
    Private relationNivelNivelDesignado As DataRelation
    
    Private relationTipoNoticiaAutTipoNoticiaATipoControloAForma As DataRelation
    
    Private relationTipoControloAutFormaTipoNoticiaATipoControloAForma As DataRelation
    
    Private relationIso639ControloAut As DataRelation
    
    Private relationIso15924ControloAut As DataRelation
    
    Private relationTipoNoticiaAutControloAut As DataRelation
    
    Private relationFRDBaseIndexFRDCA As DataRelation
    
    Private relationControloAutIndexFRDCA As DataRelation
    
    Private relationTipoClientClientLicense As DataRelation
    
    Private relationControloAutControloAutRel As DataRelation
    
    Private relationControloAutControloAutRelAlias As DataRelation
    
    Private relationTipoControloAutRelControloAutRel As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ControloAutRel")) Is Nothing) Then
                Me.Tables.Add(New ControloAutRelDataTable(ds.Tables("ControloAutRel")))
            End If
            If (Not (ds.Tables("ClientLicense")) Is Nothing) Then
                Me.Tables.Add(New ClientLicenseDataTable(ds.Tables("ClientLicense")))
            End If
            If (Not (ds.Tables("IndexFRDCA")) Is Nothing) Then
                Me.Tables.Add(New IndexFRDCADataTable(ds.Tables("IndexFRDCA")))
            End If
            If (Not (ds.Tables("ControloAut")) Is Nothing) Then
                Me.Tables.Add(New ControloAutDataTable(ds.Tables("ControloAut")))
            End If
            If (Not (ds.Tables("TipoNoticiaATipoControloAForma")) Is Nothing) Then
                Me.Tables.Add(New TipoNoticiaATipoControloAFormaDataTable(ds.Tables("TipoNoticiaATipoControloAForma")))
            End If
            If (Not (ds.Tables("NivelDesignado")) Is Nothing) Then
                Me.Tables.Add(New NivelDesignadoDataTable(ds.Tables("NivelDesignado")))
            End If
            If (Not (ds.Tables("TipoFRDBase")) Is Nothing) Then
                Me.Tables.Add(New TipoFRDBaseDataTable(ds.Tables("TipoFRDBase")))
            End If
            If (Not (ds.Tables("TipoOperation")) Is Nothing) Then
                Me.Tables.Add(New TipoOperationDataTable(ds.Tables("TipoOperation")))
            End If
            If (Not (ds.Tables("TipoFunctionGroup")) Is Nothing) Then
                Me.Tables.Add(New TipoFunctionGroupDataTable(ds.Tables("TipoFunctionGroup")))
            End If
            If (Not (ds.Tables("FRDBase")) Is Nothing) Then
                Me.Tables.Add(New FRDBaseDataTable(ds.Tables("FRDBase")))
            End If
            If (Not (ds.Tables("Dicionario")) Is Nothing) Then
                Me.Tables.Add(New DicionarioDataTable(ds.Tables("Dicionario")))
            End If
            If (Not (ds.Tables("NivelUnidadeFisicaCodigo")) Is Nothing) Then
                Me.Tables.Add(New NivelUnidadeFisicaCodigoDataTable(ds.Tables("NivelUnidadeFisicaCodigo")))
            End If
            If (Not (ds.Tables("TipoEntidadeProdutora")) Is Nothing) Then
                Me.Tables.Add(New TipoEntidadeProdutoraDataTable(ds.Tables("TipoEntidadeProdutora")))
            End If
            If (Not (ds.Tables("ClientActivity")) Is Nothing) Then
                Me.Tables.Add(New ClientActivityDataTable(ds.Tables("ClientActivity")))
            End If
            If (Not (ds.Tables("GlobalConfig")) Is Nothing) Then
                Me.Tables.Add(New GlobalConfigDataTable(ds.Tables("GlobalConfig")))
            End If
            If (Not (ds.Tables("FunctionOperation")) Is Nothing) Then
                Me.Tables.Add(New FunctionOperationDataTable(ds.Tables("FunctionOperation")))
            End If
            If (Not (ds.Tables("TipoControloAutRel")) Is Nothing) Then
                Me.Tables.Add(New TipoControloAutRelDataTable(ds.Tables("TipoControloAutRel")))
            End If
            If (Not (ds.Tables("TipoNivelRelacionadoCodigo")) Is Nothing) Then
                Me.Tables.Add(New TipoNivelRelacionadoCodigoDataTable(ds.Tables("TipoNivelRelacionadoCodigo")))
            End If
            If (Not (ds.Tables("TipoControloAutForma")) Is Nothing) Then
                Me.Tables.Add(New TipoControloAutFormaDataTable(ds.Tables("TipoControloAutForma")))
            End If
            If (Not (ds.Tables("Iso15924")) Is Nothing) Then
                Me.Tables.Add(New Iso15924DataTable(ds.Tables("Iso15924")))
            End If
            If (Not (ds.Tables("AutoEliminacao")) Is Nothing) Then
                Me.Tables.Add(New AutoEliminacaoDataTable(ds.Tables("AutoEliminacao")))
            End If
            If (Not (ds.Tables("Iso639")) Is Nothing) Then
                Me.Tables.Add(New Iso639DataTable(ds.Tables("Iso639")))
            End If
            If (Not (ds.Tables("TipoTecnicasDeRegisto")) Is Nothing) Then
                Me.Tables.Add(New TipoTecnicasDeRegistoDataTable(ds.Tables("TipoTecnicasDeRegisto")))
            End If
            If (Not (ds.Tables("TipoNoticiaAut")) Is Nothing) Then
                Me.Tables.Add(New TipoNoticiaAutDataTable(ds.Tables("TipoNoticiaAut")))
            End If
            If (Not (ds.Tables("TipoFormaSuporteAcond")) Is Nothing) Then
                Me.Tables.Add(New TipoFormaSuporteAcondDataTable(ds.Tables("TipoFormaSuporteAcond")))
            End If
            If (Not (ds.Tables("TipoEstadoDeConservacao")) Is Nothing) Then
                Me.Tables.Add(New TipoEstadoDeConservacaoDataTable(ds.Tables("TipoEstadoDeConservacao")))
            End If
            If (Not (ds.Tables("TipoOrdenacao")) Is Nothing) Then
                Me.Tables.Add(New TipoOrdenacaoDataTable(ds.Tables("TipoOrdenacao")))
            End If
            If (Not (ds.Tables("NivelUnidadeFisica")) Is Nothing) Then
                Me.Tables.Add(New NivelUnidadeFisicaDataTable(ds.Tables("NivelUnidadeFisica")))
            End If
            If (Not (ds.Tables("TipoTradicaoDocumental")) Is Nothing) Then
                Me.Tables.Add(New TipoTradicaoDocumentalDataTable(ds.Tables("TipoTradicaoDocumental")))
            End If
            If (Not (ds.Tables("TipoMaterialDeSuporte")) Is Nothing) Then
                Me.Tables.Add(New TipoMaterialDeSuporteDataTable(ds.Tables("TipoMaterialDeSuporte")))
            End If
            If (Not (ds.Tables("SFRDAvaliacao")) Is Nothing) Then
                Me.Tables.Add(New SFRDAvaliacaoDataTable(ds.Tables("SFRDAvaliacao")))
            End If
            If (Not (ds.Tables("SFRDUFMateriaisComponente")) Is Nothing) Then
                Me.Tables.Add(New SFRDUFMateriaisComponenteDataTable(ds.Tables("SFRDUFMateriaisComponente")))
            End If
            If (Not (ds.Tables("ControloAutDicionario")) Is Nothing) Then
                Me.Tables.Add(New ControloAutDicionarioDataTable(ds.Tables("ControloAutDicionario")))
            End If
            If (Not (ds.Tables("Trustee")) Is Nothing) Then
                Me.Tables.Add(New TrusteeDataTable(ds.Tables("Trustee")))
            End If
            If (Not (ds.Tables("NivelControloAut")) Is Nothing) Then
                Me.Tables.Add(New NivelControloAutDataTable(ds.Tables("NivelControloAut")))
            End If
            If (Not (ds.Tables("ControloAutEntidadeProdutora")) Is Nothing) Then
                Me.Tables.Add(New ControloAutEntidadeProdutoraDataTable(ds.Tables("ControloAutEntidadeProdutora")))
            End If
            If (Not (ds.Tables("SFRDCondicaoDeAcesso")) Is Nothing) Then
                Me.Tables.Add(New SFRDCondicaoDeAcessoDataTable(ds.Tables("SFRDCondicaoDeAcesso")))
            End If
            If (Not (ds.Tables("SFRDUFDescricaoFisica")) Is Nothing) Then
                Me.Tables.Add(New SFRDUFDescricaoFisicaDataTable(ds.Tables("SFRDUFDescricaoFisica")))
            End If
            If (Not (ds.Tables("SecurableObject")) Is Nothing) Then
                Me.Tables.Add(New SecurableObjectDataTable(ds.Tables("SecurableObject")))
            End If
            If (Not (ds.Tables("SFRDUnidadeFisica")) Is Nothing) Then
                Me.Tables.Add(New SFRDUnidadeFisicaDataTable(ds.Tables("SFRDUnidadeFisica")))
            End If
            If (Not (ds.Tables("Iso3166")) Is Nothing) Then
                Me.Tables.Add(New Iso3166DataTable(ds.Tables("Iso3166")))
            End If
            If (Not (ds.Tables("SFRDUFComponente")) Is Nothing) Then
                Me.Tables.Add(New SFRDUFComponenteDataTable(ds.Tables("SFRDUFComponente")))
            End If
            If (Not (ds.Tables("TipoDensidade")) Is Nothing) Then
                Me.Tables.Add(New TipoDensidadeDataTable(ds.Tables("TipoDensidade")))
            End If
            If (Not (ds.Tables("SFRDConteudoEEstrutura")) Is Nothing) Then
                Me.Tables.Add(New SFRDConteudoEEstruturaDataTable(ds.Tables("SFRDConteudoEEstrutura")))
            End If
            If (Not (ds.Tables("TipoSubDensidade")) Is Nothing) Then
                Me.Tables.Add(New TipoSubDensidadeDataTable(ds.Tables("TipoSubDensidade")))
            End If
            If (Not (ds.Tables("SFRDContexto")) Is Nothing) Then
                Me.Tables.Add(New SFRDContextoDataTable(ds.Tables("SFRDContexto")))
            End If
            If (Not (ds.Tables("SFRDUFTecnicasRegComponente")) Is Nothing) Then
                Me.Tables.Add(New SFRDUFTecnicasRegComponenteDataTable(ds.Tables("SFRDUFTecnicasRegComponente")))
            End If
            If (Not (ds.Tables("TipoMedida")) Is Nothing) Then
                Me.Tables.Add(New TipoMedidaDataTable(ds.Tables("TipoMedida")))
            End If
            If (Not (ds.Tables("Nivel")) Is Nothing) Then
                Me.Tables.Add(New NivelDataTable(ds.Tables("Nivel")))
            End If
            If (Not (ds.Tables("SFRDDocumentacaoAssociada")) Is Nothing) Then
                Me.Tables.Add(New SFRDDocumentacaoAssociadaDataTable(ds.Tables("SFRDDocumentacaoAssociada")))
            End If
            If (Not (ds.Tables("SFRDAvaliacaoRel")) Is Nothing) Then
                Me.Tables.Add(New SFRDAvaliacaoRelDataTable(ds.Tables("SFRDAvaliacaoRel")))
            End If
            If (Not (ds.Tables("TipoAcondicionamento")) Is Nothing) Then
                Me.Tables.Add(New TipoAcondicionamentoDataTable(ds.Tables("TipoAcondicionamento")))
            End If
            If (Not (ds.Tables("TipoEstadoConservacao")) Is Nothing) Then
                Me.Tables.Add(New TipoEstadoConservacaoDataTable(ds.Tables("TipoEstadoConservacao")))
            End If
            If (Not (ds.Tables("SFRDImagemVolume")) Is Nothing) Then
                Me.Tables.Add(New SFRDImagemVolumeDataTable(ds.Tables("SFRDImagemVolume")))
            End If
            If (Not (ds.Tables("TipoTecnicaRegisto")) Is Nothing) Then
                Me.Tables.Add(New TipoTecnicaRegistoDataTable(ds.Tables("TipoTecnicaRegisto")))
            End If
            If (Not (ds.Tables("ServerLicense")) Is Nothing) Then
                Me.Tables.Add(New ServerLicenseDataTable(ds.Tables("ServerLicense")))
            End If
            If (Not (ds.Tables("AccessControlElement")) Is Nothing) Then
                Me.Tables.Add(New AccessControlElementDataTable(ds.Tables("AccessControlElement")))
            End If
            If (Not (ds.Tables("TipoMaterial")) Is Nothing) Then
                Me.Tables.Add(New TipoMaterialDataTable(ds.Tables("TipoMaterial")))
            End If
            If (Not (ds.Tables("TipoNivel")) Is Nothing) Then
                Me.Tables.Add(New TipoNivelDataTable(ds.Tables("TipoNivel")))
            End If
            If (Not (ds.Tables("SFRDNotaGeral")) Is Nothing) Then
                Me.Tables.Add(New SFRDNotaGeralDataTable(ds.Tables("SFRDNotaGeral")))
            End If
            If (Not (ds.Tables("SecurableObjectNivel")) Is Nothing) Then
                Me.Tables.Add(New SecurableObjectNivelDataTable(ds.Tables("SecurableObjectNivel")))
            End If
            If (Not (ds.Tables("TipoServer")) Is Nothing) Then
                Me.Tables.Add(New TipoServerDataTable(ds.Tables("TipoServer")))
            End If
            If (Not (ds.Tables("TipoNivelRelacionado")) Is Nothing) Then
                Me.Tables.Add(New TipoNivelRelacionadoDataTable(ds.Tables("TipoNivelRelacionado")))
            End If
            If (Not (ds.Tables("SFRDUFCota")) Is Nothing) Then
                Me.Tables.Add(New SFRDUFCotaDataTable(ds.Tables("SFRDUFCota")))
            End If
            If (Not (ds.Tables("TipoClient")) Is Nothing) Then
                Me.Tables.Add(New TipoClientDataTable(ds.Tables("TipoClient")))
            End If
            If (Not (ds.Tables("TrusteeGroup")) Is Nothing) Then
                Me.Tables.Add(New TrusteeGroupDataTable(ds.Tables("TrusteeGroup")))
            End If
            If (Not (ds.Tables("TrusteePrivilege")) Is Nothing) Then
                Me.Tables.Add(New TrusteePrivilegeDataTable(ds.Tables("TrusteePrivilege")))
            End If
            If (Not (ds.Tables("TipoSuporte")) Is Nothing) Then
                Me.Tables.Add(New TipoSuporteDataTable(ds.Tables("TipoSuporte")))
            End If
            If (Not (ds.Tables("SFRDTradicaoDocumental")) Is Nothing) Then
                Me.Tables.Add(New SFRDTradicaoDocumentalDataTable(ds.Tables("SFRDTradicaoDocumental")))
            End If
            If (Not (ds.Tables("TrusteeUser")) Is Nothing) Then
                Me.Tables.Add(New TrusteeUserDataTable(ds.Tables("TrusteeUser")))
            End If
            If (Not (ds.Tables("UserGroups")) Is Nothing) Then
                Me.Tables.Add(New UserGroupsDataTable(ds.Tables("UserGroups")))
            End If
            If (Not (ds.Tables("SFRDMaterialDeSuporte")) Is Nothing) Then
                Me.Tables.Add(New SFRDMaterialDeSuporteDataTable(ds.Tables("SFRDMaterialDeSuporte")))
            End If
            If (Not (ds.Tables("ProductFunction")) Is Nothing) Then
                Me.Tables.Add(New ProductFunctionDataTable(ds.Tables("ProductFunction")))
            End If
            If (Not (ds.Tables("SFRDOrdenacao")) Is Nothing) Then
                Me.Tables.Add(New SFRDOrdenacaoDataTable(ds.Tables("SFRDOrdenacao")))
            End If
            If (Not (ds.Tables("TipoFunction")) Is Nothing) Then
                Me.Tables.Add(New TipoFunctionDataTable(ds.Tables("TipoFunction")))
            End If
            If (Not (ds.Tables("ControloAutDataDeDescricao")) Is Nothing) Then
                Me.Tables.Add(New ControloAutDataDeDescricaoDataTable(ds.Tables("ControloAutDataDeDescricao")))
            End If
            If (Not (ds.Tables("SFRDEstadoDeConservacao")) Is Nothing) Then
                Me.Tables.Add(New SFRDEstadoDeConservacaoDataTable(ds.Tables("SFRDEstadoDeConservacao")))
            End If
            If (Not (ds.Tables("RelacaoTipoNivelRelacionado")) Is Nothing) Then
                Me.Tables.Add(New RelacaoTipoNivelRelacionadoDataTable(ds.Tables("RelacaoTipoNivelRelacionado")))
            End If
            If (Not (ds.Tables("SFRDFormaSuporteAcond")) Is Nothing) Then
                Me.Tables.Add(New SFRDFormaSuporteAcondDataTable(ds.Tables("SFRDFormaSuporteAcond")))
            End If
            If (Not (ds.Tables("TipoPertinencia")) Is Nothing) Then
                Me.Tables.Add(New TipoPertinenciaDataTable(ds.Tables("TipoPertinencia")))
            End If
            If (Not (ds.Tables("SFRDTecnicasDeRegisto")) Is Nothing) Then
                Me.Tables.Add(New SFRDTecnicasDeRegistoDataTable(ds.Tables("SFRDTecnicasDeRegisto")))
            End If
            If (Not (ds.Tables("SFRDUFAutoEliminacao")) Is Nothing) Then
                Me.Tables.Add(New SFRDUFAutoEliminacaoDataTable(ds.Tables("SFRDUFAutoEliminacao")))
            End If
            If (Not (ds.Tables("SFRDImagem")) Is Nothing) Then
                Me.Tables.Add(New SFRDImagemDataTable(ds.Tables("SFRDImagem")))
            End If
            If (Not (ds.Tables("ControloAutDatasExistencia")) Is Nothing) Then
                Me.Tables.Add(New ControloAutDatasExistenciaDataTable(ds.Tables("ControloAutDatasExistencia")))
            End If
            If (Not (ds.Tables("FRDBaseDataDeDescricao")) Is Nothing) Then
                Me.Tables.Add(New FRDBaseDataDeDescricaoDataTable(ds.Tables("FRDBaseDataDeDescricao")))
            End If
            If (Not (ds.Tables("SFRDDatasProducao")) Is Nothing) Then
                Me.Tables.Add(New SFRDDatasProducaoDataTable(ds.Tables("SFRDDatasProducao")))
            End If
            If (Not (ds.Tables("RelacaoHierarquica")) Is Nothing) Then
                Me.Tables.Add(New RelacaoHierarquicaDataTable(ds.Tables("RelacaoHierarquica")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ControloAutRel As ControloAutRelDataTable
        Get
            Return Me.tableControloAutRel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientLicense As ClientLicenseDataTable
        Get
            Return Me.tableClientLicense
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IndexFRDCA As IndexFRDCADataTable
        Get
            Return Me.tableIndexFRDCA
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ControloAut As ControloAutDataTable
        Get
            Return Me.tableControloAut
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoNoticiaATipoControloAForma As TipoNoticiaATipoControloAFormaDataTable
        Get
            Return Me.tableTipoNoticiaATipoControloAForma
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NivelDesignado As NivelDesignadoDataTable
        Get
            Return Me.tableNivelDesignado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoFRDBase As TipoFRDBaseDataTable
        Get
            Return Me.tableTipoFRDBase
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoOperation As TipoOperationDataTable
        Get
            Return Me.tableTipoOperation
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoFunctionGroup As TipoFunctionGroupDataTable
        Get
            Return Me.tableTipoFunctionGroup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRDBase As FRDBaseDataTable
        Get
            Return Me.tableFRDBase
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dicionario As DicionarioDataTable
        Get
            Return Me.tableDicionario
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NivelUnidadeFisicaCodigo As NivelUnidadeFisicaCodigoDataTable
        Get
            Return Me.tableNivelUnidadeFisicaCodigo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoEntidadeProdutora As TipoEntidadeProdutoraDataTable
        Get
            Return Me.tableTipoEntidadeProdutora
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientActivity As ClientActivityDataTable
        Get
            Return Me.tableClientActivity
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GlobalConfig As GlobalConfigDataTable
        Get
            Return Me.tableGlobalConfig
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FunctionOperation As FunctionOperationDataTable
        Get
            Return Me.tableFunctionOperation
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoControloAutRel As TipoControloAutRelDataTable
        Get
            Return Me.tableTipoControloAutRel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoNivelRelacionadoCodigo As TipoNivelRelacionadoCodigoDataTable
        Get
            Return Me.tableTipoNivelRelacionadoCodigo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoControloAutForma As TipoControloAutFormaDataTable
        Get
            Return Me.tableTipoControloAutForma
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Iso15924 As Iso15924DataTable
        Get
            Return Me.tableIso15924
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AutoEliminacao As AutoEliminacaoDataTable
        Get
            Return Me.tableAutoEliminacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Iso639 As Iso639DataTable
        Get
            Return Me.tableIso639
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoTecnicasDeRegisto As TipoTecnicasDeRegistoDataTable
        Get
            Return Me.tableTipoTecnicasDeRegisto
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoNoticiaAut As TipoNoticiaAutDataTable
        Get
            Return Me.tableTipoNoticiaAut
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoFormaSuporteAcond As TipoFormaSuporteAcondDataTable
        Get
            Return Me.tableTipoFormaSuporteAcond
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoEstadoDeConservacao As TipoEstadoDeConservacaoDataTable
        Get
            Return Me.tableTipoEstadoDeConservacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoOrdenacao As TipoOrdenacaoDataTable
        Get
            Return Me.tableTipoOrdenacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NivelUnidadeFisica As NivelUnidadeFisicaDataTable
        Get
            Return Me.tableNivelUnidadeFisica
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoTradicaoDocumental As TipoTradicaoDocumentalDataTable
        Get
            Return Me.tableTipoTradicaoDocumental
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoMaterialDeSuporte As TipoMaterialDeSuporteDataTable
        Get
            Return Me.tableTipoMaterialDeSuporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDAvaliacao As SFRDAvaliacaoDataTable
        Get
            Return Me.tableSFRDAvaliacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDUFMateriaisComponente As SFRDUFMateriaisComponenteDataTable
        Get
            Return Me.tableSFRDUFMateriaisComponente
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ControloAutDicionario As ControloAutDicionarioDataTable
        Get
            Return Me.tableControloAutDicionario
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Trustee As TrusteeDataTable
        Get
            Return Me.tableTrustee
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NivelControloAut As NivelControloAutDataTable
        Get
            Return Me.tableNivelControloAut
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ControloAutEntidadeProdutora As ControloAutEntidadeProdutoraDataTable
        Get
            Return Me.tableControloAutEntidadeProdutora
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDCondicaoDeAcesso As SFRDCondicaoDeAcessoDataTable
        Get
            Return Me.tableSFRDCondicaoDeAcesso
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDUFDescricaoFisica As SFRDUFDescricaoFisicaDataTable
        Get
            Return Me.tableSFRDUFDescricaoFisica
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecurableObject As SecurableObjectDataTable
        Get
            Return Me.tableSecurableObject
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDUnidadeFisica As SFRDUnidadeFisicaDataTable
        Get
            Return Me.tableSFRDUnidadeFisica
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Iso3166 As Iso3166DataTable
        Get
            Return Me.tableIso3166
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDUFComponente As SFRDUFComponenteDataTable
        Get
            Return Me.tableSFRDUFComponente
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoDensidade As TipoDensidadeDataTable
        Get
            Return Me.tableTipoDensidade
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDConteudoEEstrutura As SFRDConteudoEEstruturaDataTable
        Get
            Return Me.tableSFRDConteudoEEstrutura
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoSubDensidade As TipoSubDensidadeDataTable
        Get
            Return Me.tableTipoSubDensidade
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDContexto As SFRDContextoDataTable
        Get
            Return Me.tableSFRDContexto
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDUFTecnicasRegComponente As SFRDUFTecnicasRegComponenteDataTable
        Get
            Return Me.tableSFRDUFTecnicasRegComponente
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoMedida As TipoMedidaDataTable
        Get
            Return Me.tableTipoMedida
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Nivel As NivelDataTable
        Get
            Return Me.tableNivel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDDocumentacaoAssociada As SFRDDocumentacaoAssociadaDataTable
        Get
            Return Me.tableSFRDDocumentacaoAssociada
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDAvaliacaoRel As SFRDAvaliacaoRelDataTable
        Get
            Return Me.tableSFRDAvaliacaoRel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoAcondicionamento As TipoAcondicionamentoDataTable
        Get
            Return Me.tableTipoAcondicionamento
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoEstadoConservacao As TipoEstadoConservacaoDataTable
        Get
            Return Me.tableTipoEstadoConservacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDImagemVolume As SFRDImagemVolumeDataTable
        Get
            Return Me.tableSFRDImagemVolume
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoTecnicaRegisto As TipoTecnicaRegistoDataTable
        Get
            Return Me.tableTipoTecnicaRegisto
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ServerLicense As ServerLicenseDataTable
        Get
            Return Me.tableServerLicense
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AccessControlElement As AccessControlElementDataTable
        Get
            Return Me.tableAccessControlElement
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoMaterial As TipoMaterialDataTable
        Get
            Return Me.tableTipoMaterial
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoNivel As TipoNivelDataTable
        Get
            Return Me.tableTipoNivel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDNotaGeral As SFRDNotaGeralDataTable
        Get
            Return Me.tableSFRDNotaGeral
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecurableObjectNivel As SecurableObjectNivelDataTable
        Get
            Return Me.tableSecurableObjectNivel
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoServer As TipoServerDataTable
        Get
            Return Me.tableTipoServer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoNivelRelacionado As TipoNivelRelacionadoDataTable
        Get
            Return Me.tableTipoNivelRelacionado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDUFCota As SFRDUFCotaDataTable
        Get
            Return Me.tableSFRDUFCota
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoClient As TipoClientDataTable
        Get
            Return Me.tableTipoClient
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TrusteeGroup As TrusteeGroupDataTable
        Get
            Return Me.tableTrusteeGroup
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TrusteePrivilege As TrusteePrivilegeDataTable
        Get
            Return Me.tableTrusteePrivilege
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoSuporte As TipoSuporteDataTable
        Get
            Return Me.tableTipoSuporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDTradicaoDocumental As SFRDTradicaoDocumentalDataTable
        Get
            Return Me.tableSFRDTradicaoDocumental
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TrusteeUser As TrusteeUserDataTable
        Get
            Return Me.tableTrusteeUser
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserGroups As UserGroupsDataTable
        Get
            Return Me.tableUserGroups
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDMaterialDeSuporte As SFRDMaterialDeSuporteDataTable
        Get
            Return Me.tableSFRDMaterialDeSuporte
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductFunction As ProductFunctionDataTable
        Get
            Return Me.tableProductFunction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDOrdenacao As SFRDOrdenacaoDataTable
        Get
            Return Me.tableSFRDOrdenacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoFunction As TipoFunctionDataTable
        Get
            Return Me.tableTipoFunction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ControloAutDataDeDescricao As ControloAutDataDeDescricaoDataTable
        Get
            Return Me.tableControloAutDataDeDescricao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDEstadoDeConservacao As SFRDEstadoDeConservacaoDataTable
        Get
            Return Me.tableSFRDEstadoDeConservacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RelacaoTipoNivelRelacionado As RelacaoTipoNivelRelacionadoDataTable
        Get
            Return Me.tableRelacaoTipoNivelRelacionado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDFormaSuporteAcond As SFRDFormaSuporteAcondDataTable
        Get
            Return Me.tableSFRDFormaSuporteAcond
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoPertinencia As TipoPertinenciaDataTable
        Get
            Return Me.tableTipoPertinencia
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDTecnicasDeRegisto As SFRDTecnicasDeRegistoDataTable
        Get
            Return Me.tableSFRDTecnicasDeRegisto
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDUFAutoEliminacao As SFRDUFAutoEliminacaoDataTable
        Get
            Return Me.tableSFRDUFAutoEliminacao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDImagem As SFRDImagemDataTable
        Get
            Return Me.tableSFRDImagem
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ControloAutDatasExistencia As ControloAutDatasExistenciaDataTable
        Get
            Return Me.tableControloAutDatasExistencia
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FRDBaseDataDeDescricao As FRDBaseDataDeDescricaoDataTable
        Get
            Return Me.tableFRDBaseDataDeDescricao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SFRDDatasProducao As SFRDDatasProducaoDataTable
        Get
            Return Me.tableSFRDDatasProducao
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RelacaoHierarquica As RelacaoHierarquicaDataTable
        Get
            Return Me.tableRelacaoHierarquica
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As GISADataset = CType(MyBase.Clone,GISADataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ControloAutRel")) Is Nothing) Then
            Me.Tables.Add(New ControloAutRelDataTable(ds.Tables("ControloAutRel")))
        End If
        If (Not (ds.Tables("ClientLicense")) Is Nothing) Then
            Me.Tables.Add(New ClientLicenseDataTable(ds.Tables("ClientLicense")))
        End If
        If (Not (ds.Tables("IndexFRDCA")) Is Nothing) Then
            Me.Tables.Add(New IndexFRDCADataTable(ds.Tables("IndexFRDCA")))
        End If
        If (Not (ds.Tables("ControloAut")) Is Nothing) Then
            Me.Tables.Add(New ControloAutDataTable(ds.Tables("ControloAut")))
        End If
        If (Not (ds.Tables("TipoNoticiaATipoControloAForma")) Is Nothing) Then
            Me.Tables.Add(New TipoNoticiaATipoControloAFormaDataTable(ds.Tables("TipoNoticiaATipoControloAForma")))
        End If
        If (Not (ds.Tables("NivelDesignado")) Is Nothing) Then
            Me.Tables.Add(New NivelDesignadoDataTable(ds.Tables("NivelDesignado")))
        End If
        If (Not (ds.Tables("TipoFRDBase")) Is Nothing) Then
            Me.Tables.Add(New TipoFRDBaseDataTable(ds.Tables("TipoFRDBase")))
        End If
        If (Not (ds.Tables("TipoOperation")) Is Nothing) Then
            Me.Tables.Add(New TipoOperationDataTable(ds.Tables("TipoOperation")))
        End If
        If (Not (ds.Tables("TipoFunctionGroup")) Is Nothing) Then
            Me.Tables.Add(New TipoFunctionGroupDataTable(ds.Tables("TipoFunctionGroup")))
        End If
        If (Not (ds.Tables("FRDBase")) Is Nothing) Then
            Me.Tables.Add(New FRDBaseDataTable(ds.Tables("FRDBase")))
        End If
        If (Not (ds.Tables("Dicionario")) Is Nothing) Then
            Me.Tables.Add(New DicionarioDataTable(ds.Tables("Dicionario")))
        End If
        If (Not (ds.Tables("NivelUnidadeFisicaCodigo")) Is Nothing) Then
            Me.Tables.Add(New NivelUnidadeFisicaCodigoDataTable(ds.Tables("NivelUnidadeFisicaCodigo")))
        End If
        If (Not (ds.Tables("TipoEntidadeProdutora")) Is Nothing) Then
            Me.Tables.Add(New TipoEntidadeProdutoraDataTable(ds.Tables("TipoEntidadeProdutora")))
        End If
        If (Not (ds.Tables("ClientActivity")) Is Nothing) Then
            Me.Tables.Add(New ClientActivityDataTable(ds.Tables("ClientActivity")))
        End If
        If (Not (ds.Tables("GlobalConfig")) Is Nothing) Then
            Me.Tables.Add(New GlobalConfigDataTable(ds.Tables("GlobalConfig")))
        End If
        If (Not (ds.Tables("FunctionOperation")) Is Nothing) Then
            Me.Tables.Add(New FunctionOperationDataTable(ds.Tables("FunctionOperation")))
        End If
        If (Not (ds.Tables("TipoControloAutRel")) Is Nothing) Then
            Me.Tables.Add(New TipoControloAutRelDataTable(ds.Tables("TipoControloAutRel")))
        End If
        If (Not (ds.Tables("TipoNivelRelacionadoCodigo")) Is Nothing) Then
            Me.Tables.Add(New TipoNivelRelacionadoCodigoDataTable(ds.Tables("TipoNivelRelacionadoCodigo")))
        End If
        If (Not (ds.Tables("TipoControloAutForma")) Is Nothing) Then
            Me.Tables.Add(New TipoControloAutFormaDataTable(ds.Tables("TipoControloAutForma")))
        End If
        If (Not (ds.Tables("Iso15924")) Is Nothing) Then
            Me.Tables.Add(New Iso15924DataTable(ds.Tables("Iso15924")))
        End If
        If (Not (ds.Tables("AutoEliminacao")) Is Nothing) Then
            Me.Tables.Add(New AutoEliminacaoDataTable(ds.Tables("AutoEliminacao")))
        End If
        If (Not (ds.Tables("Iso639")) Is Nothing) Then
            Me.Tables.Add(New Iso639DataTable(ds.Tables("Iso639")))
        End If
        If (Not (ds.Tables("TipoTecnicasDeRegisto")) Is Nothing) Then
            Me.Tables.Add(New TipoTecnicasDeRegistoDataTable(ds.Tables("TipoTecnicasDeRegisto")))
        End If
        If (Not (ds.Tables("TipoNoticiaAut")) Is Nothing) Then
            Me.Tables.Add(New TipoNoticiaAutDataTable(ds.Tables("TipoNoticiaAut")))
        End If
        If (Not (ds.Tables("TipoFormaSuporteAcond")) Is Nothing) Then
            Me.Tables.Add(New TipoFormaSuporteAcondDataTable(ds.Tables("TipoFormaSuporteAcond")))
        End If
        If (Not (ds.Tables("TipoEstadoDeConservacao")) Is Nothing) Then
            Me.Tables.Add(New TipoEstadoDeConservacaoDataTable(ds.Tables("TipoEstadoDeConservacao")))
        End If
        If (Not (ds.Tables("TipoOrdenacao")) Is Nothing) Then
            Me.Tables.Add(New TipoOrdenacaoDataTable(ds.Tables("TipoOrdenacao")))
        End If
        If (Not (ds.Tables("NivelUnidadeFisica")) Is Nothing) Then
            Me.Tables.Add(New NivelUnidadeFisicaDataTable(ds.Tables("NivelUnidadeFisica")))
        End If
        If (Not (ds.Tables("TipoTradicaoDocumental")) Is Nothing) Then
            Me.Tables.Add(New TipoTradicaoDocumentalDataTable(ds.Tables("TipoTradicaoDocumental")))
        End If
        If (Not (ds.Tables("TipoMaterialDeSuporte")) Is Nothing) Then
            Me.Tables.Add(New TipoMaterialDeSuporteDataTable(ds.Tables("TipoMaterialDeSuporte")))
        End If
        If (Not (ds.Tables("SFRDAvaliacao")) Is Nothing) Then
            Me.Tables.Add(New SFRDAvaliacaoDataTable(ds.Tables("SFRDAvaliacao")))
        End If
        If (Not (ds.Tables("SFRDUFMateriaisComponente")) Is Nothing) Then
            Me.Tables.Add(New SFRDUFMateriaisComponenteDataTable(ds.Tables("SFRDUFMateriaisComponente")))
        End If
        If (Not (ds.Tables("ControloAutDicionario")) Is Nothing) Then
            Me.Tables.Add(New ControloAutDicionarioDataTable(ds.Tables("ControloAutDicionario")))
        End If
        If (Not (ds.Tables("Trustee")) Is Nothing) Then
            Me.Tables.Add(New TrusteeDataTable(ds.Tables("Trustee")))
        End If
        If (Not (ds.Tables("NivelControloAut")) Is Nothing) Then
            Me.Tables.Add(New NivelControloAutDataTable(ds.Tables("NivelControloAut")))
        End If
        If (Not (ds.Tables("ControloAutEntidadeProdutora")) Is Nothing) Then
            Me.Tables.Add(New ControloAutEntidadeProdutoraDataTable(ds.Tables("ControloAutEntidadeProdutora")))
        End If
        If (Not (ds.Tables("SFRDCondicaoDeAcesso")) Is Nothing) Then
            Me.Tables.Add(New SFRDCondicaoDeAcessoDataTable(ds.Tables("SFRDCondicaoDeAcesso")))
        End If
        If (Not (ds.Tables("SFRDUFDescricaoFisica")) Is Nothing) Then
            Me.Tables.Add(New SFRDUFDescricaoFisicaDataTable(ds.Tables("SFRDUFDescricaoFisica")))
        End If
        If (Not (ds.Tables("SecurableObject")) Is Nothing) Then
            Me.Tables.Add(New SecurableObjectDataTable(ds.Tables("SecurableObject")))
        End If
        If (Not (ds.Tables("SFRDUnidadeFisica")) Is Nothing) Then
            Me.Tables.Add(New SFRDUnidadeFisicaDataTable(ds.Tables("SFRDUnidadeFisica")))
        End If
        If (Not (ds.Tables("Iso3166")) Is Nothing) Then
            Me.Tables.Add(New Iso3166DataTable(ds.Tables("Iso3166")))
        End If
        If (Not (ds.Tables("SFRDUFComponente")) Is Nothing) Then
            Me.Tables.Add(New SFRDUFComponenteDataTable(ds.Tables("SFRDUFComponente")))
        End If
        If (Not (ds.Tables("TipoDensidade")) Is Nothing) Then
            Me.Tables.Add(New TipoDensidadeDataTable(ds.Tables("TipoDensidade")))
        End If
        If (Not (ds.Tables("SFRDConteudoEEstrutura")) Is Nothing) Then
            Me.Tables.Add(New SFRDConteudoEEstruturaDataTable(ds.Tables("SFRDConteudoEEstrutura")))
        End If
        If (Not (ds.Tables("TipoSubDensidade")) Is Nothing) Then
            Me.Tables.Add(New TipoSubDensidadeDataTable(ds.Tables("TipoSubDensidade")))
        End If
        If (Not (ds.Tables("SFRDContexto")) Is Nothing) Then
            Me.Tables.Add(New SFRDContextoDataTable(ds.Tables("SFRDContexto")))
        End If
        If (Not (ds.Tables("SFRDUFTecnicasRegComponente")) Is Nothing) Then
            Me.Tables.Add(New SFRDUFTecnicasRegComponenteDataTable(ds.Tables("SFRDUFTecnicasRegComponente")))
        End If
        If (Not (ds.Tables("TipoMedida")) Is Nothing) Then
            Me.Tables.Add(New TipoMedidaDataTable(ds.Tables("TipoMedida")))
        End If
        If (Not (ds.Tables("Nivel")) Is Nothing) Then
            Me.Tables.Add(New NivelDataTable(ds.Tables("Nivel")))
        End If
        If (Not (ds.Tables("SFRDDocumentacaoAssociada")) Is Nothing) Then
            Me.Tables.Add(New SFRDDocumentacaoAssociadaDataTable(ds.Tables("SFRDDocumentacaoAssociada")))
        End If
        If (Not (ds.Tables("SFRDAvaliacaoRel")) Is Nothing) Then
            Me.Tables.Add(New SFRDAvaliacaoRelDataTable(ds.Tables("SFRDAvaliacaoRel")))
        End If
        If (Not (ds.Tables("TipoAcondicionamento")) Is Nothing) Then
            Me.Tables.Add(New TipoAcondicionamentoDataTable(ds.Tables("TipoAcondicionamento")))
        End If
        If (Not (ds.Tables("TipoEstadoConservacao")) Is Nothing) Then
            Me.Tables.Add(New TipoEstadoConservacaoDataTable(ds.Tables("TipoEstadoConservacao")))
        End If
        If (Not (ds.Tables("SFRDImagemVolume")) Is Nothing) Then
            Me.Tables.Add(New SFRDImagemVolumeDataTable(ds.Tables("SFRDImagemVolume")))
        End If
        If (Not (ds.Tables("TipoTecnicaRegisto")) Is Nothing) Then
            Me.Tables.Add(New TipoTecnicaRegistoDataTable(ds.Tables("TipoTecnicaRegisto")))
        End If
        If (Not (ds.Tables("ServerLicense")) Is Nothing) Then
            Me.Tables.Add(New ServerLicenseDataTable(ds.Tables("ServerLicense")))
        End If
        If (Not (ds.Tables("AccessControlElement")) Is Nothing) Then
            Me.Tables.Add(New AccessControlElementDataTable(ds.Tables("AccessControlElement")))
        End If
        If (Not (ds.Tables("TipoMaterial")) Is Nothing) Then
            Me.Tables.Add(New TipoMaterialDataTable(ds.Tables("TipoMaterial")))
        End If
        If (Not (ds.Tables("TipoNivel")) Is Nothing) Then
            Me.Tables.Add(New TipoNivelDataTable(ds.Tables("TipoNivel")))
        End If
        If (Not (ds.Tables("SFRDNotaGeral")) Is Nothing) Then
            Me.Tables.Add(New SFRDNotaGeralDataTable(ds.Tables("SFRDNotaGeral")))
        End If
        If (Not (ds.Tables("SecurableObjectNivel")) Is Nothing) Then
            Me.Tables.Add(New SecurableObjectNivelDataTable(ds.Tables("SecurableObjectNivel")))
        End If
        If (Not (ds.Tables("TipoServer")) Is Nothing) Then
            Me.Tables.Add(New TipoServerDataTable(ds.Tables("TipoServer")))
        End If
        If (Not (ds.Tables("TipoNivelRelacionado")) Is Nothing) Then
            Me.Tables.Add(New TipoNivelRelacionadoDataTable(ds.Tables("TipoNivelRelacionado")))
        End If
        If (Not (ds.Tables("SFRDUFCota")) Is Nothing) Then
            Me.Tables.Add(New SFRDUFCotaDataTable(ds.Tables("SFRDUFCota")))
        End If
        If (Not (ds.Tables("TipoClient")) Is Nothing) Then
            Me.Tables.Add(New TipoClientDataTable(ds.Tables("TipoClient")))
        End If
        If (Not (ds.Tables("TrusteeGroup")) Is Nothing) Then
            Me.Tables.Add(New TrusteeGroupDataTable(ds.Tables("TrusteeGroup")))
        End If
        If (Not (ds.Tables("TrusteePrivilege")) Is Nothing) Then
            Me.Tables.Add(New TrusteePrivilegeDataTable(ds.Tables("TrusteePrivilege")))
        End If
        If (Not (ds.Tables("TipoSuporte")) Is Nothing) Then
            Me.Tables.Add(New TipoSuporteDataTable(ds.Tables("TipoSuporte")))
        End If
        If (Not (ds.Tables("SFRDTradicaoDocumental")) Is Nothing) Then
            Me.Tables.Add(New SFRDTradicaoDocumentalDataTable(ds.Tables("SFRDTradicaoDocumental")))
        End If
        If (Not (ds.Tables("TrusteeUser")) Is Nothing) Then
            Me.Tables.Add(New TrusteeUserDataTable(ds.Tables("TrusteeUser")))
        End If
        If (Not (ds.Tables("UserGroups")) Is Nothing) Then
            Me.Tables.Add(New UserGroupsDataTable(ds.Tables("UserGroups")))
        End If
        If (Not (ds.Tables("SFRDMaterialDeSuporte")) Is Nothing) Then
            Me.Tables.Add(New SFRDMaterialDeSuporteDataTable(ds.Tables("SFRDMaterialDeSuporte")))
        End If
        If (Not (ds.Tables("ProductFunction")) Is Nothing) Then
            Me.Tables.Add(New ProductFunctionDataTable(ds.Tables("ProductFunction")))
        End If
        If (Not (ds.Tables("SFRDOrdenacao")) Is Nothing) Then
            Me.Tables.Add(New SFRDOrdenacaoDataTable(ds.Tables("SFRDOrdenacao")))
        End If
        If (Not (ds.Tables("TipoFunction")) Is Nothing) Then
            Me.Tables.Add(New TipoFunctionDataTable(ds.Tables("TipoFunction")))
        End If
        If (Not (ds.Tables("ControloAutDataDeDescricao")) Is Nothing) Then
            Me.Tables.Add(New ControloAutDataDeDescricaoDataTable(ds.Tables("ControloAutDataDeDescricao")))
        End If
        If (Not (ds.Tables("SFRDEstadoDeConservacao")) Is Nothing) Then
            Me.Tables.Add(New SFRDEstadoDeConservacaoDataTable(ds.Tables("SFRDEstadoDeConservacao")))
        End If
        If (Not (ds.Tables("RelacaoTipoNivelRelacionado")) Is Nothing) Then
            Me.Tables.Add(New RelacaoTipoNivelRelacionadoDataTable(ds.Tables("RelacaoTipoNivelRelacionado")))
        End If
        If (Not (ds.Tables("SFRDFormaSuporteAcond")) Is Nothing) Then
            Me.Tables.Add(New SFRDFormaSuporteAcondDataTable(ds.Tables("SFRDFormaSuporteAcond")))
        End If
        If (Not (ds.Tables("TipoPertinencia")) Is Nothing) Then
            Me.Tables.Add(New TipoPertinenciaDataTable(ds.Tables("TipoPertinencia")))
        End If
        If (Not (ds.Tables("SFRDTecnicasDeRegisto")) Is Nothing) Then
            Me.Tables.Add(New SFRDTecnicasDeRegistoDataTable(ds.Tables("SFRDTecnicasDeRegisto")))
        End If
        If (Not (ds.Tables("SFRDUFAutoEliminacao")) Is Nothing) Then
            Me.Tables.Add(New SFRDUFAutoEliminacaoDataTable(ds.Tables("SFRDUFAutoEliminacao")))
        End If
        If (Not (ds.Tables("SFRDImagem")) Is Nothing) Then
            Me.Tables.Add(New SFRDImagemDataTable(ds.Tables("SFRDImagem")))
        End If
        If (Not (ds.Tables("ControloAutDatasExistencia")) Is Nothing) Then
            Me.Tables.Add(New ControloAutDatasExistenciaDataTable(ds.Tables("ControloAutDatasExistencia")))
        End If
        If (Not (ds.Tables("FRDBaseDataDeDescricao")) Is Nothing) Then
            Me.Tables.Add(New FRDBaseDataDeDescricaoDataTable(ds.Tables("FRDBaseDataDeDescricao")))
        End If
        If (Not (ds.Tables("SFRDDatasProducao")) Is Nothing) Then
            Me.Tables.Add(New SFRDDatasProducaoDataTable(ds.Tables("SFRDDatasProducao")))
        End If
        If (Not (ds.Tables("RelacaoHierarquica")) Is Nothing) Then
            Me.Tables.Add(New RelacaoHierarquicaDataTable(ds.Tables("RelacaoHierarquica")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableControloAutRel = CType(Me.Tables("ControloAutRel"),ControloAutRelDataTable)
        If (Not (Me.tableControloAutRel) Is Nothing) Then
            Me.tableControloAutRel.InitVars
        End If
        Me.tableClientLicense = CType(Me.Tables("ClientLicense"),ClientLicenseDataTable)
        If (Not (Me.tableClientLicense) Is Nothing) Then
            Me.tableClientLicense.InitVars
        End If
        Me.tableIndexFRDCA = CType(Me.Tables("IndexFRDCA"),IndexFRDCADataTable)
        If (Not (Me.tableIndexFRDCA) Is Nothing) Then
            Me.tableIndexFRDCA.InitVars
        End If
        Me.tableControloAut = CType(Me.Tables("ControloAut"),ControloAutDataTable)
        If (Not (Me.tableControloAut) Is Nothing) Then
            Me.tableControloAut.InitVars
        End If
        Me.tableTipoNoticiaATipoControloAForma = CType(Me.Tables("TipoNoticiaATipoControloAForma"),TipoNoticiaATipoControloAFormaDataTable)
        If (Not (Me.tableTipoNoticiaATipoControloAForma) Is Nothing) Then
            Me.tableTipoNoticiaATipoControloAForma.InitVars
        End If
        Me.tableNivelDesignado = CType(Me.Tables("NivelDesignado"),NivelDesignadoDataTable)
        If (Not (Me.tableNivelDesignado) Is Nothing) Then
            Me.tableNivelDesignado.InitVars
        End If
        Me.tableTipoFRDBase = CType(Me.Tables("TipoFRDBase"),TipoFRDBaseDataTable)
        If (Not (Me.tableTipoFRDBase) Is Nothing) Then
            Me.tableTipoFRDBase.InitVars
        End If
        Me.tableTipoOperation = CType(Me.Tables("TipoOperation"),TipoOperationDataTable)
        If (Not (Me.tableTipoOperation) Is Nothing) Then
            Me.tableTipoOperation.InitVars
        End If
        Me.tableTipoFunctionGroup = CType(Me.Tables("TipoFunctionGroup"),TipoFunctionGroupDataTable)
        If (Not (Me.tableTipoFunctionGroup) Is Nothing) Then
            Me.tableTipoFunctionGroup.InitVars
        End If
        Me.tableFRDBase = CType(Me.Tables("FRDBase"),FRDBaseDataTable)
        If (Not (Me.tableFRDBase) Is Nothing) Then
            Me.tableFRDBase.InitVars
        End If
        Me.tableDicionario = CType(Me.Tables("Dicionario"),DicionarioDataTable)
        If (Not (Me.tableDicionario) Is Nothing) Then
            Me.tableDicionario.InitVars
        End If
        Me.tableNivelUnidadeFisicaCodigo = CType(Me.Tables("NivelUnidadeFisicaCodigo"),NivelUnidadeFisicaCodigoDataTable)
        If (Not (Me.tableNivelUnidadeFisicaCodigo) Is Nothing) Then
            Me.tableNivelUnidadeFisicaCodigo.InitVars
        End If
        Me.tableTipoEntidadeProdutora = CType(Me.Tables("TipoEntidadeProdutora"),TipoEntidadeProdutoraDataTable)
        If (Not (Me.tableTipoEntidadeProdutora) Is Nothing) Then
            Me.tableTipoEntidadeProdutora.InitVars
        End If
        Me.tableClientActivity = CType(Me.Tables("ClientActivity"),ClientActivityDataTable)
        If (Not (Me.tableClientActivity) Is Nothing) Then
            Me.tableClientActivity.InitVars
        End If
        Me.tableGlobalConfig = CType(Me.Tables("GlobalConfig"),GlobalConfigDataTable)
        If (Not (Me.tableGlobalConfig) Is Nothing) Then
            Me.tableGlobalConfig.InitVars
        End If
        Me.tableFunctionOperation = CType(Me.Tables("FunctionOperation"),FunctionOperationDataTable)
        If (Not (Me.tableFunctionOperation) Is Nothing) Then
            Me.tableFunctionOperation.InitVars
        End If
        Me.tableTipoControloAutRel = CType(Me.Tables("TipoControloAutRel"),TipoControloAutRelDataTable)
        If (Not (Me.tableTipoControloAutRel) Is Nothing) Then
            Me.tableTipoControloAutRel.InitVars
        End If
        Me.tableTipoNivelRelacionadoCodigo = CType(Me.Tables("TipoNivelRelacionadoCodigo"),TipoNivelRelacionadoCodigoDataTable)
        If (Not (Me.tableTipoNivelRelacionadoCodigo) Is Nothing) Then
            Me.tableTipoNivelRelacionadoCodigo.InitVars
        End If
        Me.tableTipoControloAutForma = CType(Me.Tables("TipoControloAutForma"),TipoControloAutFormaDataTable)
        If (Not (Me.tableTipoControloAutForma) Is Nothing) Then
            Me.tableTipoControloAutForma.InitVars
        End If
        Me.tableIso15924 = CType(Me.Tables("Iso15924"),Iso15924DataTable)
        If (Not (Me.tableIso15924) Is Nothing) Then
            Me.tableIso15924.InitVars
        End If
        Me.tableAutoEliminacao = CType(Me.Tables("AutoEliminacao"),AutoEliminacaoDataTable)
        If (Not (Me.tableAutoEliminacao) Is Nothing) Then
            Me.tableAutoEliminacao.InitVars
        End If
        Me.tableIso639 = CType(Me.Tables("Iso639"),Iso639DataTable)
        If (Not (Me.tableIso639) Is Nothing) Then
            Me.tableIso639.InitVars
        End If
        Me.tableTipoTecnicasDeRegisto = CType(Me.Tables("TipoTecnicasDeRegisto"),TipoTecnicasDeRegistoDataTable)
        If (Not (Me.tableTipoTecnicasDeRegisto) Is Nothing) Then
            Me.tableTipoTecnicasDeRegisto.InitVars
        End If
        Me.tableTipoNoticiaAut = CType(Me.Tables("TipoNoticiaAut"),TipoNoticiaAutDataTable)
        If (Not (Me.tableTipoNoticiaAut) Is Nothing) Then
            Me.tableTipoNoticiaAut.InitVars
        End If
        Me.tableTipoFormaSuporteAcond = CType(Me.Tables("TipoFormaSuporteAcond"),TipoFormaSuporteAcondDataTable)
        If (Not (Me.tableTipoFormaSuporteAcond) Is Nothing) Then
            Me.tableTipoFormaSuporteAcond.InitVars
        End If
        Me.tableTipoEstadoDeConservacao = CType(Me.Tables("TipoEstadoDeConservacao"),TipoEstadoDeConservacaoDataTable)
        If (Not (Me.tableTipoEstadoDeConservacao) Is Nothing) Then
            Me.tableTipoEstadoDeConservacao.InitVars
        End If
        Me.tableTipoOrdenacao = CType(Me.Tables("TipoOrdenacao"),TipoOrdenacaoDataTable)
        If (Not (Me.tableTipoOrdenacao) Is Nothing) Then
            Me.tableTipoOrdenacao.InitVars
        End If
        Me.tableNivelUnidadeFisica = CType(Me.Tables("NivelUnidadeFisica"),NivelUnidadeFisicaDataTable)
        If (Not (Me.tableNivelUnidadeFisica) Is Nothing) Then
            Me.tableNivelUnidadeFisica.InitVars
        End If
        Me.tableTipoTradicaoDocumental = CType(Me.Tables("TipoTradicaoDocumental"),TipoTradicaoDocumentalDataTable)
        If (Not (Me.tableTipoTradicaoDocumental) Is Nothing) Then
            Me.tableTipoTradicaoDocumental.InitVars
        End If
        Me.tableTipoMaterialDeSuporte = CType(Me.Tables("TipoMaterialDeSuporte"),TipoMaterialDeSuporteDataTable)
        If (Not (Me.tableTipoMaterialDeSuporte) Is Nothing) Then
            Me.tableTipoMaterialDeSuporte.InitVars
        End If
        Me.tableSFRDAvaliacao = CType(Me.Tables("SFRDAvaliacao"),SFRDAvaliacaoDataTable)
        If (Not (Me.tableSFRDAvaliacao) Is Nothing) Then
            Me.tableSFRDAvaliacao.InitVars
        End If
        Me.tableSFRDUFMateriaisComponente = CType(Me.Tables("SFRDUFMateriaisComponente"),SFRDUFMateriaisComponenteDataTable)
        If (Not (Me.tableSFRDUFMateriaisComponente) Is Nothing) Then
            Me.tableSFRDUFMateriaisComponente.InitVars
        End If
        Me.tableControloAutDicionario = CType(Me.Tables("ControloAutDicionario"),ControloAutDicionarioDataTable)
        If (Not (Me.tableControloAutDicionario) Is Nothing) Then
            Me.tableControloAutDicionario.InitVars
        End If
        Me.tableTrustee = CType(Me.Tables("Trustee"),TrusteeDataTable)
        If (Not (Me.tableTrustee) Is Nothing) Then
            Me.tableTrustee.InitVars
        End If
        Me.tableNivelControloAut = CType(Me.Tables("NivelControloAut"),NivelControloAutDataTable)
        If (Not (Me.tableNivelControloAut) Is Nothing) Then
            Me.tableNivelControloAut.InitVars
        End If
        Me.tableControloAutEntidadeProdutora = CType(Me.Tables("ControloAutEntidadeProdutora"),ControloAutEntidadeProdutoraDataTable)
        If (Not (Me.tableControloAutEntidadeProdutora) Is Nothing) Then
            Me.tableControloAutEntidadeProdutora.InitVars
        End If
        Me.tableSFRDCondicaoDeAcesso = CType(Me.Tables("SFRDCondicaoDeAcesso"),SFRDCondicaoDeAcessoDataTable)
        If (Not (Me.tableSFRDCondicaoDeAcesso) Is Nothing) Then
            Me.tableSFRDCondicaoDeAcesso.InitVars
        End If
        Me.tableSFRDUFDescricaoFisica = CType(Me.Tables("SFRDUFDescricaoFisica"),SFRDUFDescricaoFisicaDataTable)
        If (Not (Me.tableSFRDUFDescricaoFisica) Is Nothing) Then
            Me.tableSFRDUFDescricaoFisica.InitVars
        End If
        Me.tableSecurableObject = CType(Me.Tables("SecurableObject"),SecurableObjectDataTable)
        If (Not (Me.tableSecurableObject) Is Nothing) Then
            Me.tableSecurableObject.InitVars
        End If
        Me.tableSFRDUnidadeFisica = CType(Me.Tables("SFRDUnidadeFisica"),SFRDUnidadeFisicaDataTable)
        If (Not (Me.tableSFRDUnidadeFisica) Is Nothing) Then
            Me.tableSFRDUnidadeFisica.InitVars
        End If
        Me.tableIso3166 = CType(Me.Tables("Iso3166"),Iso3166DataTable)
        If (Not (Me.tableIso3166) Is Nothing) Then
            Me.tableIso3166.InitVars
        End If
        Me.tableSFRDUFComponente = CType(Me.Tables("SFRDUFComponente"),SFRDUFComponenteDataTable)
        If (Not (Me.tableSFRDUFComponente) Is Nothing) Then
            Me.tableSFRDUFComponente.InitVars
        End If
        Me.tableTipoDensidade = CType(Me.Tables("TipoDensidade"),TipoDensidadeDataTable)
        If (Not (Me.tableTipoDensidade) Is Nothing) Then
            Me.tableTipoDensidade.InitVars
        End If
        Me.tableSFRDConteudoEEstrutura = CType(Me.Tables("SFRDConteudoEEstrutura"),SFRDConteudoEEstruturaDataTable)
        If (Not (Me.tableSFRDConteudoEEstrutura) Is Nothing) Then
            Me.tableSFRDConteudoEEstrutura.InitVars
        End If
        Me.tableTipoSubDensidade = CType(Me.Tables("TipoSubDensidade"),TipoSubDensidadeDataTable)
        If (Not (Me.tableTipoSubDensidade) Is Nothing) Then
            Me.tableTipoSubDensidade.InitVars
        End If
        Me.tableSFRDContexto = CType(Me.Tables("SFRDContexto"),SFRDContextoDataTable)
        If (Not (Me.tableSFRDContexto) Is Nothing) Then
            Me.tableSFRDContexto.InitVars
        End If
        Me.tableSFRDUFTecnicasRegComponente = CType(Me.Tables("SFRDUFTecnicasRegComponente"),SFRDUFTecnicasRegComponenteDataTable)
        If (Not (Me.tableSFRDUFTecnicasRegComponente) Is Nothing) Then
            Me.tableSFRDUFTecnicasRegComponente.InitVars
        End If
        Me.tableTipoMedida = CType(Me.Tables("TipoMedida"),TipoMedidaDataTable)
        If (Not (Me.tableTipoMedida) Is Nothing) Then
            Me.tableTipoMedida.InitVars
        End If
        Me.tableNivel = CType(Me.Tables("Nivel"),NivelDataTable)
        If (Not (Me.tableNivel) Is Nothing) Then
            Me.tableNivel.InitVars
        End If
        Me.tableSFRDDocumentacaoAssociada = CType(Me.Tables("SFRDDocumentacaoAssociada"),SFRDDocumentacaoAssociadaDataTable)
        If (Not (Me.tableSFRDDocumentacaoAssociada) Is Nothing) Then
            Me.tableSFRDDocumentacaoAssociada.InitVars
        End If
        Me.tableSFRDAvaliacaoRel = CType(Me.Tables("SFRDAvaliacaoRel"),SFRDAvaliacaoRelDataTable)
        If (Not (Me.tableSFRDAvaliacaoRel) Is Nothing) Then
            Me.tableSFRDAvaliacaoRel.InitVars
        End If
        Me.tableTipoAcondicionamento = CType(Me.Tables("TipoAcondicionamento"),TipoAcondicionamentoDataTable)
        If (Not (Me.tableTipoAcondicionamento) Is Nothing) Then
            Me.tableTipoAcondicionamento.InitVars
        End If
        Me.tableTipoEstadoConservacao = CType(Me.Tables("TipoEstadoConservacao"),TipoEstadoConservacaoDataTable)
        If (Not (Me.tableTipoEstadoConservacao) Is Nothing) Then
            Me.tableTipoEstadoConservacao.InitVars
        End If
        Me.tableSFRDImagemVolume = CType(Me.Tables("SFRDImagemVolume"),SFRDImagemVolumeDataTable)
        If (Not (Me.tableSFRDImagemVolume) Is Nothing) Then
            Me.tableSFRDImagemVolume.InitVars
        End If
        Me.tableTipoTecnicaRegisto = CType(Me.Tables("TipoTecnicaRegisto"),TipoTecnicaRegistoDataTable)
        If (Not (Me.tableTipoTecnicaRegisto) Is Nothing) Then
            Me.tableTipoTecnicaRegisto.InitVars
        End If
        Me.tableServerLicense = CType(Me.Tables("ServerLicense"),ServerLicenseDataTable)
        If (Not (Me.tableServerLicense) Is Nothing) Then
            Me.tableServerLicense.InitVars
        End If
        Me.tableAccessControlElement = CType(Me.Tables("AccessControlElement"),AccessControlElementDataTable)
        If (Not (Me.tableAccessControlElement) Is Nothing) Then
            Me.tableAccessControlElement.InitVars
        End If
        Me.tableTipoMaterial = CType(Me.Tables("TipoMaterial"),TipoMaterialDataTable)
        If (Not (Me.tableTipoMaterial) Is Nothing) Then
            Me.tableTipoMaterial.InitVars
        End If
        Me.tableTipoNivel = CType(Me.Tables("TipoNivel"),TipoNivelDataTable)
        If (Not (Me.tableTipoNivel) Is Nothing) Then
            Me.tableTipoNivel.InitVars
        End If
        Me.tableSFRDNotaGeral = CType(Me.Tables("SFRDNotaGeral"),SFRDNotaGeralDataTable)
        If (Not (Me.tableSFRDNotaGeral) Is Nothing) Then
            Me.tableSFRDNotaGeral.InitVars
        End If
        Me.tableSecurableObjectNivel = CType(Me.Tables("SecurableObjectNivel"),SecurableObjectNivelDataTable)
        If (Not (Me.tableSecurableObjectNivel) Is Nothing) Then
            Me.tableSecurableObjectNivel.InitVars
        End If
        Me.tableTipoServer = CType(Me.Tables("TipoServer"),TipoServerDataTable)
        If (Not (Me.tableTipoServer) Is Nothing) Then
            Me.tableTipoServer.InitVars
        End If
        Me.tableTipoNivelRelacionado = CType(Me.Tables("TipoNivelRelacionado"),TipoNivelRelacionadoDataTable)
        If (Not (Me.tableTipoNivelRelacionado) Is Nothing) Then
            Me.tableTipoNivelRelacionado.InitVars
        End If
        Me.tableSFRDUFCota = CType(Me.Tables("SFRDUFCota"),SFRDUFCotaDataTable)
        If (Not (Me.tableSFRDUFCota) Is Nothing) Then
            Me.tableSFRDUFCota.InitVars
        End If
        Me.tableTipoClient = CType(Me.Tables("TipoClient"),TipoClientDataTable)
        If (Not (Me.tableTipoClient) Is Nothing) Then
            Me.tableTipoClient.InitVars
        End If
        Me.tableTrusteeGroup = CType(Me.Tables("TrusteeGroup"),TrusteeGroupDataTable)
        If (Not (Me.tableTrusteeGroup) Is Nothing) Then
            Me.tableTrusteeGroup.InitVars
        End If
        Me.tableTrusteePrivilege = CType(Me.Tables("TrusteePrivilege"),TrusteePrivilegeDataTable)
        If (Not (Me.tableTrusteePrivilege) Is Nothing) Then
            Me.tableTrusteePrivilege.InitVars
        End If
        Me.tableTipoSuporte = CType(Me.Tables("TipoSuporte"),TipoSuporteDataTable)
        If (Not (Me.tableTipoSuporte) Is Nothing) Then
            Me.tableTipoSuporte.InitVars
        End If
        Me.tableSFRDTradicaoDocumental = CType(Me.Tables("SFRDTradicaoDocumental"),SFRDTradicaoDocumentalDataTable)
        If (Not (Me.tableSFRDTradicaoDocumental) Is Nothing) Then
            Me.tableSFRDTradicaoDocumental.InitVars
        End If
        Me.tableTrusteeUser = CType(Me.Tables("TrusteeUser"),TrusteeUserDataTable)
        If (Not (Me.tableTrusteeUser) Is Nothing) Then
            Me.tableTrusteeUser.InitVars
        End If
        Me.tableUserGroups = CType(Me.Tables("UserGroups"),UserGroupsDataTable)
        If (Not (Me.tableUserGroups) Is Nothing) Then
            Me.tableUserGroups.InitVars
        End If
        Me.tableSFRDMaterialDeSuporte = CType(Me.Tables("SFRDMaterialDeSuporte"),SFRDMaterialDeSuporteDataTable)
        If (Not (Me.tableSFRDMaterialDeSuporte) Is Nothing) Then
            Me.tableSFRDMaterialDeSuporte.InitVars
        End If
        Me.tableProductFunction = CType(Me.Tables("ProductFunction"),ProductFunctionDataTable)
        If (Not (Me.tableProductFunction) Is Nothing) Then
            Me.tableProductFunction.InitVars
        End If
        Me.tableSFRDOrdenacao = CType(Me.Tables("SFRDOrdenacao"),SFRDOrdenacaoDataTable)
        If (Not (Me.tableSFRDOrdenacao) Is Nothing) Then
            Me.tableSFRDOrdenacao.InitVars
        End If
        Me.tableTipoFunction = CType(Me.Tables("TipoFunction"),TipoFunctionDataTable)
        If (Not (Me.tableTipoFunction) Is Nothing) Then
            Me.tableTipoFunction.InitVars
        End If
        Me.tableControloAutDataDeDescricao = CType(Me.Tables("ControloAutDataDeDescricao"),ControloAutDataDeDescricaoDataTable)
        If (Not (Me.tableControloAutDataDeDescricao) Is Nothing) Then
            Me.tableControloAutDataDeDescricao.InitVars
        End If
        Me.tableSFRDEstadoDeConservacao = CType(Me.Tables("SFRDEstadoDeConservacao"),SFRDEstadoDeConservacaoDataTable)
        If (Not (Me.tableSFRDEstadoDeConservacao) Is Nothing) Then
            Me.tableSFRDEstadoDeConservacao.InitVars
        End If
        Me.tableRelacaoTipoNivelRelacionado = CType(Me.Tables("RelacaoTipoNivelRelacionado"),RelacaoTipoNivelRelacionadoDataTable)
        If (Not (Me.tableRelacaoTipoNivelRelacionado) Is Nothing) Then
            Me.tableRelacaoTipoNivelRelacionado.InitVars
        End If
        Me.tableSFRDFormaSuporteAcond = CType(Me.Tables("SFRDFormaSuporteAcond"),SFRDFormaSuporteAcondDataTable)
        If (Not (Me.tableSFRDFormaSuporteAcond) Is Nothing) Then
            Me.tableSFRDFormaSuporteAcond.InitVars
        End If
        Me.tableTipoPertinencia = CType(Me.Tables("TipoPertinencia"),TipoPertinenciaDataTable)
        If (Not (Me.tableTipoPertinencia) Is Nothing) Then
            Me.tableTipoPertinencia.InitVars
        End If
        Me.tableSFRDTecnicasDeRegisto = CType(Me.Tables("SFRDTecnicasDeRegisto"),SFRDTecnicasDeRegistoDataTable)
        If (Not (Me.tableSFRDTecnicasDeRegisto) Is Nothing) Then
            Me.tableSFRDTecnicasDeRegisto.InitVars
        End If
        Me.tableSFRDUFAutoEliminacao = CType(Me.Tables("SFRDUFAutoEliminacao"),SFRDUFAutoEliminacaoDataTable)
        If (Not (Me.tableSFRDUFAutoEliminacao) Is Nothing) Then
            Me.tableSFRDUFAutoEliminacao.InitVars
        End If
        Me.tableSFRDImagem = CType(Me.Tables("SFRDImagem"),SFRDImagemDataTable)
        If (Not (Me.tableSFRDImagem) Is Nothing) Then
            Me.tableSFRDImagem.InitVars
        End If
        Me.tableControloAutDatasExistencia = CType(Me.Tables("ControloAutDatasExistencia"),ControloAutDatasExistenciaDataTable)
        If (Not (Me.tableControloAutDatasExistencia) Is Nothing) Then
            Me.tableControloAutDatasExistencia.InitVars
        End If
        Me.tableFRDBaseDataDeDescricao = CType(Me.Tables("FRDBaseDataDeDescricao"),FRDBaseDataDeDescricaoDataTable)
        If (Not (Me.tableFRDBaseDataDeDescricao) Is Nothing) Then
            Me.tableFRDBaseDataDeDescricao.InitVars
        End If
        Me.tableSFRDDatasProducao = CType(Me.Tables("SFRDDatasProducao"),SFRDDatasProducaoDataTable)
        If (Not (Me.tableSFRDDatasProducao) Is Nothing) Then
            Me.tableSFRDDatasProducao.InitVars
        End If
        Me.tableRelacaoHierarquica = CType(Me.Tables("RelacaoHierarquica"),RelacaoHierarquicaDataTable)
        If (Not (Me.tableRelacaoHierarquica) Is Nothing) Then
            Me.tableRelacaoHierarquica.InitVars
        End If
        Me.relationTipoNivelRelacionadoRelacaoHierarquica = Me.Relations("TipoNivelRelacionadoRelacaoHierarquica")
        Me.relationNivelRelacaoHierarquicaUpper = Me.Relations("NivelRelacaoHierarquicaUpper")
        Me.relationNivelRelacaoHierarquica = Me.Relations("NivelRelacaoHierarquica")
        Me.relationFRDBaseSFRDDatasProducao = Me.Relations("FRDBaseSFRDDatasProducao")
        Me.relationTrusteeUserFRDBaseDataDeDescricaoAuthority = Me.Relations("TrusteeUserFRDBaseDataDeDescricaoAuthority")
        Me.relationTrusteeUserFRDBaseDataDeDescricao = Me.Relations("TrusteeUserFRDBaseDataDeDescricao")
        Me.relationFRDBaseFRDBaseDataDeDescricao = Me.Relations("FRDBaseFRDBaseDataDeDescricao")
        Me.relationControloAutControloAutDatasExistencia = Me.Relations("ControloAutControloAutDatasExistencia")
        Me.relationFRDBaseSFRDImagem = Me.Relations("FRDBaseSFRDImagem")
        Me.relationSFRDImagemVolumeSFRDImagem = Me.Relations("SFRDImagemVolumeSFRDImagem")
        Me.relationAutoEliminacaoSFRDUFAutoEliminacao = Me.Relations("AutoEliminacaoSFRDUFAutoEliminacao")
        Me.relationFRDBaseSFRDUFAutoEliminacao = Me.Relations("FRDBaseSFRDUFAutoEliminacao")
        Me.relationTipoTecnicasDeRegistoSFRDTecnicasDeRegisto = Me.Relations("TipoTecnicasDeRegistoSFRDTecnicasDeRegisto")
        Me.relationSFRDCondicaoDeAcessoSFRDTecnicasDeRegisto = Me.Relations("SFRDCondicaoDeAcessoSFRDTecnicasDeRegisto")
        Me.relationSFRDCondicaoDeAcessoSFRDFormaSuporteAcond = Me.Relations("SFRDCondicaoDeAcessoSFRDFormaSuporteAcond")
        Me.relationTipoFormaSuporteAcondSFRDFormaSuporteAcond = Me.Relations("TipoFormaSuporteAcondSFRDFormaSuporteAcond")
        Me.relationTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper = Me.Relations("TipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper")
        Me.relationTipoNivelRelacionadoRelacaoTipoNivelRelacionado = Me.Relations("TipoNivelRelacionadoRelacaoTipoNivelRelacionado")
        Me.relationTipoEstadoDeConservacaoSFRDEstadoDeConservacao = Me.Relations("TipoEstadoDeConservacaoSFRDEstadoDeConservacao")
        Me.relationSFRDCondicaoDeAcessoSFRDEstadoDeConservacao = Me.Relations("SFRDCondicaoDeAcessoSFRDEstadoDeConservacao")
        Me.relationTrusteeUserControloAutDataDeDescricaoAuthority = Me.Relations("TrusteeUserControloAutDataDeDescricaoAuthority")
        Me.relationTrusteeUserControloAutDataDeDescricao = Me.Relations("TrusteeUserControloAutDataDeDescricao")
        Me.relationControloAutControloAutDataDeDescricao = Me.Relations("ControloAutControloAutDataDeDescricao")
        Me.relationTipoFunctionTipoFunction = Me.Relations("TipoFunctionTipoFunction")
        Me.relationTipoFunctionGroupTipoFunction = Me.Relations("TipoFunctionGroupTipoFunction")
        Me.relationTipoOrdenacaoSFRDOrdenacao = Me.Relations("TipoOrdenacaoSFRDOrdenacao")
        Me.relationFRDBaseSFRDOrdenacao = Me.Relations("FRDBaseSFRDOrdenacao")
        Me.relationTipoServerProductFunction = Me.Relations("TipoServerProductFunction")
        Me.relationTipoClientProductFunction = Me.Relations("TipoClientProductFunction")
        Me.relationTipoFunctionProductFunction = Me.Relations("TipoFunctionProductFunction")
        Me.relationTipoMaterialDeSuporteSFRDMaterialDeSuporte = Me.Relations("TipoMaterialDeSuporteSFRDMaterialDeSuporte")
        Me.relationSFRDCondicaoDeAcessoSFRDMaterialDeSuporte = Me.Relations("SFRDCondicaoDeAcessoSFRDMaterialDeSuporte")
        Me.relationTrusteeUserUserGroups = Me.Relations("TrusteeUserUserGroups")
        Me.relationTrusteeGroupUserGroups = Me.Relations("TrusteeGroupUserGroups")
        Me.relationTrusteeTrusteeUser = Me.Relations("TrusteeTrusteeUser")
        Me.relationTrusteeUserTrusteeUserAuthority = Me.Relations("TrusteeUserTrusteeUserAuthority")
        Me.relationTipoTradicaoDocumentalSFRDTradicaoDocumental = Me.Relations("TipoTradicaoDocumentalSFRDTradicaoDocumental")
        Me.relationFRDBaseSFRDTradicaoDocumental = Me.Relations("FRDBaseSFRDTradicaoDocumental")
        Me.relationTrusteeTrusteePrivilege = Me.Relations("TrusteeTrusteePrivilege")
        Me.relationFunctionOperationTrusteePrivilege = Me.Relations("FunctionOperationTrusteePrivilege")
        Me.relationTrusteeTrusteeGroup = Me.Relations("TrusteeTrusteeGroup")
        Me.relationFRDBaseSFRDUFCota = Me.Relations("FRDBaseSFRDUFCota")
        Me.relationTipoNivelTipoNivelRelacionado = Me.Relations("TipoNivelTipoNivelRelacionado")
        Me.relationNivelSecurableObjectNivel = Me.Relations("NivelSecurableObjectNivel")
        Me.relationSecurableObjectSecurableObjectNivel = Me.Relations("SecurableObjectSecurableObjectNivel")
        Me.relationFRDBaseSFRDNotaGeral = Me.Relations("FRDBaseSFRDNotaGeral")
        Me.relationSecurableObjectAccessControlElement = Me.Relations("SecurableObjectAccessControlElement")
        Me.relationTrusteeAccessControlElement = Me.Relations("TrusteeAccessControlElement")
        Me.relationTipoServerServerLicense = Me.Relations("TipoServerServerLicense")
        Me.relationTipoSubDensidadeSFRDAvaliacaoRel = Me.Relations("TipoSubDensidadeSFRDAvaliacaoRel")
        Me.relationNivelSFRDAvaliacaoRel = Me.Relations("NivelSFRDAvaliacaoRel")
        Me.relationTipoDensidadeSFRDAvaliacaoRel = Me.Relations("TipoDensidadeSFRDAvaliacaoRel")
        Me.relationSFRDAvaliacaoSFRDAvaliacaoRel = Me.Relations("SFRDAvaliacaoSFRDAvaliacaoRel")
        Me.relationFRDBaseSFRDDocumentacaoAssociada = Me.Relations("FRDBaseSFRDDocumentacaoAssociada")
        Me.relationTipoNivelNivel = Me.Relations("TipoNivelNivel")
        Me.relationTipoTecnicaRegistoSFRDUFTecnicasRegComponente = Me.Relations("TipoTecnicaRegistoSFRDUFTecnicasRegComponente")
        Me.relationSFRDUFComponenteSFRDUFTecnicasRegComponente = Me.Relations("SFRDUFComponenteSFRDUFTecnicasRegComponente")
        Me.relationFRDBaseSFRDContexto = Me.Relations("FRDBaseSFRDContexto")
        Me.relationTipoDensidadeTipoSubDensidade = Me.Relations("TipoDensidadeTipoSubDensidade")
        Me.relationFRDBaseSFRDConteudoEEstrutura = Me.Relations("FRDBaseSFRDConteudoEEstrutura")
        Me.relationTipoSuporteSFRDUFComponente = Me.Relations("TipoSuporteSFRDUFComponente")
        Me.relationTipoEstadoConservacaoSFRDUFComponente = Me.Relations("TipoEstadoConservacaoSFRDUFComponente")
        Me.relationSFRDUFDescricaoFisicaSFRDUFComponente = Me.Relations("SFRDUFDescricaoFisicaSFRDUFComponente")
        Me.relationTipoMedidaSFRDUFComponente = Me.Relations("TipoMedidaSFRDUFComponente")
        Me.relationSFRDUnidadeFisicaSFRDUFComponente = Me.Relations("SFRDUnidadeFisicaSFRDUFComponente")
        Me.relationNivelSFRDUnidadeFisica = Me.Relations("NivelSFRDUnidadeFisica")
        Me.relationFRDBaseSFRDUnidadeFisica = Me.Relations("FRDBaseSFRDUnidadeFisica")
        Me.relationTipoAcondicionamentoSFRDUFDescricaoFisica = Me.Relations("TipoAcondicionamentoSFRDUFDescricaoFisica")
        Me.relationTipoMedidaSFRDUFDescricaoFisica = Me.Relations("TipoMedidaSFRDUFDescricaoFisica")
        Me.relationFRDBaseSFRDUFDescricaoFisica = Me.Relations("FRDBaseSFRDUFDescricaoFisica")
        Me.relationFRDBaseSFRDCondicaoDeAcesso = Me.Relations("FRDBaseSFRDCondicaoDeAcesso")
        Me.relationTipoEntidadeProdutoraControloAutEntidadeProdutora = Me.Relations("TipoEntidadeProdutoraControloAutEntidadeProdutora")
        Me.relationControloAutControloAutEntidadeProdutora = Me.Relations("ControloAutControloAutEntidadeProdutora")
        Me.relationNivelNivelControloAut = Me.Relations("NivelNivelControloAut")
        Me.relationControloAutNivelControloAut = Me.Relations("ControloAutNivelControloAut")
        Me.relationTipoControloAutFormaControloAutDicionario = Me.Relations("TipoControloAutFormaControloAutDicionario")
        Me.relationDicionarioControloAutDicionario = Me.Relations("DicionarioControloAutDicionario")
        Me.relationControloAutControloAutDicionario = Me.Relations("ControloAutControloAutDicionario")
        Me.relationTipoMaterialSFRDUFMateriaisComponente = Me.Relations("TipoMaterialSFRDUFMateriaisComponente")
        Me.relationSFRDUFComponenteSFRDUFMateriaisComponente = Me.Relations("SFRDUFComponenteSFRDUFMateriaisComponente")
        Me.relationAutoEliminacaoSFRDAvaliacao = Me.Relations("AutoEliminacaoSFRDAvaliacao")
        Me.relationFRDBaseSFRDAvaliacao = Me.Relations("FRDBaseSFRDAvaliacao")
        Me.relationTipoPertinenciaSFRDAvaliacao = Me.Relations("TipoPertinenciaSFRDAvaliacao")
        Me.relationTipoSubDensidadeSFRDAvaliacao = Me.Relations("TipoSubDensidadeSFRDAvaliacao")
        Me.relationTipoDensidadeSFRDAvaliacao = Me.Relations("TipoDensidadeSFRDAvaliacao")
        Me.relationNivelDesignadoNivelUnidadeFisica = Me.Relations("NivelDesignadoNivelUnidadeFisica")
        Me.relationTipoNivelRelacionadoTipoNivelRelacionadoCodigo = Me.Relations("TipoNivelRelacionadoTipoNivelRelacionadoCodigo")
        Me.relationTipoFunctionFunctionOperation = Me.Relations("TipoFunctionFunctionOperation")
        Me.relationTipoOperationFunctionOperation = Me.Relations("TipoOperationFunctionOperation")
        Me.relationClientLicenseClientActivity = Me.Relations("ClientLicenseClientActivity")
        Me.relationNivelNivelUnidadeFisicaCodigo = Me.Relations("NivelNivelUnidadeFisicaCodigo")
        Me.relationNivelFRDBase = Me.Relations("NivelFRDBase")
        Me.relationTipoFRDBaseFRDBase = Me.Relations("TipoFRDBaseFRDBase")
        Me.relationNivelNivelDesignado = Me.Relations("NivelNivelDesignado")
        Me.relationTipoNoticiaAutTipoNoticiaATipoControloAForma = Me.Relations("TipoNoticiaAutTipoNoticiaATipoControloAForma")
        Me.relationTipoControloAutFormaTipoNoticiaATipoControloAForma = Me.Relations("TipoControloAutFormaTipoNoticiaATipoControloAForma")
        Me.relationIso639ControloAut = Me.Relations("Iso639ControloAut")
        Me.relationIso15924ControloAut = Me.Relations("Iso15924ControloAut")
        Me.relationTipoNoticiaAutControloAut = Me.Relations("TipoNoticiaAutControloAut")
        Me.relationFRDBaseIndexFRDCA = Me.Relations("FRDBaseIndexFRDCA")
        Me.relationControloAutIndexFRDCA = Me.Relations("ControloAutIndexFRDCA")
        Me.relationTipoClientClientLicense = Me.Relations("TipoClientClientLicense")
        Me.relationControloAutControloAutRel = Me.Relations("ControloAutControloAutRel")
        Me.relationControloAutControloAutRelAlias = Me.Relations("ControloAutControloAutRelAlias")
        Me.relationTipoControloAutRelControloAutRel = Me.Relations("TipoControloAutRelControloAutRel")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "GISADataset"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("pt-PT")
        Me.CaseSensitive = true
        Me.EnforceConstraints = true
        Me.tableControloAutRel = New ControloAutRelDataTable
        Me.Tables.Add(Me.tableControloAutRel)
        Me.tableClientLicense = New ClientLicenseDataTable
        Me.Tables.Add(Me.tableClientLicense)
        Me.tableIndexFRDCA = New IndexFRDCADataTable
        Me.Tables.Add(Me.tableIndexFRDCA)
        Me.tableControloAut = New ControloAutDataTable
        Me.Tables.Add(Me.tableControloAut)
        Me.tableTipoNoticiaATipoControloAForma = New TipoNoticiaATipoControloAFormaDataTable
        Me.Tables.Add(Me.tableTipoNoticiaATipoControloAForma)
        Me.tableNivelDesignado = New NivelDesignadoDataTable
        Me.Tables.Add(Me.tableNivelDesignado)
        Me.tableTipoFRDBase = New TipoFRDBaseDataTable
        Me.Tables.Add(Me.tableTipoFRDBase)
        Me.tableTipoOperation = New TipoOperationDataTable
        Me.Tables.Add(Me.tableTipoOperation)
        Me.tableTipoFunctionGroup = New TipoFunctionGroupDataTable
        Me.Tables.Add(Me.tableTipoFunctionGroup)
        Me.tableFRDBase = New FRDBaseDataTable
        Me.Tables.Add(Me.tableFRDBase)
        Me.tableDicionario = New DicionarioDataTable
        Me.Tables.Add(Me.tableDicionario)
        Me.tableNivelUnidadeFisicaCodigo = New NivelUnidadeFisicaCodigoDataTable
        Me.Tables.Add(Me.tableNivelUnidadeFisicaCodigo)
        Me.tableTipoEntidadeProdutora = New TipoEntidadeProdutoraDataTable
        Me.Tables.Add(Me.tableTipoEntidadeProdutora)
        Me.tableClientActivity = New ClientActivityDataTable
        Me.Tables.Add(Me.tableClientActivity)
        Me.tableGlobalConfig = New GlobalConfigDataTable
        Me.Tables.Add(Me.tableGlobalConfig)
        Me.tableFunctionOperation = New FunctionOperationDataTable
        Me.Tables.Add(Me.tableFunctionOperation)
        Me.tableTipoControloAutRel = New TipoControloAutRelDataTable
        Me.Tables.Add(Me.tableTipoControloAutRel)
        Me.tableTipoNivelRelacionadoCodigo = New TipoNivelRelacionadoCodigoDataTable
        Me.Tables.Add(Me.tableTipoNivelRelacionadoCodigo)
        Me.tableTipoControloAutForma = New TipoControloAutFormaDataTable
        Me.Tables.Add(Me.tableTipoControloAutForma)
        Me.tableIso15924 = New Iso15924DataTable
        Me.Tables.Add(Me.tableIso15924)
        Me.tableAutoEliminacao = New AutoEliminacaoDataTable
        Me.Tables.Add(Me.tableAutoEliminacao)
        Me.tableIso639 = New Iso639DataTable
        Me.Tables.Add(Me.tableIso639)
        Me.tableTipoTecnicasDeRegisto = New TipoTecnicasDeRegistoDataTable
        Me.Tables.Add(Me.tableTipoTecnicasDeRegisto)
        Me.tableTipoNoticiaAut = New TipoNoticiaAutDataTable
        Me.Tables.Add(Me.tableTipoNoticiaAut)
        Me.tableTipoFormaSuporteAcond = New TipoFormaSuporteAcondDataTable
        Me.Tables.Add(Me.tableTipoFormaSuporteAcond)
        Me.tableTipoEstadoDeConservacao = New TipoEstadoDeConservacaoDataTable
        Me.Tables.Add(Me.tableTipoEstadoDeConservacao)
        Me.tableTipoOrdenacao = New TipoOrdenacaoDataTable
        Me.Tables.Add(Me.tableTipoOrdenacao)
        Me.tableNivelUnidadeFisica = New NivelUnidadeFisicaDataTable
        Me.Tables.Add(Me.tableNivelUnidadeFisica)
        Me.tableTipoTradicaoDocumental = New TipoTradicaoDocumentalDataTable
        Me.Tables.Add(Me.tableTipoTradicaoDocumental)
        Me.tableTipoMaterialDeSuporte = New TipoMaterialDeSuporteDataTable
        Me.Tables.Add(Me.tableTipoMaterialDeSuporte)
        Me.tableSFRDAvaliacao = New SFRDAvaliacaoDataTable
        Me.Tables.Add(Me.tableSFRDAvaliacao)
        Me.tableSFRDUFMateriaisComponente = New SFRDUFMateriaisComponenteDataTable
        Me.Tables.Add(Me.tableSFRDUFMateriaisComponente)
        Me.tableControloAutDicionario = New ControloAutDicionarioDataTable
        Me.Tables.Add(Me.tableControloAutDicionario)
        Me.tableTrustee = New TrusteeDataTable
        Me.Tables.Add(Me.tableTrustee)
        Me.tableNivelControloAut = New NivelControloAutDataTable
        Me.Tables.Add(Me.tableNivelControloAut)
        Me.tableControloAutEntidadeProdutora = New ControloAutEntidadeProdutoraDataTable
        Me.Tables.Add(Me.tableControloAutEntidadeProdutora)
        Me.tableSFRDCondicaoDeAcesso = New SFRDCondicaoDeAcessoDataTable
        Me.Tables.Add(Me.tableSFRDCondicaoDeAcesso)
        Me.tableSFRDUFDescricaoFisica = New SFRDUFDescricaoFisicaDataTable
        Me.Tables.Add(Me.tableSFRDUFDescricaoFisica)
        Me.tableSecurableObject = New SecurableObjectDataTable
        Me.Tables.Add(Me.tableSecurableObject)
        Me.tableSFRDUnidadeFisica = New SFRDUnidadeFisicaDataTable
        Me.Tables.Add(Me.tableSFRDUnidadeFisica)
        Me.tableIso3166 = New Iso3166DataTable
        Me.Tables.Add(Me.tableIso3166)
        Me.tableSFRDUFComponente = New SFRDUFComponenteDataTable
        Me.Tables.Add(Me.tableSFRDUFComponente)
        Me.tableTipoDensidade = New TipoDensidadeDataTable
        Me.Tables.Add(Me.tableTipoDensidade)
        Me.tableSFRDConteudoEEstrutura = New SFRDConteudoEEstruturaDataTable
        Me.Tables.Add(Me.tableSFRDConteudoEEstrutura)
        Me.tableTipoSubDensidade = New TipoSubDensidadeDataTable
        Me.Tables.Add(Me.tableTipoSubDensidade)
        Me.tableSFRDContexto = New SFRDContextoDataTable
        Me.Tables.Add(Me.tableSFRDContexto)
        Me.tableSFRDUFTecnicasRegComponente = New SFRDUFTecnicasRegComponenteDataTable
        Me.Tables.Add(Me.tableSFRDUFTecnicasRegComponente)
        Me.tableTipoMedida = New TipoMedidaDataTable
        Me.Tables.Add(Me.tableTipoMedida)
        Me.tableNivel = New NivelDataTable
        Me.Tables.Add(Me.tableNivel)
        Me.tableSFRDDocumentacaoAssociada = New SFRDDocumentacaoAssociadaDataTable
        Me.Tables.Add(Me.tableSFRDDocumentacaoAssociada)
        Me.tableSFRDAvaliacaoRel = New SFRDAvaliacaoRelDataTable
        Me.Tables.Add(Me.tableSFRDAvaliacaoRel)
        Me.tableTipoAcondicionamento = New TipoAcondicionamentoDataTable
        Me.Tables.Add(Me.tableTipoAcondicionamento)
        Me.tableTipoEstadoConservacao = New TipoEstadoConservacaoDataTable
        Me.Tables.Add(Me.tableTipoEstadoConservacao)
        Me.tableSFRDImagemVolume = New SFRDImagemVolumeDataTable
        Me.Tables.Add(Me.tableSFRDImagemVolume)
        Me.tableTipoTecnicaRegisto = New TipoTecnicaRegistoDataTable
        Me.Tables.Add(Me.tableTipoTecnicaRegisto)
        Me.tableServerLicense = New ServerLicenseDataTable
        Me.Tables.Add(Me.tableServerLicense)
        Me.tableAccessControlElement = New AccessControlElementDataTable
        Me.Tables.Add(Me.tableAccessControlElement)
        Me.tableTipoMaterial = New TipoMaterialDataTable
        Me.Tables.Add(Me.tableTipoMaterial)
        Me.tableTipoNivel = New TipoNivelDataTable
        Me.Tables.Add(Me.tableTipoNivel)
        Me.tableSFRDNotaGeral = New SFRDNotaGeralDataTable
        Me.Tables.Add(Me.tableSFRDNotaGeral)
        Me.tableSecurableObjectNivel = New SecurableObjectNivelDataTable
        Me.Tables.Add(Me.tableSecurableObjectNivel)
        Me.tableTipoServer = New TipoServerDataTable
        Me.Tables.Add(Me.tableTipoServer)
        Me.tableTipoNivelRelacionado = New TipoNivelRelacionadoDataTable
        Me.Tables.Add(Me.tableTipoNivelRelacionado)
        Me.tableSFRDUFCota = New SFRDUFCotaDataTable
        Me.Tables.Add(Me.tableSFRDUFCota)
        Me.tableTipoClient = New TipoClientDataTable
        Me.Tables.Add(Me.tableTipoClient)
        Me.tableTrusteeGroup = New TrusteeGroupDataTable
        Me.Tables.Add(Me.tableTrusteeGroup)
        Me.tableTrusteePrivilege = New TrusteePrivilegeDataTable
        Me.Tables.Add(Me.tableTrusteePrivilege)
        Me.tableTipoSuporte = New TipoSuporteDataTable
        Me.Tables.Add(Me.tableTipoSuporte)
        Me.tableSFRDTradicaoDocumental = New SFRDTradicaoDocumentalDataTable
        Me.Tables.Add(Me.tableSFRDTradicaoDocumental)
        Me.tableTrusteeUser = New TrusteeUserDataTable
        Me.Tables.Add(Me.tableTrusteeUser)
        Me.tableUserGroups = New UserGroupsDataTable
        Me.Tables.Add(Me.tableUserGroups)
        Me.tableSFRDMaterialDeSuporte = New SFRDMaterialDeSuporteDataTable
        Me.Tables.Add(Me.tableSFRDMaterialDeSuporte)
        Me.tableProductFunction = New ProductFunctionDataTable
        Me.Tables.Add(Me.tableProductFunction)
        Me.tableSFRDOrdenacao = New SFRDOrdenacaoDataTable
        Me.Tables.Add(Me.tableSFRDOrdenacao)
        Me.tableTipoFunction = New TipoFunctionDataTable
        Me.Tables.Add(Me.tableTipoFunction)
        Me.tableControloAutDataDeDescricao = New ControloAutDataDeDescricaoDataTable
        Me.Tables.Add(Me.tableControloAutDataDeDescricao)
        Me.tableSFRDEstadoDeConservacao = New SFRDEstadoDeConservacaoDataTable
        Me.Tables.Add(Me.tableSFRDEstadoDeConservacao)
        Me.tableRelacaoTipoNivelRelacionado = New RelacaoTipoNivelRelacionadoDataTable
        Me.Tables.Add(Me.tableRelacaoTipoNivelRelacionado)
        Me.tableSFRDFormaSuporteAcond = New SFRDFormaSuporteAcondDataTable
        Me.Tables.Add(Me.tableSFRDFormaSuporteAcond)
        Me.tableTipoPertinencia = New TipoPertinenciaDataTable
        Me.Tables.Add(Me.tableTipoPertinencia)
        Me.tableSFRDTecnicasDeRegisto = New SFRDTecnicasDeRegistoDataTable
        Me.Tables.Add(Me.tableSFRDTecnicasDeRegisto)
        Me.tableSFRDUFAutoEliminacao = New SFRDUFAutoEliminacaoDataTable
        Me.Tables.Add(Me.tableSFRDUFAutoEliminacao)
        Me.tableSFRDImagem = New SFRDImagemDataTable
        Me.Tables.Add(Me.tableSFRDImagem)
        Me.tableControloAutDatasExistencia = New ControloAutDatasExistenciaDataTable
        Me.Tables.Add(Me.tableControloAutDatasExistencia)
        Me.tableFRDBaseDataDeDescricao = New FRDBaseDataDeDescricaoDataTable
        Me.Tables.Add(Me.tableFRDBaseDataDeDescricao)
        Me.tableSFRDDatasProducao = New SFRDDatasProducaoDataTable
        Me.Tables.Add(Me.tableSFRDDatasProducao)
        Me.tableRelacaoHierarquica = New RelacaoHierarquicaDataTable
        Me.Tables.Add(Me.tableRelacaoHierarquica)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("ControloAutControloAutRel", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutRel.IDControloAutColumn})
        Me.tableControloAutRel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ControloAutControloAutRelAlias", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutRel.IDControloAutAliasColumn})
        Me.tableControloAutRel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoControloAutRelControloAutRel", New DataColumn() {Me.tableTipoControloAutRel.IDColumn}, New DataColumn() {Me.tableControloAutRel.IDTipoRelColumn})
        Me.tableControloAutRel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoClientClientLicense", New DataColumn() {Me.tableTipoClient.IDColumn}, New DataColumn() {Me.tableClientLicense.IDTipoClientColumn})
        Me.tableClientLicense.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseIndexFRDCA", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableIndexFRDCA.IDFRDBaseColumn})
        Me.tableIndexFRDCA.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ControloAutIndexFRDCA", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableIndexFRDCA.IDControloAutColumn})
        Me.tableIndexFRDCA.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Iso639ControloAut", New DataColumn() {Me.tableIso639.IDColumn}, New DataColumn() {Me.tableControloAut.IDIso639p2Column})
        Me.tableControloAut.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Iso15924ControloAut", New DataColumn() {Me.tableIso15924.IDColumn}, New DataColumn() {Me.tableControloAut.IDIso15924Column})
        Me.tableControloAut.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNoticiaAutControloAut", New DataColumn() {Me.tableTipoNoticiaAut.IDColumn}, New DataColumn() {Me.tableControloAut.IDTipoNoticiaAutColumn})
        Me.tableControloAut.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNoticiaAutTipoNoticiaATipoControloAForma", New DataColumn() {Me.tableTipoNoticiaAut.IDColumn}, New DataColumn() {Me.tableTipoNoticiaATipoControloAForma.IDTipoNoticiaAutColumn})
        Me.tableTipoNoticiaATipoControloAForma.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoControloAutFormaTipoNoticiaATipoControloAForma", New DataColumn() {Me.tableTipoControloAutForma.IDColumn}, New DataColumn() {Me.tableTipoNoticiaATipoControloAForma.IDTipoControloAutFormaColumn})
        Me.tableTipoNoticiaATipoControloAForma.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelNivelDesignado", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableNivelDesignado.IDColumn})
        Me.tableNivelDesignado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelFRDBase", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableFRDBase.IDNivelColumn})
        Me.tableFRDBase.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoFRDBaseFRDBase", New DataColumn() {Me.tableTipoFRDBase.IDColumn}, New DataColumn() {Me.tableFRDBase.IDTipoFRDBaseColumn})
        Me.tableFRDBase.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelNivelUnidadeFisicaCodigo", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableNivelUnidadeFisicaCodigo.IDColumn})
        Me.tableNivelUnidadeFisicaCodigo.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ClientLicenseClientActivity", New DataColumn() {Me.tableClientLicense.SequenceNumberColumn, Me.tableClientLicense.GrantDateColumn}, New DataColumn() {Me.tableClientActivity.SequenceNumberColumn, Me.tableClientActivity.GrantDateColumn})
        Me.tableClientActivity.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoFunctionFunctionOperation", New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn, Me.tableTipoFunction.idxColumn}, New DataColumn() {Me.tableFunctionOperation.IDTipoFunctionGroupColumn, Me.tableFunctionOperation.IdxTipoFunctionColumn})
        Me.tableFunctionOperation.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoOperationFunctionOperation", New DataColumn() {Me.tableTipoOperation.IDColumn}, New DataColumn() {Me.tableFunctionOperation.IDTipoOperationColumn})
        Me.tableFunctionOperation.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNivelRelacionadoTipoNivelRelacionadoCodigo", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableTipoNivelRelacionadoCodigo.IDTipoNivelRelacionadoColumn})
        Me.tableTipoNivelRelacionadoCodigo.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelDesignadoNivelUnidadeFisica", New DataColumn() {Me.tableNivelDesignado.IDColumn}, New DataColumn() {Me.tableNivelUnidadeFisica.IDColumn})
        Me.tableNivelUnidadeFisica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AutoEliminacaoSFRDAvaliacao", New DataColumn() {Me.tableAutoEliminacao.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDAutoEliminacaoColumn})
        Me.tableSFRDAvaliacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDAvaliacao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDFRDBaseColumn})
        Me.tableSFRDAvaliacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoPertinenciaSFRDAvaliacao", New DataColumn() {Me.tableTipoPertinencia.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDPertinenciaColumn})
        Me.tableSFRDAvaliacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoSubDensidadeSFRDAvaliacao", New DataColumn() {Me.tableTipoSubDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDSubdensidadeColumn})
        Me.tableSFRDAvaliacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoDensidadeSFRDAvaliacao", New DataColumn() {Me.tableTipoDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDDensidadeColumn})
        Me.tableSFRDAvaliacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoMaterialSFRDUFMateriaisComponente", New DataColumn() {Me.tableTipoMaterial.IDColumn}, New DataColumn() {Me.tableSFRDUFMateriaisComponente.IDMaterialColumn})
        Me.tableSFRDUFMateriaisComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDUFComponenteSFRDUFMateriaisComponente", New DataColumn() {Me.tableSFRDUFComponente.IDColumn}, New DataColumn() {Me.tableSFRDUFMateriaisComponente.IDComponenteColumn})
        Me.tableSFRDUFMateriaisComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoControloAutFormaControloAutDicionario", New DataColumn() {Me.tableTipoControloAutForma.IDColumn}, New DataColumn() {Me.tableControloAutDicionario.IDTipoControloAutFormaColumn})
        Me.tableControloAutDicionario.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("DicionarioControloAutDicionario", New DataColumn() {Me.tableDicionario.IDColumn}, New DataColumn() {Me.tableControloAutDicionario.IDDicionarioColumn})
        Me.tableControloAutDicionario.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ControloAutControloAutDicionario", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutDicionario.IDControloAutColumn})
        Me.tableControloAutDicionario.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelNivelControloAut", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableNivelControloAut.IDColumn})
        Me.tableNivelControloAut.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ControloAutNivelControloAut", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableNivelControloAut.IDControloAutColumn})
        Me.tableNivelControloAut.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoEntidadeProdutoraControloAutEntidadeProdutora", New DataColumn() {Me.tableTipoEntidadeProdutora.IDColumn}, New DataColumn() {Me.tableControloAutEntidadeProdutora.IDTipoEntidadeProdutoraColumn})
        Me.tableControloAutEntidadeProdutora.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ControloAutControloAutEntidadeProdutora", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutEntidadeProdutora.IDControloAutColumn})
        Me.tableControloAutEntidadeProdutora.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDCondicaoDeAcesso", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn})
        Me.tableSFRDCondicaoDeAcesso.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoAcondicionamentoSFRDUFDescricaoFisica", New DataColumn() {Me.tableTipoAcondicionamento.IDColumn}, New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDTipoAcondicionamentoColumn})
        Me.tableSFRDUFDescricaoFisica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoMedidaSFRDUFDescricaoFisica", New DataColumn() {Me.tableTipoMedida.IDColumn}, New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDTipoMedidaColumn})
        Me.tableSFRDUFDescricaoFisica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDUFDescricaoFisica", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDFRDBaseColumn})
        Me.tableSFRDUFDescricaoFisica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelSFRDUnidadeFisica", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableSFRDUnidadeFisica.IDNivelColumn})
        Me.tableSFRDUnidadeFisica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDUnidadeFisica", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUnidadeFisica.IDFRDBaseColumn})
        Me.tableSFRDUnidadeFisica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoSuporteSFRDUFComponente", New DataColumn() {Me.tableTipoSuporte.IDColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDTipoSuporteColumn})
        Me.tableSFRDUFComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoEstadoConservacaoSFRDUFComponente", New DataColumn() {Me.tableTipoEstadoConservacao.IDColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDTipoEstadoConservacaoColumn})
        Me.tableSFRDUFComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDUFDescricaoFisicaSFRDUFComponente", New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDFRDBaseColumn})
        Me.tableSFRDUFComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoMedidaSFRDUFComponente", New DataColumn() {Me.tableTipoMedida.IDColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDTipoMedidaColumn})
        Me.tableSFRDUFComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDUnidadeFisicaSFRDUFComponente", New DataColumn() {Me.tableSFRDUnidadeFisica.IDFRDBaseColumn, Me.tableSFRDUnidadeFisica.IDNivelColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDFRDBaseColumn, Me.tableSFRDUFComponente.IDNivelUAColumn})
        Me.tableSFRDUFComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDConteudoEEstrutura", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDConteudoEEstrutura.IDFRDBaseColumn})
        Me.tableSFRDConteudoEEstrutura.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoDensidadeTipoSubDensidade", New DataColumn() {Me.tableTipoDensidade.IDColumn}, New DataColumn() {Me.tableTipoSubDensidade.IDTipoDensidadeColumn})
        Me.tableTipoSubDensidade.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDContexto", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDContexto.IDFRDBaseColumn})
        Me.tableSFRDContexto.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoTecnicaRegistoSFRDUFTecnicasRegComponente", New DataColumn() {Me.tableTipoTecnicaRegisto.IDColumn}, New DataColumn() {Me.tableSFRDUFTecnicasRegComponente.IDTecnicaRegistoColumn})
        Me.tableSFRDUFTecnicasRegComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDUFComponenteSFRDUFTecnicasRegComponente", New DataColumn() {Me.tableSFRDUFComponente.IDColumn}, New DataColumn() {Me.tableSFRDUFTecnicasRegComponente.IDComponenteColumn})
        Me.tableSFRDUFTecnicasRegComponente.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNivelNivel", New DataColumn() {Me.tableTipoNivel.IDColumn}, New DataColumn() {Me.tableNivel.IDTipoNivelColumn})
        Me.tableNivel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDDocumentacaoAssociada", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDDocumentacaoAssociada.IDFRDBaseColumn})
        Me.tableSFRDDocumentacaoAssociada.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoSubDensidadeSFRDAvaliacaoRel", New DataColumn() {Me.tableTipoSubDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.SubDensidadeColumn})
        Me.tableSFRDAvaliacaoRel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelSFRDAvaliacaoRel", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.IDNivelColumn})
        Me.tableSFRDAvaliacaoRel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoDensidadeSFRDAvaliacaoRel", New DataColumn() {Me.tableTipoDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.DensidadeColumn})
        Me.tableSFRDAvaliacaoRel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDAvaliacaoSFRDAvaliacaoRel", New DataColumn() {Me.tableSFRDAvaliacao.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.IDFRDBaseColumn})
        Me.tableSFRDAvaliacaoRel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoServerServerLicense", New DataColumn() {Me.tableTipoServer.IDColumn}, New DataColumn() {Me.tableServerLicense.IDTipoServerColumn})
        Me.tableServerLicense.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SecurableObjectAccessControlElement", New DataColumn() {Me.tableSecurableObject.IDColumn}, New DataColumn() {Me.tableAccessControlElement.IDSecurableObjectColumn})
        Me.tableAccessControlElement.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeAccessControlElement", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableAccessControlElement.IDTrusteeColumn})
        Me.tableAccessControlElement.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDNotaGeral", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDNotaGeral.IDFRDBaseColumn})
        Me.tableSFRDNotaGeral.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelSecurableObjectNivel", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableSecurableObjectNivel.IDNivelColumn})
        Me.tableSecurableObjectNivel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SecurableObjectSecurableObjectNivel", New DataColumn() {Me.tableSecurableObject.IDColumn}, New DataColumn() {Me.tableSecurableObjectNivel.IDSecurableObjectColumn})
        Me.tableSecurableObjectNivel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNivelTipoNivelRelacionado", New DataColumn() {Me.tableTipoNivel.IDColumn}, New DataColumn() {Me.tableTipoNivelRelacionado.IDTipoNivelColumn})
        Me.tableTipoNivelRelacionado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDUFCota", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUFCota.IDFRDBaseColumn})
        Me.tableSFRDUFCota.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeTrusteeGroup", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableTrusteeGroup.IDColumn})
        Me.tableTrusteeGroup.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeTrusteePrivilege", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableTrusteePrivilege.IDTrusteeColumn})
        Me.tableTrusteePrivilege.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FunctionOperationTrusteePrivilege", New DataColumn() {Me.tableFunctionOperation.IDTipoFunctionGroupColumn, Me.tableFunctionOperation.IdxTipoFunctionColumn, Me.tableFunctionOperation.IDTipoOperationColumn}, New DataColumn() {Me.tableTrusteePrivilege.IDTipoFunctionGroupColumn, Me.tableTrusteePrivilege.IdxTipoFunctionColumn, Me.tableTrusteePrivilege.IDTipoOperationColumn})
        Me.tableTrusteePrivilege.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoTradicaoDocumentalSFRDTradicaoDocumental", New DataColumn() {Me.tableTipoTradicaoDocumental.IDColumn}, New DataColumn() {Me.tableSFRDTradicaoDocumental.IDTipoTradicaoDocumentalColumn})
        Me.tableSFRDTradicaoDocumental.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDTradicaoDocumental", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDTradicaoDocumental.IDFRDBaseColumn})
        Me.tableSFRDTradicaoDocumental.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeTrusteeUser", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableTrusteeUser.IDColumn})
        Me.tableTrusteeUser.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeUserTrusteeUserAuthority", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableTrusteeUser.IDTrusteeUserDefaultAuthorityColumn})
        Me.tableTrusteeUser.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeUserUserGroups", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableUserGroups.IDUserColumn})
        Me.tableUserGroups.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeGroupUserGroups", New DataColumn() {Me.tableTrusteeGroup.IDColumn}, New DataColumn() {Me.tableUserGroups.IDGroupColumn})
        Me.tableUserGroups.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoMaterialDeSuporteSFRDMaterialDeSuporte", New DataColumn() {Me.tableTipoMaterialDeSuporte.IDColumn}, New DataColumn() {Me.tableSFRDMaterialDeSuporte.IDTipoMaterialDeSuporteColumn})
        Me.tableSFRDMaterialDeSuporte.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDCondicaoDeAcessoSFRDMaterialDeSuporte", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDMaterialDeSuporte.IDFRDBaseColumn})
        Me.tableSFRDMaterialDeSuporte.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoServerProductFunction", New DataColumn() {Me.tableTipoServer.IDColumn}, New DataColumn() {Me.tableProductFunction.IDTipoServerColumn})
        Me.tableProductFunction.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoClientProductFunction", New DataColumn() {Me.tableTipoClient.IDColumn}, New DataColumn() {Me.tableProductFunction.IDTipoClientColumn})
        Me.tableProductFunction.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoFunctionProductFunction", New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn, Me.tableTipoFunction.idxColumn}, New DataColumn() {Me.tableProductFunction.IDTipoFunctionGroupColumn, Me.tableProductFunction.IdxTipoFunctionColumn})
        Me.tableProductFunction.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoOrdenacaoSFRDOrdenacao", New DataColumn() {Me.tableTipoOrdenacao.IDColumn}, New DataColumn() {Me.tableSFRDOrdenacao.IDTipoOrdenacaoColumn})
        Me.tableSFRDOrdenacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDOrdenacao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDOrdenacao.IDFRDBaseColumn})
        Me.tableSFRDOrdenacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoFunctionTipoFunction", New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn, Me.tableTipoFunction.idxColumn}, New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupContextColumn, Me.tableTipoFunction.IdxTipoFunctionGroupContextColumn})
        Me.tableTipoFunction.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoFunctionGroupTipoFunction", New DataColumn() {Me.tableTipoFunctionGroup.IDColumn}, New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn})
        Me.tableTipoFunction.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeUserControloAutDataDeDescricaoAuthority", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableControloAutDataDeDescricao.IDTrusteeAuthorityColumn})
        Me.tableControloAutDataDeDescricao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeUserControloAutDataDeDescricao", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableControloAutDataDeDescricao.IDTrusteeOperatorColumn})
        Me.tableControloAutDataDeDescricao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ControloAutControloAutDataDeDescricao", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutDataDeDescricao.IDControloAutColumn})
        Me.tableControloAutDataDeDescricao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoEstadoDeConservacaoSFRDEstadoDeConservacao", New DataColumn() {Me.tableTipoEstadoDeConservacao.IDColumn}, New DataColumn() {Me.tableSFRDEstadoDeConservacao.IDTipoEstadoDeConservacaoColumn})
        Me.tableSFRDEstadoDeConservacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDCondicaoDeAcessoSFRDEstadoDeConservacao", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDEstadoDeConservacao.IDFRDBaseColumn})
        Me.tableSFRDEstadoDeConservacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableRelacaoTipoNivelRelacionado.IDUpperColumn})
        Me.tableRelacaoTipoNivelRelacionado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNivelRelacionadoRelacaoTipoNivelRelacionado", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableRelacaoTipoNivelRelacionado.IDColumn})
        Me.tableRelacaoTipoNivelRelacionado.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDCondicaoDeAcessoSFRDFormaSuporteAcond", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDFormaSuporteAcond.IDFRDBaseColumn})
        Me.tableSFRDFormaSuporteAcond.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoFormaSuporteAcondSFRDFormaSuporteAcond", New DataColumn() {Me.tableTipoFormaSuporteAcond.IDColumn}, New DataColumn() {Me.tableSFRDFormaSuporteAcond.IDTipoFormaSuporteAcondColumn})
        Me.tableSFRDFormaSuporteAcond.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoTecnicasDeRegistoSFRDTecnicasDeRegisto", New DataColumn() {Me.tableTipoTecnicasDeRegisto.IDColumn}, New DataColumn() {Me.tableSFRDTecnicasDeRegisto.IDTipoTecnicasDeRegistoColumn})
        Me.tableSFRDTecnicasDeRegisto.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDCondicaoDeAcessoSFRDTecnicasDeRegisto", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDTecnicasDeRegisto.IDFRDBaseColumn})
        Me.tableSFRDTecnicasDeRegisto.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AutoEliminacaoSFRDUFAutoEliminacao", New DataColumn() {Me.tableAutoEliminacao.IDColumn}, New DataColumn() {Me.tableSFRDUFAutoEliminacao.IDAutoEliminacaoColumn})
        Me.tableSFRDUFAutoEliminacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDUFAutoEliminacao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUFAutoEliminacao.IDFRDBaseColumn})
        Me.tableSFRDUFAutoEliminacao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDImagem", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDImagem.IDFRDBaseColumn})
        Me.tableSFRDImagem.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SFRDImagemVolumeSFRDImagem", New DataColumn() {Me.tableSFRDImagemVolume.IDColumn}, New DataColumn() {Me.tableSFRDImagem.IDSFDImagemVolumeColumn})
        Me.tableSFRDImagem.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ControloAutControloAutDatasExistencia", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutDatasExistencia.IDControloAutColumn})
        Me.tableControloAutDatasExistencia.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeUserFRDBaseDataDeDescricaoAuthority", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableFRDBaseDataDeDescricao.IDTrusteeAuthorityColumn})
        Me.tableFRDBaseDataDeDescricao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TrusteeUserFRDBaseDataDeDescricao", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableFRDBaseDataDeDescricao.IDTrusteeOperatorColumn})
        Me.tableFRDBaseDataDeDescricao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseFRDBaseDataDeDescricao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableFRDBaseDataDeDescricao.IDFRDBaseColumn})
        Me.tableFRDBaseDataDeDescricao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FRDBaseSFRDDatasProducao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDDatasProducao.IDFRDBaseColumn})
        Me.tableSFRDDatasProducao.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("TipoNivelRelacionadoRelacaoHierarquica", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableRelacaoHierarquica.IDTipoNivelRelacionadoColumn})
        Me.tableRelacaoHierarquica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelRelacaoHierarquicaUpper", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableRelacaoHierarquica.IDUpperColumn})
        Me.tableRelacaoHierarquica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NivelRelacaoHierarquica", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableRelacaoHierarquica.IDColumn})
        Me.tableRelacaoHierarquica.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationTipoNivelRelacionadoRelacaoHierarquica = New DataRelation("TipoNivelRelacionadoRelacaoHierarquica", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableRelacaoHierarquica.IDTipoNivelRelacionadoColumn}, false)
        Me.Relations.Add(Me.relationTipoNivelRelacionadoRelacaoHierarquica)
        Me.relationNivelRelacaoHierarquicaUpper = New DataRelation("NivelRelacaoHierarquicaUpper", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableRelacaoHierarquica.IDUpperColumn}, false)
        Me.Relations.Add(Me.relationNivelRelacaoHierarquicaUpper)
        Me.relationNivelRelacaoHierarquica = New DataRelation("NivelRelacaoHierarquica", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableRelacaoHierarquica.IDColumn}, false)
        Me.Relations.Add(Me.relationNivelRelacaoHierarquica)
        Me.relationFRDBaseSFRDDatasProducao = New DataRelation("FRDBaseSFRDDatasProducao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDDatasProducao.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDDatasProducao)
        Me.relationTrusteeUserFRDBaseDataDeDescricaoAuthority = New DataRelation("TrusteeUserFRDBaseDataDeDescricaoAuthority", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableFRDBaseDataDeDescricao.IDTrusteeAuthorityColumn}, false)
        Me.Relations.Add(Me.relationTrusteeUserFRDBaseDataDeDescricaoAuthority)
        Me.relationTrusteeUserFRDBaseDataDeDescricao = New DataRelation("TrusteeUserFRDBaseDataDeDescricao", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableFRDBaseDataDeDescricao.IDTrusteeOperatorColumn}, false)
        Me.Relations.Add(Me.relationTrusteeUserFRDBaseDataDeDescricao)
        Me.relationFRDBaseFRDBaseDataDeDescricao = New DataRelation("FRDBaseFRDBaseDataDeDescricao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableFRDBaseDataDeDescricao.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseFRDBaseDataDeDescricao)
        Me.relationControloAutControloAutDatasExistencia = New DataRelation("ControloAutControloAutDatasExistencia", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutDatasExistencia.IDControloAutColumn}, false)
        Me.Relations.Add(Me.relationControloAutControloAutDatasExistencia)
        Me.relationFRDBaseSFRDImagem = New DataRelation("FRDBaseSFRDImagem", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDImagem.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDImagem)
        Me.relationSFRDImagemVolumeSFRDImagem = New DataRelation("SFRDImagemVolumeSFRDImagem", New DataColumn() {Me.tableSFRDImagemVolume.IDColumn}, New DataColumn() {Me.tableSFRDImagem.IDSFDImagemVolumeColumn}, false)
        Me.Relations.Add(Me.relationSFRDImagemVolumeSFRDImagem)
        Me.relationAutoEliminacaoSFRDUFAutoEliminacao = New DataRelation("AutoEliminacaoSFRDUFAutoEliminacao", New DataColumn() {Me.tableAutoEliminacao.IDColumn}, New DataColumn() {Me.tableSFRDUFAutoEliminacao.IDAutoEliminacaoColumn}, false)
        Me.Relations.Add(Me.relationAutoEliminacaoSFRDUFAutoEliminacao)
        Me.relationFRDBaseSFRDUFAutoEliminacao = New DataRelation("FRDBaseSFRDUFAutoEliminacao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUFAutoEliminacao.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDUFAutoEliminacao)
        Me.relationTipoTecnicasDeRegistoSFRDTecnicasDeRegisto = New DataRelation("TipoTecnicasDeRegistoSFRDTecnicasDeRegisto", New DataColumn() {Me.tableTipoTecnicasDeRegisto.IDColumn}, New DataColumn() {Me.tableSFRDTecnicasDeRegisto.IDTipoTecnicasDeRegistoColumn}, false)
        Me.Relations.Add(Me.relationTipoTecnicasDeRegistoSFRDTecnicasDeRegisto)
        Me.relationSFRDCondicaoDeAcessoSFRDTecnicasDeRegisto = New DataRelation("SFRDCondicaoDeAcessoSFRDTecnicasDeRegisto", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDTecnicasDeRegisto.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationSFRDCondicaoDeAcessoSFRDTecnicasDeRegisto)
        Me.relationSFRDCondicaoDeAcessoSFRDFormaSuporteAcond = New DataRelation("SFRDCondicaoDeAcessoSFRDFormaSuporteAcond", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDFormaSuporteAcond.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationSFRDCondicaoDeAcessoSFRDFormaSuporteAcond)
        Me.relationTipoFormaSuporteAcondSFRDFormaSuporteAcond = New DataRelation("TipoFormaSuporteAcondSFRDFormaSuporteAcond", New DataColumn() {Me.tableTipoFormaSuporteAcond.IDColumn}, New DataColumn() {Me.tableSFRDFormaSuporteAcond.IDTipoFormaSuporteAcondColumn}, false)
        Me.Relations.Add(Me.relationTipoFormaSuporteAcondSFRDFormaSuporteAcond)
        Me.relationTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper = New DataRelation("TipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableRelacaoTipoNivelRelacionado.IDUpperColumn}, false)
        Me.Relations.Add(Me.relationTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper)
        Me.relationTipoNivelRelacionadoRelacaoTipoNivelRelacionado = New DataRelation("TipoNivelRelacionadoRelacaoTipoNivelRelacionado", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableRelacaoTipoNivelRelacionado.IDColumn}, false)
        Me.Relations.Add(Me.relationTipoNivelRelacionadoRelacaoTipoNivelRelacionado)
        Me.relationTipoEstadoDeConservacaoSFRDEstadoDeConservacao = New DataRelation("TipoEstadoDeConservacaoSFRDEstadoDeConservacao", New DataColumn() {Me.tableTipoEstadoDeConservacao.IDColumn}, New DataColumn() {Me.tableSFRDEstadoDeConservacao.IDTipoEstadoDeConservacaoColumn}, false)
        Me.Relations.Add(Me.relationTipoEstadoDeConservacaoSFRDEstadoDeConservacao)
        Me.relationSFRDCondicaoDeAcessoSFRDEstadoDeConservacao = New DataRelation("SFRDCondicaoDeAcessoSFRDEstadoDeConservacao", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDEstadoDeConservacao.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationSFRDCondicaoDeAcessoSFRDEstadoDeConservacao)
        Me.relationTrusteeUserControloAutDataDeDescricaoAuthority = New DataRelation("TrusteeUserControloAutDataDeDescricaoAuthority", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableControloAutDataDeDescricao.IDTrusteeAuthorityColumn}, false)
        Me.Relations.Add(Me.relationTrusteeUserControloAutDataDeDescricaoAuthority)
        Me.relationTrusteeUserControloAutDataDeDescricao = New DataRelation("TrusteeUserControloAutDataDeDescricao", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableControloAutDataDeDescricao.IDTrusteeOperatorColumn}, false)
        Me.Relations.Add(Me.relationTrusteeUserControloAutDataDeDescricao)
        Me.relationControloAutControloAutDataDeDescricao = New DataRelation("ControloAutControloAutDataDeDescricao", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutDataDeDescricao.IDControloAutColumn}, false)
        Me.Relations.Add(Me.relationControloAutControloAutDataDeDescricao)
        Me.relationTipoFunctionTipoFunction = New DataRelation("TipoFunctionTipoFunction", New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn, Me.tableTipoFunction.idxColumn}, New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupContextColumn, Me.tableTipoFunction.IdxTipoFunctionGroupContextColumn}, false)
        Me.Relations.Add(Me.relationTipoFunctionTipoFunction)
        Me.relationTipoFunctionGroupTipoFunction = New DataRelation("TipoFunctionGroupTipoFunction", New DataColumn() {Me.tableTipoFunctionGroup.IDColumn}, New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn}, false)
        Me.Relations.Add(Me.relationTipoFunctionGroupTipoFunction)
        Me.relationTipoOrdenacaoSFRDOrdenacao = New DataRelation("TipoOrdenacaoSFRDOrdenacao", New DataColumn() {Me.tableTipoOrdenacao.IDColumn}, New DataColumn() {Me.tableSFRDOrdenacao.IDTipoOrdenacaoColumn}, false)
        Me.Relations.Add(Me.relationTipoOrdenacaoSFRDOrdenacao)
        Me.relationFRDBaseSFRDOrdenacao = New DataRelation("FRDBaseSFRDOrdenacao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDOrdenacao.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDOrdenacao)
        Me.relationTipoServerProductFunction = New DataRelation("TipoServerProductFunction", New DataColumn() {Me.tableTipoServer.IDColumn}, New DataColumn() {Me.tableProductFunction.IDTipoServerColumn}, false)
        Me.Relations.Add(Me.relationTipoServerProductFunction)
        Me.relationTipoClientProductFunction = New DataRelation("TipoClientProductFunction", New DataColumn() {Me.tableTipoClient.IDColumn}, New DataColumn() {Me.tableProductFunction.IDTipoClientColumn}, false)
        Me.Relations.Add(Me.relationTipoClientProductFunction)
        Me.relationTipoFunctionProductFunction = New DataRelation("TipoFunctionProductFunction", New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn, Me.tableTipoFunction.idxColumn}, New DataColumn() {Me.tableProductFunction.IDTipoFunctionGroupColumn, Me.tableProductFunction.IdxTipoFunctionColumn}, false)
        Me.Relations.Add(Me.relationTipoFunctionProductFunction)
        Me.relationTipoMaterialDeSuporteSFRDMaterialDeSuporte = New DataRelation("TipoMaterialDeSuporteSFRDMaterialDeSuporte", New DataColumn() {Me.tableTipoMaterialDeSuporte.IDColumn}, New DataColumn() {Me.tableSFRDMaterialDeSuporte.IDTipoMaterialDeSuporteColumn}, false)
        Me.Relations.Add(Me.relationTipoMaterialDeSuporteSFRDMaterialDeSuporte)
        Me.relationSFRDCondicaoDeAcessoSFRDMaterialDeSuporte = New DataRelation("SFRDCondicaoDeAcessoSFRDMaterialDeSuporte", New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDMaterialDeSuporte.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationSFRDCondicaoDeAcessoSFRDMaterialDeSuporte)
        Me.relationTrusteeUserUserGroups = New DataRelation("TrusteeUserUserGroups", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableUserGroups.IDUserColumn}, false)
        Me.Relations.Add(Me.relationTrusteeUserUserGroups)
        Me.relationTrusteeGroupUserGroups = New DataRelation("TrusteeGroupUserGroups", New DataColumn() {Me.tableTrusteeGroup.IDColumn}, New DataColumn() {Me.tableUserGroups.IDGroupColumn}, false)
        Me.Relations.Add(Me.relationTrusteeGroupUserGroups)
        Me.relationTrusteeTrusteeUser = New DataRelation("TrusteeTrusteeUser", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableTrusteeUser.IDColumn}, false)
        Me.Relations.Add(Me.relationTrusteeTrusteeUser)
        Me.relationTrusteeUserTrusteeUserAuthority = New DataRelation("TrusteeUserTrusteeUserAuthority", New DataColumn() {Me.tableTrusteeUser.IDColumn}, New DataColumn() {Me.tableTrusteeUser.IDTrusteeUserDefaultAuthorityColumn}, false)
        Me.Relations.Add(Me.relationTrusteeUserTrusteeUserAuthority)
        Me.relationTipoTradicaoDocumentalSFRDTradicaoDocumental = New DataRelation("TipoTradicaoDocumentalSFRDTradicaoDocumental", New DataColumn() {Me.tableTipoTradicaoDocumental.IDColumn}, New DataColumn() {Me.tableSFRDTradicaoDocumental.IDTipoTradicaoDocumentalColumn}, false)
        Me.Relations.Add(Me.relationTipoTradicaoDocumentalSFRDTradicaoDocumental)
        Me.relationFRDBaseSFRDTradicaoDocumental = New DataRelation("FRDBaseSFRDTradicaoDocumental", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDTradicaoDocumental.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDTradicaoDocumental)
        Me.relationTrusteeTrusteePrivilege = New DataRelation("TrusteeTrusteePrivilege", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableTrusteePrivilege.IDTrusteeColumn}, false)
        Me.Relations.Add(Me.relationTrusteeTrusteePrivilege)
        Me.relationFunctionOperationTrusteePrivilege = New DataRelation("FunctionOperationTrusteePrivilege", New DataColumn() {Me.tableFunctionOperation.IDTipoFunctionGroupColumn, Me.tableFunctionOperation.IdxTipoFunctionColumn, Me.tableFunctionOperation.IDTipoOperationColumn}, New DataColumn() {Me.tableTrusteePrivilege.IDTipoFunctionGroupColumn, Me.tableTrusteePrivilege.IdxTipoFunctionColumn, Me.tableTrusteePrivilege.IDTipoOperationColumn}, false)
        Me.Relations.Add(Me.relationFunctionOperationTrusteePrivilege)
        Me.relationTrusteeTrusteeGroup = New DataRelation("TrusteeTrusteeGroup", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableTrusteeGroup.IDColumn}, false)
        Me.Relations.Add(Me.relationTrusteeTrusteeGroup)
        Me.relationFRDBaseSFRDUFCota = New DataRelation("FRDBaseSFRDUFCota", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUFCota.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDUFCota)
        Me.relationTipoNivelTipoNivelRelacionado = New DataRelation("TipoNivelTipoNivelRelacionado", New DataColumn() {Me.tableTipoNivel.IDColumn}, New DataColumn() {Me.tableTipoNivelRelacionado.IDTipoNivelColumn}, false)
        Me.Relations.Add(Me.relationTipoNivelTipoNivelRelacionado)
        Me.relationNivelSecurableObjectNivel = New DataRelation("NivelSecurableObjectNivel", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableSecurableObjectNivel.IDNivelColumn}, false)
        Me.Relations.Add(Me.relationNivelSecurableObjectNivel)
        Me.relationSecurableObjectSecurableObjectNivel = New DataRelation("SecurableObjectSecurableObjectNivel", New DataColumn() {Me.tableSecurableObject.IDColumn}, New DataColumn() {Me.tableSecurableObjectNivel.IDSecurableObjectColumn}, false)
        Me.Relations.Add(Me.relationSecurableObjectSecurableObjectNivel)
        Me.relationFRDBaseSFRDNotaGeral = New DataRelation("FRDBaseSFRDNotaGeral", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDNotaGeral.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDNotaGeral)
        Me.relationSecurableObjectAccessControlElement = New DataRelation("SecurableObjectAccessControlElement", New DataColumn() {Me.tableSecurableObject.IDColumn}, New DataColumn() {Me.tableAccessControlElement.IDSecurableObjectColumn}, false)
        Me.Relations.Add(Me.relationSecurableObjectAccessControlElement)
        Me.relationTrusteeAccessControlElement = New DataRelation("TrusteeAccessControlElement", New DataColumn() {Me.tableTrustee.IDColumn}, New DataColumn() {Me.tableAccessControlElement.IDTrusteeColumn}, false)
        Me.Relations.Add(Me.relationTrusteeAccessControlElement)
        Me.relationTipoServerServerLicense = New DataRelation("TipoServerServerLicense", New DataColumn() {Me.tableTipoServer.IDColumn}, New DataColumn() {Me.tableServerLicense.IDTipoServerColumn}, false)
        Me.Relations.Add(Me.relationTipoServerServerLicense)
        Me.relationTipoSubDensidadeSFRDAvaliacaoRel = New DataRelation("TipoSubDensidadeSFRDAvaliacaoRel", New DataColumn() {Me.tableTipoSubDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.SubDensidadeColumn}, false)
        Me.Relations.Add(Me.relationTipoSubDensidadeSFRDAvaliacaoRel)
        Me.relationNivelSFRDAvaliacaoRel = New DataRelation("NivelSFRDAvaliacaoRel", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.IDNivelColumn}, false)
        Me.Relations.Add(Me.relationNivelSFRDAvaliacaoRel)
        Me.relationTipoDensidadeSFRDAvaliacaoRel = New DataRelation("TipoDensidadeSFRDAvaliacaoRel", New DataColumn() {Me.tableTipoDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.DensidadeColumn}, false)
        Me.Relations.Add(Me.relationTipoDensidadeSFRDAvaliacaoRel)
        Me.relationSFRDAvaliacaoSFRDAvaliacaoRel = New DataRelation("SFRDAvaliacaoSFRDAvaliacaoRel", New DataColumn() {Me.tableSFRDAvaliacao.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDAvaliacaoRel.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationSFRDAvaliacaoSFRDAvaliacaoRel)
        Me.relationFRDBaseSFRDDocumentacaoAssociada = New DataRelation("FRDBaseSFRDDocumentacaoAssociada", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDDocumentacaoAssociada.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDDocumentacaoAssociada)
        Me.relationTipoNivelNivel = New DataRelation("TipoNivelNivel", New DataColumn() {Me.tableTipoNivel.IDColumn}, New DataColumn() {Me.tableNivel.IDTipoNivelColumn}, false)
        Me.Relations.Add(Me.relationTipoNivelNivel)
        Me.relationTipoTecnicaRegistoSFRDUFTecnicasRegComponente = New DataRelation("TipoTecnicaRegistoSFRDUFTecnicasRegComponente", New DataColumn() {Me.tableTipoTecnicaRegisto.IDColumn}, New DataColumn() {Me.tableSFRDUFTecnicasRegComponente.IDTecnicaRegistoColumn}, false)
        Me.Relations.Add(Me.relationTipoTecnicaRegistoSFRDUFTecnicasRegComponente)
        Me.relationSFRDUFComponenteSFRDUFTecnicasRegComponente = New DataRelation("SFRDUFComponenteSFRDUFTecnicasRegComponente", New DataColumn() {Me.tableSFRDUFComponente.IDColumn}, New DataColumn() {Me.tableSFRDUFTecnicasRegComponente.IDComponenteColumn}, false)
        Me.Relations.Add(Me.relationSFRDUFComponenteSFRDUFTecnicasRegComponente)
        Me.relationFRDBaseSFRDContexto = New DataRelation("FRDBaseSFRDContexto", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDContexto.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDContexto)
        Me.relationTipoDensidadeTipoSubDensidade = New DataRelation("TipoDensidadeTipoSubDensidade", New DataColumn() {Me.tableTipoDensidade.IDColumn}, New DataColumn() {Me.tableTipoSubDensidade.IDTipoDensidadeColumn}, false)
        Me.Relations.Add(Me.relationTipoDensidadeTipoSubDensidade)
        Me.relationFRDBaseSFRDConteudoEEstrutura = New DataRelation("FRDBaseSFRDConteudoEEstrutura", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDConteudoEEstrutura.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDConteudoEEstrutura)
        Me.relationTipoSuporteSFRDUFComponente = New DataRelation("TipoSuporteSFRDUFComponente", New DataColumn() {Me.tableTipoSuporte.IDColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDTipoSuporteColumn}, false)
        Me.Relations.Add(Me.relationTipoSuporteSFRDUFComponente)
        Me.relationTipoEstadoConservacaoSFRDUFComponente = New DataRelation("TipoEstadoConservacaoSFRDUFComponente", New DataColumn() {Me.tableTipoEstadoConservacao.IDColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDTipoEstadoConservacaoColumn}, false)
        Me.Relations.Add(Me.relationTipoEstadoConservacaoSFRDUFComponente)
        Me.relationSFRDUFDescricaoFisicaSFRDUFComponente = New DataRelation("SFRDUFDescricaoFisicaSFRDUFComponente", New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDFRDBaseColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationSFRDUFDescricaoFisicaSFRDUFComponente)
        Me.relationTipoMedidaSFRDUFComponente = New DataRelation("TipoMedidaSFRDUFComponente", New DataColumn() {Me.tableTipoMedida.IDColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDTipoMedidaColumn}, false)
        Me.Relations.Add(Me.relationTipoMedidaSFRDUFComponente)
        Me.relationSFRDUnidadeFisicaSFRDUFComponente = New DataRelation("SFRDUnidadeFisicaSFRDUFComponente", New DataColumn() {Me.tableSFRDUnidadeFisica.IDFRDBaseColumn, Me.tableSFRDUnidadeFisica.IDNivelColumn}, New DataColumn() {Me.tableSFRDUFComponente.IDFRDBaseColumn, Me.tableSFRDUFComponente.IDNivelUAColumn}, false)
        Me.Relations.Add(Me.relationSFRDUnidadeFisicaSFRDUFComponente)
        Me.relationNivelSFRDUnidadeFisica = New DataRelation("NivelSFRDUnidadeFisica", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableSFRDUnidadeFisica.IDNivelColumn}, false)
        Me.Relations.Add(Me.relationNivelSFRDUnidadeFisica)
        Me.relationFRDBaseSFRDUnidadeFisica = New DataRelation("FRDBaseSFRDUnidadeFisica", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUnidadeFisica.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDUnidadeFisica)
        Me.relationTipoAcondicionamentoSFRDUFDescricaoFisica = New DataRelation("TipoAcondicionamentoSFRDUFDescricaoFisica", New DataColumn() {Me.tableTipoAcondicionamento.IDColumn}, New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDTipoAcondicionamentoColumn}, false)
        Me.Relations.Add(Me.relationTipoAcondicionamentoSFRDUFDescricaoFisica)
        Me.relationTipoMedidaSFRDUFDescricaoFisica = New DataRelation("TipoMedidaSFRDUFDescricaoFisica", New DataColumn() {Me.tableTipoMedida.IDColumn}, New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDTipoMedidaColumn}, false)
        Me.Relations.Add(Me.relationTipoMedidaSFRDUFDescricaoFisica)
        Me.relationFRDBaseSFRDUFDescricaoFisica = New DataRelation("FRDBaseSFRDUFDescricaoFisica", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDUFDescricaoFisica.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDUFDescricaoFisica)
        Me.relationFRDBaseSFRDCondicaoDeAcesso = New DataRelation("FRDBaseSFRDCondicaoDeAcesso", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDCondicaoDeAcesso)
        Me.relationTipoEntidadeProdutoraControloAutEntidadeProdutora = New DataRelation("TipoEntidadeProdutoraControloAutEntidadeProdutora", New DataColumn() {Me.tableTipoEntidadeProdutora.IDColumn}, New DataColumn() {Me.tableControloAutEntidadeProdutora.IDTipoEntidadeProdutoraColumn}, false)
        Me.Relations.Add(Me.relationTipoEntidadeProdutoraControloAutEntidadeProdutora)
        Me.relationControloAutControloAutEntidadeProdutora = New DataRelation("ControloAutControloAutEntidadeProdutora", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutEntidadeProdutora.IDControloAutColumn}, false)
        Me.Relations.Add(Me.relationControloAutControloAutEntidadeProdutora)
        Me.relationNivelNivelControloAut = New DataRelation("NivelNivelControloAut", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableNivelControloAut.IDColumn}, false)
        Me.Relations.Add(Me.relationNivelNivelControloAut)
        Me.relationControloAutNivelControloAut = New DataRelation("ControloAutNivelControloAut", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableNivelControloAut.IDControloAutColumn}, false)
        Me.Relations.Add(Me.relationControloAutNivelControloAut)
        Me.relationTipoControloAutFormaControloAutDicionario = New DataRelation("TipoControloAutFormaControloAutDicionario", New DataColumn() {Me.tableTipoControloAutForma.IDColumn}, New DataColumn() {Me.tableControloAutDicionario.IDTipoControloAutFormaColumn}, false)
        Me.Relations.Add(Me.relationTipoControloAutFormaControloAutDicionario)
        Me.relationDicionarioControloAutDicionario = New DataRelation("DicionarioControloAutDicionario", New DataColumn() {Me.tableDicionario.IDColumn}, New DataColumn() {Me.tableControloAutDicionario.IDDicionarioColumn}, false)
        Me.Relations.Add(Me.relationDicionarioControloAutDicionario)
        Me.relationControloAutControloAutDicionario = New DataRelation("ControloAutControloAutDicionario", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutDicionario.IDControloAutColumn}, false)
        Me.Relations.Add(Me.relationControloAutControloAutDicionario)
        Me.relationTipoMaterialSFRDUFMateriaisComponente = New DataRelation("TipoMaterialSFRDUFMateriaisComponente", New DataColumn() {Me.tableTipoMaterial.IDColumn}, New DataColumn() {Me.tableSFRDUFMateriaisComponente.IDMaterialColumn}, false)
        Me.Relations.Add(Me.relationTipoMaterialSFRDUFMateriaisComponente)
        Me.relationSFRDUFComponenteSFRDUFMateriaisComponente = New DataRelation("SFRDUFComponenteSFRDUFMateriaisComponente", New DataColumn() {Me.tableSFRDUFComponente.IDColumn}, New DataColumn() {Me.tableSFRDUFMateriaisComponente.IDComponenteColumn}, false)
        Me.Relations.Add(Me.relationSFRDUFComponenteSFRDUFMateriaisComponente)
        Me.relationAutoEliminacaoSFRDAvaliacao = New DataRelation("AutoEliminacaoSFRDAvaliacao", New DataColumn() {Me.tableAutoEliminacao.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDAutoEliminacaoColumn}, false)
        Me.Relations.Add(Me.relationAutoEliminacaoSFRDAvaliacao)
        Me.relationFRDBaseSFRDAvaliacao = New DataRelation("FRDBaseSFRDAvaliacao", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseSFRDAvaliacao)
        Me.relationTipoPertinenciaSFRDAvaliacao = New DataRelation("TipoPertinenciaSFRDAvaliacao", New DataColumn() {Me.tableTipoPertinencia.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDPertinenciaColumn}, false)
        Me.Relations.Add(Me.relationTipoPertinenciaSFRDAvaliacao)
        Me.relationTipoSubDensidadeSFRDAvaliacao = New DataRelation("TipoSubDensidadeSFRDAvaliacao", New DataColumn() {Me.tableTipoSubDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDSubdensidadeColumn}, false)
        Me.Relations.Add(Me.relationTipoSubDensidadeSFRDAvaliacao)
        Me.relationTipoDensidadeSFRDAvaliacao = New DataRelation("TipoDensidadeSFRDAvaliacao", New DataColumn() {Me.tableTipoDensidade.IDColumn}, New DataColumn() {Me.tableSFRDAvaliacao.IDDensidadeColumn}, false)
        Me.Relations.Add(Me.relationTipoDensidadeSFRDAvaliacao)
        Me.relationNivelDesignadoNivelUnidadeFisica = New DataRelation("NivelDesignadoNivelUnidadeFisica", New DataColumn() {Me.tableNivelDesignado.IDColumn}, New DataColumn() {Me.tableNivelUnidadeFisica.IDColumn}, false)
        Me.Relations.Add(Me.relationNivelDesignadoNivelUnidadeFisica)
        Me.relationTipoNivelRelacionadoTipoNivelRelacionadoCodigo = New DataRelation("TipoNivelRelacionadoTipoNivelRelacionadoCodigo", New DataColumn() {Me.tableTipoNivelRelacionado.IDColumn}, New DataColumn() {Me.tableTipoNivelRelacionadoCodigo.IDTipoNivelRelacionadoColumn}, false)
        Me.Relations.Add(Me.relationTipoNivelRelacionadoTipoNivelRelacionadoCodigo)
        Me.relationTipoFunctionFunctionOperation = New DataRelation("TipoFunctionFunctionOperation", New DataColumn() {Me.tableTipoFunction.IDTipoFunctionGroupColumn, Me.tableTipoFunction.idxColumn}, New DataColumn() {Me.tableFunctionOperation.IDTipoFunctionGroupColumn, Me.tableFunctionOperation.IdxTipoFunctionColumn}, false)
        Me.Relations.Add(Me.relationTipoFunctionFunctionOperation)
        Me.relationTipoOperationFunctionOperation = New DataRelation("TipoOperationFunctionOperation", New DataColumn() {Me.tableTipoOperation.IDColumn}, New DataColumn() {Me.tableFunctionOperation.IDTipoOperationColumn}, false)
        Me.Relations.Add(Me.relationTipoOperationFunctionOperation)
        Me.relationClientLicenseClientActivity = New DataRelation("ClientLicenseClientActivity", New DataColumn() {Me.tableClientLicense.SequenceNumberColumn, Me.tableClientLicense.GrantDateColumn}, New DataColumn() {Me.tableClientActivity.SequenceNumberColumn, Me.tableClientActivity.GrantDateColumn}, false)
        Me.Relations.Add(Me.relationClientLicenseClientActivity)
        Me.relationNivelNivelUnidadeFisicaCodigo = New DataRelation("NivelNivelUnidadeFisicaCodigo", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableNivelUnidadeFisicaCodigo.IDColumn}, false)
        Me.Relations.Add(Me.relationNivelNivelUnidadeFisicaCodigo)
        Me.relationNivelFRDBase = New DataRelation("NivelFRDBase", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableFRDBase.IDNivelColumn}, false)
        Me.Relations.Add(Me.relationNivelFRDBase)
        Me.relationTipoFRDBaseFRDBase = New DataRelation("TipoFRDBaseFRDBase", New DataColumn() {Me.tableTipoFRDBase.IDColumn}, New DataColumn() {Me.tableFRDBase.IDTipoFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationTipoFRDBaseFRDBase)
        Me.relationNivelNivelDesignado = New DataRelation("NivelNivelDesignado", New DataColumn() {Me.tableNivel.IDColumn}, New DataColumn() {Me.tableNivelDesignado.IDColumn}, false)
        Me.Relations.Add(Me.relationNivelNivelDesignado)
        Me.relationTipoNoticiaAutTipoNoticiaATipoControloAForma = New DataRelation("TipoNoticiaAutTipoNoticiaATipoControloAForma", New DataColumn() {Me.tableTipoNoticiaAut.IDColumn}, New DataColumn() {Me.tableTipoNoticiaATipoControloAForma.IDTipoNoticiaAutColumn}, false)
        Me.Relations.Add(Me.relationTipoNoticiaAutTipoNoticiaATipoControloAForma)
        Me.relationTipoControloAutFormaTipoNoticiaATipoControloAForma = New DataRelation("TipoControloAutFormaTipoNoticiaATipoControloAForma", New DataColumn() {Me.tableTipoControloAutForma.IDColumn}, New DataColumn() {Me.tableTipoNoticiaATipoControloAForma.IDTipoControloAutFormaColumn}, false)
        Me.Relations.Add(Me.relationTipoControloAutFormaTipoNoticiaATipoControloAForma)
        Me.relationIso639ControloAut = New DataRelation("Iso639ControloAut", New DataColumn() {Me.tableIso639.IDColumn}, New DataColumn() {Me.tableControloAut.IDIso639p2Column}, false)
        Me.Relations.Add(Me.relationIso639ControloAut)
        Me.relationIso15924ControloAut = New DataRelation("Iso15924ControloAut", New DataColumn() {Me.tableIso15924.IDColumn}, New DataColumn() {Me.tableControloAut.IDIso15924Column}, false)
        Me.Relations.Add(Me.relationIso15924ControloAut)
        Me.relationTipoNoticiaAutControloAut = New DataRelation("TipoNoticiaAutControloAut", New DataColumn() {Me.tableTipoNoticiaAut.IDColumn}, New DataColumn() {Me.tableControloAut.IDTipoNoticiaAutColumn}, false)
        Me.Relations.Add(Me.relationTipoNoticiaAutControloAut)
        Me.relationFRDBaseIndexFRDCA = New DataRelation("FRDBaseIndexFRDCA", New DataColumn() {Me.tableFRDBase.IDColumn}, New DataColumn() {Me.tableIndexFRDCA.IDFRDBaseColumn}, false)
        Me.Relations.Add(Me.relationFRDBaseIndexFRDCA)
        Me.relationControloAutIndexFRDCA = New DataRelation("ControloAutIndexFRDCA", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableIndexFRDCA.IDControloAutColumn}, false)
        Me.Relations.Add(Me.relationControloAutIndexFRDCA)
        Me.relationTipoClientClientLicense = New DataRelation("TipoClientClientLicense", New DataColumn() {Me.tableTipoClient.IDColumn}, New DataColumn() {Me.tableClientLicense.IDTipoClientColumn}, false)
        Me.Relations.Add(Me.relationTipoClientClientLicense)
        Me.relationControloAutControloAutRel = New DataRelation("ControloAutControloAutRel", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutRel.IDControloAutColumn}, false)
        Me.Relations.Add(Me.relationControloAutControloAutRel)
        Me.relationControloAutControloAutRelAlias = New DataRelation("ControloAutControloAutRelAlias", New DataColumn() {Me.tableControloAut.IDColumn}, New DataColumn() {Me.tableControloAutRel.IDControloAutAliasColumn}, false)
        Me.Relations.Add(Me.relationControloAutControloAutRelAlias)
        Me.relationTipoControloAutRelControloAutRel = New DataRelation("TipoControloAutRelControloAutRel", New DataColumn() {Me.tableTipoControloAutRel.IDColumn}, New DataColumn() {Me.tableControloAutRel.IDTipoRelColumn}, false)
        Me.Relations.Add(Me.relationTipoControloAutRelControloAutRel)
    End Sub
    
    Private Function ShouldSerializeControloAutRel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClientLicense() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIndexFRDCA() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeControloAut() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoNoticiaATipoControloAForma() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNivelDesignado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoFRDBase() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoOperation() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoFunctionGroup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFRDBase() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDicionario() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNivelUnidadeFisicaCodigo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoEntidadeProdutora() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClientActivity() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGlobalConfig() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFunctionOperation() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoControloAutRel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoNivelRelacionadoCodigo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoControloAutForma() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIso15924() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAutoEliminacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIso639() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoTecnicasDeRegisto() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoNoticiaAut() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoFormaSuporteAcond() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoEstadoDeConservacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoOrdenacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNivelUnidadeFisica() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoTradicaoDocumental() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoMaterialDeSuporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDAvaliacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDUFMateriaisComponente() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeControloAutDicionario() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTrustee() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNivelControloAut() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeControloAutEntidadeProdutora() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDCondicaoDeAcesso() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDUFDescricaoFisica() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecurableObject() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDUnidadeFisica() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeIso3166() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDUFComponente() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoDensidade() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDConteudoEEstrutura() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoSubDensidade() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDContexto() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDUFTecnicasRegComponente() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoMedida() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNivel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDDocumentacaoAssociada() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDAvaliacaoRel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoAcondicionamento() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoEstadoConservacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDImagemVolume() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoTecnicaRegisto() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeServerLicense() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAccessControlElement() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoMaterial() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoNivel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDNotaGeral() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecurableObjectNivel() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoServer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoNivelRelacionado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDUFCota() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoClient() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTrusteeGroup() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTrusteePrivilege() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoSuporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDTradicaoDocumental() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTrusteeUser() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUserGroups() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDMaterialDeSuporte() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProductFunction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDOrdenacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoFunction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeControloAutDataDeDescricao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDEstadoDeConservacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRelacaoTipoNivelRelacionado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDFormaSuporteAcond() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTipoPertinencia() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDTecnicasDeRegisto() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDUFAutoEliminacao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDImagem() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeControloAutDatasExistencia() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFRDBaseDataDeDescricao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSFRDDatasProducao() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRelacaoHierarquica() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ControloAutRelRowChangeEventHandler(ByVal sender As Object, ByVal e As ControloAutRelRowChangeEvent)
    
    Public Delegate Sub ClientLicenseRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientLicenseRowChangeEvent)
    
    Public Delegate Sub IndexFRDCARowChangeEventHandler(ByVal sender As Object, ByVal e As IndexFRDCARowChangeEvent)
    
    Public Delegate Sub ControloAutRowChangeEventHandler(ByVal sender As Object, ByVal e As ControloAutRowChangeEvent)
    
    Public Delegate Sub TipoNoticiaATipoControloAFormaRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoNoticiaATipoControloAFormaRowChangeEvent)
    
    Public Delegate Sub NivelDesignadoRowChangeEventHandler(ByVal sender As Object, ByVal e As NivelDesignadoRowChangeEvent)
    
    Public Delegate Sub TipoFRDBaseRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoFRDBaseRowChangeEvent)
    
    Public Delegate Sub TipoOperationRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoOperationRowChangeEvent)
    
    Public Delegate Sub TipoFunctionGroupRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoFunctionGroupRowChangeEvent)
    
    Public Delegate Sub FRDBaseRowChangeEventHandler(ByVal sender As Object, ByVal e As FRDBaseRowChangeEvent)
    
    Public Delegate Sub DicionarioRowChangeEventHandler(ByVal sender As Object, ByVal e As DicionarioRowChangeEvent)
    
    Public Delegate Sub NivelUnidadeFisicaCodigoRowChangeEventHandler(ByVal sender As Object, ByVal e As NivelUnidadeFisicaCodigoRowChangeEvent)
    
    Public Delegate Sub TipoEntidadeProdutoraRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoEntidadeProdutoraRowChangeEvent)
    
    Public Delegate Sub ClientActivityRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientActivityRowChangeEvent)
    
    Public Delegate Sub GlobalConfigRowChangeEventHandler(ByVal sender As Object, ByVal e As GlobalConfigRowChangeEvent)
    
    Public Delegate Sub FunctionOperationRowChangeEventHandler(ByVal sender As Object, ByVal e As FunctionOperationRowChangeEvent)
    
    Public Delegate Sub TipoControloAutRelRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoControloAutRelRowChangeEvent)
    
    Public Delegate Sub TipoNivelRelacionadoCodigoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoNivelRelacionadoCodigoRowChangeEvent)
    
    Public Delegate Sub TipoControloAutFormaRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoControloAutFormaRowChangeEvent)
    
    Public Delegate Sub Iso15924RowChangeEventHandler(ByVal sender As Object, ByVal e As Iso15924RowChangeEvent)
    
    Public Delegate Sub AutoEliminacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As AutoEliminacaoRowChangeEvent)
    
    Public Delegate Sub Iso639RowChangeEventHandler(ByVal sender As Object, ByVal e As Iso639RowChangeEvent)
    
    Public Delegate Sub TipoTecnicasDeRegistoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoTecnicasDeRegistoRowChangeEvent)
    
    Public Delegate Sub TipoNoticiaAutRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoNoticiaAutRowChangeEvent)
    
    Public Delegate Sub TipoFormaSuporteAcondRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoFormaSuporteAcondRowChangeEvent)
    
    Public Delegate Sub TipoEstadoDeConservacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoEstadoDeConservacaoRowChangeEvent)
    
    Public Delegate Sub TipoOrdenacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoOrdenacaoRowChangeEvent)
    
    Public Delegate Sub NivelUnidadeFisicaRowChangeEventHandler(ByVal sender As Object, ByVal e As NivelUnidadeFisicaRowChangeEvent)
    
    Public Delegate Sub TipoTradicaoDocumentalRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoTradicaoDocumentalRowChangeEvent)
    
    Public Delegate Sub TipoMaterialDeSuporteRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoMaterialDeSuporteRowChangeEvent)
    
    Public Delegate Sub SFRDAvaliacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDAvaliacaoRowChangeEvent)
    
    Public Delegate Sub SFRDUFMateriaisComponenteRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDUFMateriaisComponenteRowChangeEvent)
    
    Public Delegate Sub ControloAutDicionarioRowChangeEventHandler(ByVal sender As Object, ByVal e As ControloAutDicionarioRowChangeEvent)
    
    Public Delegate Sub TrusteeRowChangeEventHandler(ByVal sender As Object, ByVal e As TrusteeRowChangeEvent)
    
    Public Delegate Sub NivelControloAutRowChangeEventHandler(ByVal sender As Object, ByVal e As NivelControloAutRowChangeEvent)
    
    Public Delegate Sub ControloAutEntidadeProdutoraRowChangeEventHandler(ByVal sender As Object, ByVal e As ControloAutEntidadeProdutoraRowChangeEvent)
    
    Public Delegate Sub SFRDCondicaoDeAcessoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDCondicaoDeAcessoRowChangeEvent)
    
    Public Delegate Sub SFRDUFDescricaoFisicaRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDUFDescricaoFisicaRowChangeEvent)
    
    Public Delegate Sub SecurableObjectRowChangeEventHandler(ByVal sender As Object, ByVal e As SecurableObjectRowChangeEvent)
    
    Public Delegate Sub SFRDUnidadeFisicaRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDUnidadeFisicaRowChangeEvent)
    
    Public Delegate Sub Iso3166RowChangeEventHandler(ByVal sender As Object, ByVal e As Iso3166RowChangeEvent)
    
    Public Delegate Sub SFRDUFComponenteRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDUFComponenteRowChangeEvent)
    
    Public Delegate Sub TipoDensidadeRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoDensidadeRowChangeEvent)
    
    Public Delegate Sub SFRDConteudoEEstruturaRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDConteudoEEstruturaRowChangeEvent)
    
    Public Delegate Sub TipoSubDensidadeRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoSubDensidadeRowChangeEvent)
    
    Public Delegate Sub SFRDContextoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDContextoRowChangeEvent)
    
    Public Delegate Sub SFRDUFTecnicasRegComponenteRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDUFTecnicasRegComponenteRowChangeEvent)
    
    Public Delegate Sub TipoMedidaRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoMedidaRowChangeEvent)
    
    Public Delegate Sub NivelRowChangeEventHandler(ByVal sender As Object, ByVal e As NivelRowChangeEvent)
    
    Public Delegate Sub SFRDDocumentacaoAssociadaRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDDocumentacaoAssociadaRowChangeEvent)
    
    Public Delegate Sub SFRDAvaliacaoRelRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDAvaliacaoRelRowChangeEvent)
    
    Public Delegate Sub TipoAcondicionamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoAcondicionamentoRowChangeEvent)
    
    Public Delegate Sub TipoEstadoConservacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoEstadoConservacaoRowChangeEvent)
    
    Public Delegate Sub SFRDImagemVolumeRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDImagemVolumeRowChangeEvent)
    
    Public Delegate Sub TipoTecnicaRegistoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoTecnicaRegistoRowChangeEvent)
    
    Public Delegate Sub ServerLicenseRowChangeEventHandler(ByVal sender As Object, ByVal e As ServerLicenseRowChangeEvent)
    
    Public Delegate Sub AccessControlElementRowChangeEventHandler(ByVal sender As Object, ByVal e As AccessControlElementRowChangeEvent)
    
    Public Delegate Sub TipoMaterialRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoMaterialRowChangeEvent)
    
    Public Delegate Sub TipoNivelRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoNivelRowChangeEvent)
    
    Public Delegate Sub SFRDNotaGeralRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDNotaGeralRowChangeEvent)
    
    Public Delegate Sub SecurableObjectNivelRowChangeEventHandler(ByVal sender As Object, ByVal e As SecurableObjectNivelRowChangeEvent)
    
    Public Delegate Sub TipoServerRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoServerRowChangeEvent)
    
    Public Delegate Sub TipoNivelRelacionadoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoNivelRelacionadoRowChangeEvent)
    
    Public Delegate Sub SFRDUFCotaRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDUFCotaRowChangeEvent)
    
    Public Delegate Sub TipoClientRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoClientRowChangeEvent)
    
    Public Delegate Sub TrusteeGroupRowChangeEventHandler(ByVal sender As Object, ByVal e As TrusteeGroupRowChangeEvent)
    
    Public Delegate Sub TrusteePrivilegeRowChangeEventHandler(ByVal sender As Object, ByVal e As TrusteePrivilegeRowChangeEvent)
    
    Public Delegate Sub TipoSuporteRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoSuporteRowChangeEvent)
    
    Public Delegate Sub SFRDTradicaoDocumentalRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDTradicaoDocumentalRowChangeEvent)
    
    Public Delegate Sub TrusteeUserRowChangeEventHandler(ByVal sender As Object, ByVal e As TrusteeUserRowChangeEvent)
    
    Public Delegate Sub UserGroupsRowChangeEventHandler(ByVal sender As Object, ByVal e As UserGroupsRowChangeEvent)
    
    Public Delegate Sub SFRDMaterialDeSuporteRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDMaterialDeSuporteRowChangeEvent)
    
    Public Delegate Sub ProductFunctionRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductFunctionRowChangeEvent)
    
    Public Delegate Sub SFRDOrdenacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDOrdenacaoRowChangeEvent)
    
    Public Delegate Sub TipoFunctionRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoFunctionRowChangeEvent)
    
    Public Delegate Sub ControloAutDataDeDescricaoRowChangeEventHandler(ByVal sender As Object, ByVal e As ControloAutDataDeDescricaoRowChangeEvent)
    
    Public Delegate Sub SFRDEstadoDeConservacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDEstadoDeConservacaoRowChangeEvent)
    
    Public Delegate Sub RelacaoTipoNivelRelacionadoRowChangeEventHandler(ByVal sender As Object, ByVal e As RelacaoTipoNivelRelacionadoRowChangeEvent)
    
    Public Delegate Sub SFRDFormaSuporteAcondRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDFormaSuporteAcondRowChangeEvent)
    
    Public Delegate Sub TipoPertinenciaRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoPertinenciaRowChangeEvent)
    
    Public Delegate Sub SFRDTecnicasDeRegistoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDTecnicasDeRegistoRowChangeEvent)
    
    Public Delegate Sub SFRDUFAutoEliminacaoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDUFAutoEliminacaoRowChangeEvent)
    
    Public Delegate Sub SFRDImagemRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDImagemRowChangeEvent)
    
    Public Delegate Sub ControloAutDatasExistenciaRowChangeEventHandler(ByVal sender As Object, ByVal e As ControloAutDatasExistenciaRowChangeEvent)
    
    Public Delegate Sub FRDBaseDataDeDescricaoRowChangeEventHandler(ByVal sender As Object, ByVal e As FRDBaseDataDeDescricaoRowChangeEvent)
    
    Public Delegate Sub SFRDDatasProducaoRowChangeEventHandler(ByVal sender As Object, ByVal e As SFRDDatasProducaoRowChangeEvent)
    
    Public Delegate Sub RelacaoHierarquicaRowChangeEventHandler(ByVal sender As Object, ByVal e As RelacaoHierarquicaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutRelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDControloAut As DataColumn
        
        Private columnIDControloAutAlias As DataColumn
        
        Private columnIDTipoRel As DataColumn
        
        Private columnDescricao As DataColumn
        
        Private columnInicioAno As DataColumn
        
        Private columnInicioMes As DataColumn
        
        Private columnInicioDia As DataColumn
        
        Private columnFimAno As DataColumn
        
        Private columnFimMes As DataColumn
        
        Private columnFimDia As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ControloAutRel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutColumn As DataColumn
            Get
                Return Me.columnIDControloAut
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutAliasColumn As DataColumn
            Get
                Return Me.columnIDControloAutAlias
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoRelColumn As DataColumn
            Get
                Return Me.columnIDTipoRel
            End Get
        End Property
        
        Friend ReadOnly Property DescricaoColumn As DataColumn
            Get
                Return Me.columnDescricao
            End Get
        End Property
        
        Friend ReadOnly Property InicioAnoColumn As DataColumn
            Get
                Return Me.columnInicioAno
            End Get
        End Property
        
        Friend ReadOnly Property InicioMesColumn As DataColumn
            Get
                Return Me.columnInicioMes
            End Get
        End Property
        
        Friend ReadOnly Property InicioDiaColumn As DataColumn
            Get
                Return Me.columnInicioDia
            End Get
        End Property
        
        Friend ReadOnly Property FimAnoColumn As DataColumn
            Get
                Return Me.columnFimAno
            End Get
        End Property
        
        Friend ReadOnly Property FimMesColumn As DataColumn
            Get
                Return Me.columnFimMes
            End Get
        End Property
        
        Friend ReadOnly Property FimDiaColumn As DataColumn
            Get
                Return Me.columnFimDia
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ControloAutRelRow
            Get
                Return CType(Me.Rows(index),ControloAutRelRow)
            End Get
        End Property
        
        Public Event ControloAutRelRowChanged As ControloAutRelRowChangeEventHandler
        
        Public Event ControloAutRelRowChanging As ControloAutRelRowChangeEventHandler
        
        Public Event ControloAutRelRowDeleted As ControloAutRelRowChangeEventHandler
        
        Public Event ControloAutRelRowDeleting As ControloAutRelRowChangeEventHandler
        
        Public Overloads Sub AddControloAutRelRow(ByVal row As ControloAutRelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddControloAutRelRow(ByVal parentControloAutRowByControloAutControloAutRel As ControloAutRow, ByVal parentControloAutRowByControloAutControloAutRelAlias As ControloAutRow, ByVal parentTipoControloAutRelRowByTipoControloAutRelControloAutRel As TipoControloAutRelRow, ByVal Descricao As String, ByVal InicioAno As String, ByVal InicioMes As String, ByVal InicioDia As String, ByVal FimAno As String, ByVal FimMes As String, ByVal FimDia As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ControloAutRelRow
            Dim rowControloAutRelRow As ControloAutRelRow = CType(Me.NewRow,ControloAutRelRow)
            rowControloAutRelRow.ItemArray = New Object() {parentControloAutRowByControloAutControloAutRel(0), parentControloAutRowByControloAutControloAutRelAlias(0), parentTipoControloAutRelRowByTipoControloAutRelControloAutRel(0), Descricao, InicioAno, InicioMes, InicioDia, FimAno, FimMes, FimDia, Versao, isDeleted}
            Me.Rows.Add(rowControloAutRelRow)
            Return rowControloAutRelRow
        End Function
        
        Public Function FindByIDControloAutIDControloAutAliasIDTipoRel(ByVal IDControloAut As Long, ByVal IDControloAutAlias As Long, ByVal IDTipoRel As Long) As ControloAutRelRow
            Return CType(Me.Rows.Find(New Object() {IDControloAut, IDControloAutAlias, IDTipoRel}),ControloAutRelRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ControloAutRelDataTable = CType(MyBase.Clone,ControloAutRelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ControloAutRelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDControloAut = Me.Columns("IDControloAut")
            Me.columnIDControloAutAlias = Me.Columns("IDControloAutAlias")
            Me.columnIDTipoRel = Me.Columns("IDTipoRel")
            Me.columnDescricao = Me.Columns("Descricao")
            Me.columnInicioAno = Me.Columns("InicioAno")
            Me.columnInicioMes = Me.Columns("InicioMes")
            Me.columnInicioDia = Me.Columns("InicioDia")
            Me.columnFimAno = Me.Columns("FimAno")
            Me.columnFimMes = Me.Columns("FimMes")
            Me.columnFimDia = Me.Columns("FimDia")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDControloAut = New DataColumn("IDControloAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAut)
            Me.columnIDControloAutAlias = New DataColumn("IDControloAutAlias", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAutAlias)
            Me.columnIDTipoRel = New DataColumn("IDTipoRel", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoRel)
            Me.columnDescricao = New DataColumn("Descricao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescricao)
            Me.columnInicioAno = New DataColumn("InicioAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioAno)
            Me.columnInicioMes = New DataColumn("InicioMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioMes)
            Me.columnInicioDia = New DataColumn("InicioDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioDia)
            Me.columnFimAno = New DataColumn("FimAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimAno)
            Me.columnFimMes = New DataColumn("FimMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimMes)
            Me.columnFimDia = New DataColumn("FimDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimDia)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDControloAut, Me.columnIDControloAutAlias, Me.columnIDTipoRel}, true))
            Me.columnIDControloAut.AllowDBNull = false
            Me.columnIDControloAutAlias.AllowDBNull = false
            Me.columnIDTipoRel.AllowDBNull = false
            Me.columnDescricao.MaxLength = 4000
            Me.columnInicioAno.MaxLength = 4
            Me.columnInicioMes.MaxLength = 2
            Me.columnInicioDia.MaxLength = 2
            Me.columnFimAno.MaxLength = 4
            Me.columnFimMes.MaxLength = 2
            Me.columnFimDia.MaxLength = 2
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewControloAutRelRow() As ControloAutRelRow
            Return CType(Me.NewRow,ControloAutRelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ControloAutRelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ControloAutRelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ControloAutRelRowChangedEvent) Is Nothing) Then
                RaiseEvent ControloAutRelRowChanged(Me, New ControloAutRelRowChangeEvent(CType(e.Row,ControloAutRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ControloAutRelRowChangingEvent) Is Nothing) Then
                RaiseEvent ControloAutRelRowChanging(Me, New ControloAutRelRowChangeEvent(CType(e.Row,ControloAutRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ControloAutRelRowDeletedEvent) Is Nothing) Then
                RaiseEvent ControloAutRelRowDeleted(Me, New ControloAutRelRowChangeEvent(CType(e.Row,ControloAutRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ControloAutRelRowDeletingEvent) Is Nothing) Then
                RaiseEvent ControloAutRelRowDeleting(Me, New ControloAutRelRowChangeEvent(CType(e.Row,ControloAutRelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveControloAutRelRow(ByVal row As ControloAutRelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutRelRow
        Inherits DataRow
        
        Private tableControloAutRel As ControloAutRelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableControloAutRel = CType(Me.Table,ControloAutRelDataTable)
        End Sub
        
        Public Property IDControloAut As Long
            Get
                Return CType(Me(Me.tableControloAutRel.IDControloAutColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutRel.IDControloAutColumn) = value
            End Set
        End Property
        
        Public Property IDControloAutAlias As Long
            Get
                Return CType(Me(Me.tableControloAutRel.IDControloAutAliasColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutRel.IDControloAutAliasColumn) = value
            End Set
        End Property
        
        Public Property IDTipoRel As Long
            Get
                Return CType(Me(Me.tableControloAutRel.IDTipoRelColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutRel.IDTipoRelColumn) = value
            End Set
        End Property
        
        Public Property Descricao As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.DescricaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.DescricaoColumn) = value
            End Set
        End Property
        
        Public Property InicioAno As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.InicioAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.InicioAnoColumn) = value
            End Set
        End Property
        
        Public Property InicioMes As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.InicioMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.InicioMesColumn) = value
            End Set
        End Property
        
        Public Property InicioDia As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.InicioDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.InicioDiaColumn) = value
            End Set
        End Property
        
        Public Property FimAno As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.FimAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.FimAnoColumn) = value
            End Set
        End Property
        
        Public Property FimMes As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.FimMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.FimMesColumn) = value
            End Set
        End Property
        
        Public Property FimDia As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.FimDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.FimDiaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableControloAutRel.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutRel.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableControloAutRel.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAutRel.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property ControloAutRowByControloAutControloAutRel As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutControloAutRel")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutControloAutRel"))
            End Set
        End Property
        
        Public Property ControloAutRowByControloAutControloAutRelAlias As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutControloAutRelAlias")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutControloAutRelAlias"))
            End Set
        End Property
        
        Public Property TipoControloAutRelRow As TipoControloAutRelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoControloAutRelControloAutRel")),TipoControloAutRelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoControloAutRelControloAutRel"))
            End Set
        End Property
        
        Public Function IsDescricaoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.DescricaoColumn)
        End Function
        
        Public Sub SetDescricaoNull()
            Me(Me.tableControloAutRel.DescricaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioAnoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.InicioAnoColumn)
        End Function
        
        Public Sub SetInicioAnoNull()
            Me(Me.tableControloAutRel.InicioAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioMesNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.InicioMesColumn)
        End Function
        
        Public Sub SetInicioMesNull()
            Me(Me.tableControloAutRel.InicioMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioDiaNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.InicioDiaColumn)
        End Function
        
        Public Sub SetInicioDiaNull()
            Me(Me.tableControloAutRel.InicioDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimAnoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.FimAnoColumn)
        End Function
        
        Public Sub SetFimAnoNull()
            Me(Me.tableControloAutRel.FimAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimMesNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.FimMesColumn)
        End Function
        
        Public Sub SetFimMesNull()
            Me(Me.tableControloAutRel.FimMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimDiaNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.FimDiaColumn)
        End Function
        
        Public Sub SetFimDiaNull()
            Me(Me.tableControloAutRel.FimDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutRel.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableControloAutRel.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutRelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ControloAutRelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ControloAutRelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ControloAutRelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientLicenseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSequenceNumber As DataColumn
        
        Private columnGrantDate As DataColumn
        
        Private columnSerialNumber As DataColumn
        
        Private columnIDTipoClient As DataColumn
        
        Private columnFloatingLicensesCount As DataColumn
        
        Private columnGranterName As DataColumn
        
        Private columnAssemblyVersion As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ClientLicense")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SequenceNumberColumn As DataColumn
            Get
                Return Me.columnSequenceNumber
            End Get
        End Property
        
        Friend ReadOnly Property GrantDateColumn As DataColumn
            Get
                Return Me.columnGrantDate
            End Get
        End Property
        
        Friend ReadOnly Property SerialNumberColumn As DataColumn
            Get
                Return Me.columnSerialNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoClientColumn As DataColumn
            Get
                Return Me.columnIDTipoClient
            End Get
        End Property
        
        Friend ReadOnly Property FloatingLicensesCountColumn As DataColumn
            Get
                Return Me.columnFloatingLicensesCount
            End Get
        End Property
        
        Friend ReadOnly Property GranterNameColumn As DataColumn
            Get
                Return Me.columnGranterName
            End Get
        End Property
        
        Friend ReadOnly Property AssemblyVersionColumn As DataColumn
            Get
                Return Me.columnAssemblyVersion
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientLicenseRow
            Get
                Return CType(Me.Rows(index),ClientLicenseRow)
            End Get
        End Property
        
        Public Event ClientLicenseRowChanged As ClientLicenseRowChangeEventHandler
        
        Public Event ClientLicenseRowChanging As ClientLicenseRowChangeEventHandler
        
        Public Event ClientLicenseRowDeleted As ClientLicenseRowChangeEventHandler
        
        Public Event ClientLicenseRowDeleting As ClientLicenseRowChangeEventHandler
        
        Public Overloads Sub AddClientLicenseRow(ByVal row As ClientLicenseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClientLicenseRow(ByVal SequenceNumber As Integer, ByVal GrantDate As Date, ByVal SerialNumber As String, ByVal parentTipoClientRowByTipoClientClientLicense As TipoClientRow, ByVal FloatingLicensesCount As Short, ByVal GranterName As String, ByVal AssemblyVersion As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ClientLicenseRow
            Dim rowClientLicenseRow As ClientLicenseRow = CType(Me.NewRow,ClientLicenseRow)
            rowClientLicenseRow.ItemArray = New Object() {SequenceNumber, GrantDate, SerialNumber, parentTipoClientRowByTipoClientClientLicense(0), FloatingLicensesCount, GranterName, AssemblyVersion, Versao, isDeleted}
            Me.Rows.Add(rowClientLicenseRow)
            Return rowClientLicenseRow
        End Function
        
        Public Function FindBySequenceNumberGrantDate(ByVal SequenceNumber As Integer, ByVal GrantDate As Date) As ClientLicenseRow
            Return CType(Me.Rows.Find(New Object() {SequenceNumber, GrantDate}),ClientLicenseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClientLicenseDataTable = CType(MyBase.Clone,ClientLicenseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClientLicenseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSequenceNumber = Me.Columns("SequenceNumber")
            Me.columnGrantDate = Me.Columns("GrantDate")
            Me.columnSerialNumber = Me.Columns("SerialNumber")
            Me.columnIDTipoClient = Me.Columns("IDTipoClient")
            Me.columnFloatingLicensesCount = Me.Columns("FloatingLicensesCount")
            Me.columnGranterName = Me.Columns("GranterName")
            Me.columnAssemblyVersion = Me.Columns("AssemblyVersion")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnSequenceNumber = New DataColumn("SequenceNumber", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSequenceNumber)
            Me.columnGrantDate = New DataColumn("GrantDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrantDate)
            Me.columnSerialNumber = New DataColumn("SerialNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSerialNumber)
            Me.columnIDTipoClient = New DataColumn("IDTipoClient", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoClient)
            Me.columnFloatingLicensesCount = New DataColumn("FloatingLicensesCount", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFloatingLicensesCount)
            Me.columnGranterName = New DataColumn("GranterName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGranterName)
            Me.columnAssemblyVersion = New DataColumn("AssemblyVersion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssemblyVersion)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSequenceNumber, Me.columnGrantDate}, true))
            Me.columnSequenceNumber.AllowDBNull = false
            Me.columnGrantDate.AllowDBNull = false
            Me.columnSerialNumber.AllowDBNull = false
            Me.columnSerialNumber.MaxLength = 19
            Me.columnIDTipoClient.AllowDBNull = false
            Me.columnFloatingLicensesCount.AllowDBNull = false
            Me.columnGranterName.MaxLength = 256
            Me.columnAssemblyVersion.MaxLength = 256
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewClientLicenseRow() As ClientLicenseRow
            Return CType(Me.NewRow,ClientLicenseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClientLicenseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClientLicenseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientLicenseRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientLicenseRowChanged(Me, New ClientLicenseRowChangeEvent(CType(e.Row,ClientLicenseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientLicenseRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientLicenseRowChanging(Me, New ClientLicenseRowChangeEvent(CType(e.Row,ClientLicenseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientLicenseRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientLicenseRowDeleted(Me, New ClientLicenseRowChangeEvent(CType(e.Row,ClientLicenseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientLicenseRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientLicenseRowDeleting(Me, New ClientLicenseRowChangeEvent(CType(e.Row,ClientLicenseRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClientLicenseRow(ByVal row As ClientLicenseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientLicenseRow
        Inherits DataRow
        
        Private tableClientLicense As ClientLicenseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientLicense = CType(Me.Table,ClientLicenseDataTable)
        End Sub
        
        Public Property SequenceNumber As Integer
            Get
                Return CType(Me(Me.tableClientLicense.SequenceNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableClientLicense.SequenceNumberColumn) = value
            End Set
        End Property
        
        Public Property GrantDate As Date
            Get
                Return CType(Me(Me.tableClientLicense.GrantDateColumn),Date)
            End Get
            Set
                Me(Me.tableClientLicense.GrantDateColumn) = value
            End Set
        End Property
        
        Public Property SerialNumber As String
            Get
                Return CType(Me(Me.tableClientLicense.SerialNumberColumn),String)
            End Get
            Set
                Me(Me.tableClientLicense.SerialNumberColumn) = value
            End Set
        End Property
        
        Public Property IDTipoClient As Long
            Get
                Return CType(Me(Me.tableClientLicense.IDTipoClientColumn),Long)
            End Get
            Set
                Me(Me.tableClientLicense.IDTipoClientColumn) = value
            End Set
        End Property
        
        Public Property FloatingLicensesCount As Short
            Get
                Return CType(Me(Me.tableClientLicense.FloatingLicensesCountColumn),Short)
            End Get
            Set
                Me(Me.tableClientLicense.FloatingLicensesCountColumn) = value
            End Set
        End Property
        
        Public Property GranterName As String
            Get
                Try 
                    Return CType(Me(Me.tableClientLicense.GranterNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientLicense.GranterNameColumn) = value
            End Set
        End Property
        
        Public Property AssemblyVersion As String
            Get
                Try 
                    Return CType(Me(Me.tableClientLicense.AssemblyVersionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientLicense.AssemblyVersionColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableClientLicense.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientLicense.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableClientLicense.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableClientLicense.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoClientRow As TipoClientRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoClientClientLicense")),TipoClientRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoClientClientLicense"))
            End Set
        End Property
        
        Public Function IsGranterNameNull() As Boolean
            Return Me.IsNull(Me.tableClientLicense.GranterNameColumn)
        End Function
        
        Public Sub SetGranterNameNull()
            Me(Me.tableClientLicense.GranterNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAssemblyVersionNull() As Boolean
            Return Me.IsNull(Me.tableClientLicense.AssemblyVersionColumn)
        End Function
        
        Public Sub SetAssemblyVersionNull()
            Me(Me.tableClientLicense.AssemblyVersionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableClientLicense.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableClientLicense.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetClientActivityRows() As ClientActivityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ClientLicenseClientActivity")),ClientActivityRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientLicenseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClientLicenseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClientLicenseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClientLicenseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IndexFRDCADataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDControloAut As DataColumn
        
        Private columnSelector As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("IndexFRDCA")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutColumn As DataColumn
            Get
                Return Me.columnIDControloAut
            End Get
        End Property
        
        Friend ReadOnly Property SelectorColumn As DataColumn
            Get
                Return Me.columnSelector
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IndexFRDCARow
            Get
                Return CType(Me.Rows(index),IndexFRDCARow)
            End Get
        End Property
        
        Public Event IndexFRDCARowChanged As IndexFRDCARowChangeEventHandler
        
        Public Event IndexFRDCARowChanging As IndexFRDCARowChangeEventHandler
        
        Public Event IndexFRDCARowDeleted As IndexFRDCARowChangeEventHandler
        
        Public Event IndexFRDCARowDeleting As IndexFRDCARowChangeEventHandler
        
        Public Overloads Sub AddIndexFRDCARow(ByVal row As IndexFRDCARow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIndexFRDCARow(ByVal parentFRDBaseRowByFRDBaseIndexFRDCA As FRDBaseRow, ByVal parentControloAutRowByControloAutIndexFRDCA As ControloAutRow, ByVal Selector As Integer, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As IndexFRDCARow
            Dim rowIndexFRDCARow As IndexFRDCARow = CType(Me.NewRow,IndexFRDCARow)
            rowIndexFRDCARow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseIndexFRDCA(0), parentControloAutRowByControloAutIndexFRDCA(0), Selector, Versao, isDeleted}
            Me.Rows.Add(rowIndexFRDCARow)
            Return rowIndexFRDCARow
        End Function
        
        Public Function FindByIDFRDBaseIDControloAut(ByVal IDFRDBase As Long, ByVal IDControloAut As Long) As IndexFRDCARow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDControloAut}),IndexFRDCARow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IndexFRDCADataTable = CType(MyBase.Clone,IndexFRDCADataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IndexFRDCADataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDControloAut = Me.Columns("IDControloAut")
            Me.columnSelector = Me.Columns("Selector")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDControloAut = New DataColumn("IDControloAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAut)
            Me.columnSelector = New DataColumn("Selector", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSelector)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDControloAut}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDControloAut.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewIndexFRDCARow() As IndexFRDCARow
            Return CType(Me.NewRow,IndexFRDCARow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IndexFRDCARow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IndexFRDCARow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IndexFRDCARowChangedEvent) Is Nothing) Then
                RaiseEvent IndexFRDCARowChanged(Me, New IndexFRDCARowChangeEvent(CType(e.Row,IndexFRDCARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IndexFRDCARowChangingEvent) Is Nothing) Then
                RaiseEvent IndexFRDCARowChanging(Me, New IndexFRDCARowChangeEvent(CType(e.Row,IndexFRDCARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IndexFRDCARowDeletedEvent) Is Nothing) Then
                RaiseEvent IndexFRDCARowDeleted(Me, New IndexFRDCARowChangeEvent(CType(e.Row,IndexFRDCARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IndexFRDCARowDeletingEvent) Is Nothing) Then
                RaiseEvent IndexFRDCARowDeleting(Me, New IndexFRDCARowChangeEvent(CType(e.Row,IndexFRDCARow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIndexFRDCARow(ByVal row As IndexFRDCARow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IndexFRDCARow
        Inherits DataRow
        
        Private tableIndexFRDCA As IndexFRDCADataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIndexFRDCA = CType(Me.Table,IndexFRDCADataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableIndexFRDCA.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableIndexFRDCA.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDControloAut As Long
            Get
                Return CType(Me(Me.tableIndexFRDCA.IDControloAutColumn),Long)
            End Get
            Set
                Me(Me.tableIndexFRDCA.IDControloAutColumn) = value
            End Set
        End Property
        
        Public Property Selector As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIndexFRDCA.SelectorColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndexFRDCA.SelectorColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableIndexFRDCA.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIndexFRDCA.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableIndexFRDCA.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableIndexFRDCA.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseIndexFRDCA")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseIndexFRDCA"))
            End Set
        End Property
        
        Public Property ControloAutRow As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutIndexFRDCA")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutIndexFRDCA"))
            End Set
        End Property
        
        Public Function IsSelectorNull() As Boolean
            Return Me.IsNull(Me.tableIndexFRDCA.SelectorColumn)
        End Function
        
        Public Sub SetSelectorNull()
            Me(Me.tableIndexFRDCA.SelectorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableIndexFRDCA.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableIndexFRDCA.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IndexFRDCARowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IndexFRDCARow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IndexFRDCARow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IndexFRDCARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnAutorizado As DataColumn
        
        Private columnCompleto As DataColumn
        
        Private columnIDTipoNoticiaAut As DataColumn
        
        Private columnNotaExplicativa As DataColumn
        
        Private columnIDIso639p2 As DataColumn
        
        Private columnIDIso15924 As DataColumn
        
        Private columnChaveColectividade As DataColumn
        
        Private columnChaveRegisto As DataColumn
        
        Private columnRegrasConvencoes As DataColumn
        
        Private columnObservacoes As DataColumn
        
        Private columnDescHistoria As DataColumn
        
        Private columnDescZonaGeografica As DataColumn
        
        Private columnDescEstatutoLegal As DataColumn
        
        Private columnDescOcupacoesActividades As DataColumn
        
        Private columnDescEnquadramentoLegal As DataColumn
        
        Private columnDescEstruturaInterna As DataColumn
        
        Private columnDescContextoGeral As DataColumn
        
        Private columnDescOutraInformacaoRelevante As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ControloAut")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AutorizadoColumn As DataColumn
            Get
                Return Me.columnAutorizado
            End Get
        End Property
        
        Friend ReadOnly Property CompletoColumn As DataColumn
            Get
                Return Me.columnCompleto
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoNoticiaAutColumn As DataColumn
            Get
                Return Me.columnIDTipoNoticiaAut
            End Get
        End Property
        
        Friend ReadOnly Property NotaExplicativaColumn As DataColumn
            Get
                Return Me.columnNotaExplicativa
            End Get
        End Property
        
        Friend ReadOnly Property IDIso639p2Column As DataColumn
            Get
                Return Me.columnIDIso639p2
            End Get
        End Property
        
        Friend ReadOnly Property IDIso15924Column As DataColumn
            Get
                Return Me.columnIDIso15924
            End Get
        End Property
        
        Friend ReadOnly Property ChaveColectividadeColumn As DataColumn
            Get
                Return Me.columnChaveColectividade
            End Get
        End Property
        
        Friend ReadOnly Property ChaveRegistoColumn As DataColumn
            Get
                Return Me.columnChaveRegisto
            End Get
        End Property
        
        Friend ReadOnly Property RegrasConvencoesColumn As DataColumn
            Get
                Return Me.columnRegrasConvencoes
            End Get
        End Property
        
        Friend ReadOnly Property ObservacoesColumn As DataColumn
            Get
                Return Me.columnObservacoes
            End Get
        End Property
        
        Friend ReadOnly Property DescHistoriaColumn As DataColumn
            Get
                Return Me.columnDescHistoria
            End Get
        End Property
        
        Friend ReadOnly Property DescZonaGeograficaColumn As DataColumn
            Get
                Return Me.columnDescZonaGeografica
            End Get
        End Property
        
        Friend ReadOnly Property DescEstatutoLegalColumn As DataColumn
            Get
                Return Me.columnDescEstatutoLegal
            End Get
        End Property
        
        Friend ReadOnly Property DescOcupacoesActividadesColumn As DataColumn
            Get
                Return Me.columnDescOcupacoesActividades
            End Get
        End Property
        
        Friend ReadOnly Property DescEnquadramentoLegalColumn As DataColumn
            Get
                Return Me.columnDescEnquadramentoLegal
            End Get
        End Property
        
        Friend ReadOnly Property DescEstruturaInternaColumn As DataColumn
            Get
                Return Me.columnDescEstruturaInterna
            End Get
        End Property
        
        Friend ReadOnly Property DescContextoGeralColumn As DataColumn
            Get
                Return Me.columnDescContextoGeral
            End Get
        End Property
        
        Friend ReadOnly Property DescOutraInformacaoRelevanteColumn As DataColumn
            Get
                Return Me.columnDescOutraInformacaoRelevante
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ControloAutRow
            Get
                Return CType(Me.Rows(index),ControloAutRow)
            End Get
        End Property
        
        Public Event ControloAutRowChanged As ControloAutRowChangeEventHandler
        
        Public Event ControloAutRowChanging As ControloAutRowChangeEventHandler
        
        Public Event ControloAutRowDeleted As ControloAutRowChangeEventHandler
        
        Public Event ControloAutRowDeleting As ControloAutRowChangeEventHandler
        
        Public Overloads Sub AddControloAutRow(ByVal row As ControloAutRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddControloAutRow( _
                    ByVal Autorizado As Boolean,  _
                    ByVal Completo As Boolean,  _
                    ByVal parentTipoNoticiaAutRowByTipoNoticiaAutControloAut As TipoNoticiaAutRow,  _
                    ByVal NotaExplicativa As String,  _
                    ByVal parentIso639RowByIso639ControloAut As Iso639Row,  _
                    ByVal parentIso15924RowByIso15924ControloAut As Iso15924Row,  _
                    ByVal ChaveColectividade As String,  _
                    ByVal ChaveRegisto As String,  _
                    ByVal RegrasConvencoes As String,  _
                    ByVal Observacoes As String,  _
                    ByVal DescHistoria As String,  _
                    ByVal DescZonaGeografica As String,  _
                    ByVal DescEstatutoLegal As String,  _
                    ByVal DescOcupacoesActividades As String,  _
                    ByVal DescEnquadramentoLegal As String,  _
                    ByVal DescEstruturaInterna As String,  _
                    ByVal DescContextoGeral As String,  _
                    ByVal DescOutraInformacaoRelevante As String,  _
                    ByVal Versao() As Byte,  _
                    ByVal isDeleted As Boolean) As ControloAutRow
            Dim rowControloAutRow As ControloAutRow = CType(Me.NewRow,ControloAutRow)
            rowControloAutRow.ItemArray = New Object() {Nothing, Autorizado, Completo, parentTipoNoticiaAutRowByTipoNoticiaAutControloAut(0), NotaExplicativa, parentIso639RowByIso639ControloAut(0), parentIso15924RowByIso15924ControloAut(0), ChaveColectividade, ChaveRegisto, RegrasConvencoes, Observacoes, DescHistoria, DescZonaGeografica, DescEstatutoLegal, DescOcupacoesActividades, DescEnquadramentoLegal, DescEstruturaInterna, DescContextoGeral, DescOutraInformacaoRelevante, Versao, isDeleted}
            Me.Rows.Add(rowControloAutRow)
            Return rowControloAutRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As ControloAutRow
            Return CType(Me.Rows.Find(New Object() {ID}),ControloAutRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ControloAutDataTable = CType(MyBase.Clone,ControloAutDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ControloAutDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnAutorizado = Me.Columns("Autorizado")
            Me.columnCompleto = Me.Columns("Completo")
            Me.columnIDTipoNoticiaAut = Me.Columns("IDTipoNoticiaAut")
            Me.columnNotaExplicativa = Me.Columns("NotaExplicativa")
            Me.columnIDIso639p2 = Me.Columns("IDIso639p2")
            Me.columnIDIso15924 = Me.Columns("IDIso15924")
            Me.columnChaveColectividade = Me.Columns("ChaveColectividade")
            Me.columnChaveRegisto = Me.Columns("ChaveRegisto")
            Me.columnRegrasConvencoes = Me.Columns("RegrasConvencoes")
            Me.columnObservacoes = Me.Columns("Observacoes")
            Me.columnDescHistoria = Me.Columns("DescHistoria")
            Me.columnDescZonaGeografica = Me.Columns("DescZonaGeografica")
            Me.columnDescEstatutoLegal = Me.Columns("DescEstatutoLegal")
            Me.columnDescOcupacoesActividades = Me.Columns("DescOcupacoesActividades")
            Me.columnDescEnquadramentoLegal = Me.Columns("DescEnquadramentoLegal")
            Me.columnDescEstruturaInterna = Me.Columns("DescEstruturaInterna")
            Me.columnDescContextoGeral = Me.Columns("DescContextoGeral")
            Me.columnDescOutraInformacaoRelevante = Me.Columns("DescOutraInformacaoRelevante")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAutorizado = New DataColumn("Autorizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAutorizado)
            Me.columnCompleto = New DataColumn("Completo", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompleto)
            Me.columnIDTipoNoticiaAut = New DataColumn("IDTipoNoticiaAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoNoticiaAut)
            Me.columnNotaExplicativa = New DataColumn("NotaExplicativa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotaExplicativa)
            Me.columnIDIso639p2 = New DataColumn("IDIso639p2", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDIso639p2)
            Me.columnIDIso15924 = New DataColumn("IDIso15924", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDIso15924)
            Me.columnChaveColectividade = New DataColumn("ChaveColectividade", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChaveColectividade)
            Me.columnChaveRegisto = New DataColumn("ChaveRegisto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChaveRegisto)
            Me.columnRegrasConvencoes = New DataColumn("RegrasConvencoes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegrasConvencoes)
            Me.columnObservacoes = New DataColumn("Observacoes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservacoes)
            Me.columnDescHistoria = New DataColumn("DescHistoria", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescHistoria)
            Me.columnDescZonaGeografica = New DataColumn("DescZonaGeografica", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescZonaGeografica)
            Me.columnDescEstatutoLegal = New DataColumn("DescEstatutoLegal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescEstatutoLegal)
            Me.columnDescOcupacoesActividades = New DataColumn("DescOcupacoesActividades", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescOcupacoesActividades)
            Me.columnDescEnquadramentoLegal = New DataColumn("DescEnquadramentoLegal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescEnquadramentoLegal)
            Me.columnDescEstruturaInterna = New DataColumn("DescEstruturaInterna", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescEstruturaInterna)
            Me.columnDescContextoGeral = New DataColumn("DescContextoGeral", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescContextoGeral)
            Me.columnDescOutraInformacaoRelevante = New DataColumn("DescOutraInformacaoRelevante", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescOutraInformacaoRelevante)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnAutorizado.AllowDBNull = false
            Me.columnCompleto.AllowDBNull = false
            Me.columnIDTipoNoticiaAut.AllowDBNull = false
            Me.columnNotaExplicativa.MaxLength = 1073741823
            Me.columnChaveColectividade.MaxLength = 256
            Me.columnChaveRegisto.MaxLength = 256
            Me.columnRegrasConvencoes.MaxLength = 1073741823
            Me.columnObservacoes.MaxLength = 1073741823
            Me.columnDescHistoria.MaxLength = 1073741823
            Me.columnDescZonaGeografica.MaxLength = 1073741823
            Me.columnDescEstatutoLegal.MaxLength = 1073741823
            Me.columnDescOcupacoesActividades.MaxLength = 1073741823
            Me.columnDescEnquadramentoLegal.MaxLength = 1073741823
            Me.columnDescEstruturaInterna.MaxLength = 1073741823
            Me.columnDescContextoGeral.MaxLength = 1073741823
            Me.columnDescOutraInformacaoRelevante.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewControloAutRow() As ControloAutRow
            Return CType(Me.NewRow,ControloAutRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ControloAutRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ControloAutRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ControloAutRowChangedEvent) Is Nothing) Then
                RaiseEvent ControloAutRowChanged(Me, New ControloAutRowChangeEvent(CType(e.Row,ControloAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ControloAutRowChangingEvent) Is Nothing) Then
                RaiseEvent ControloAutRowChanging(Me, New ControloAutRowChangeEvent(CType(e.Row,ControloAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ControloAutRowDeletedEvent) Is Nothing) Then
                RaiseEvent ControloAutRowDeleted(Me, New ControloAutRowChangeEvent(CType(e.Row,ControloAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ControloAutRowDeletingEvent) Is Nothing) Then
                RaiseEvent ControloAutRowDeleting(Me, New ControloAutRowChangeEvent(CType(e.Row,ControloAutRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveControloAutRow(ByVal row As ControloAutRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutRow
        Inherits DataRow
        
        Private tableControloAut As ControloAutDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableControloAut = CType(Me.Table,ControloAutDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableControloAut.IDColumn),Long)
            End Get
            Set
                Me(Me.tableControloAut.IDColumn) = value
            End Set
        End Property
        
        Public Property Autorizado As Boolean
            Get
                Return CType(Me(Me.tableControloAut.AutorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAut.AutorizadoColumn) = value
            End Set
        End Property
        
        Public Property Completo As Boolean
            Get
                Return CType(Me(Me.tableControloAut.CompletoColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAut.CompletoColumn) = value
            End Set
        End Property
        
        Public Property IDTipoNoticiaAut As Long
            Get
                Return CType(Me(Me.tableControloAut.IDTipoNoticiaAutColumn),Long)
            End Get
            Set
                Me(Me.tableControloAut.IDTipoNoticiaAutColumn) = value
            End Set
        End Property
        
        Public Property NotaExplicativa As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.NotaExplicativaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.NotaExplicativaColumn) = value
            End Set
        End Property
        
        Public Property IDIso639p2 As Long
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.IDIso639p2Column),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.IDIso639p2Column) = value
            End Set
        End Property
        
        Public Property IDIso15924 As Long
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.IDIso15924Column),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.IDIso15924Column) = value
            End Set
        End Property
        
        Public Property ChaveColectividade As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.ChaveColectividadeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.ChaveColectividadeColumn) = value
            End Set
        End Property
        
        Public Property ChaveRegisto As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.ChaveRegistoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.ChaveRegistoColumn) = value
            End Set
        End Property
        
        Public Property RegrasConvencoes As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.RegrasConvencoesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.RegrasConvencoesColumn) = value
            End Set
        End Property
        
        Public Property Observacoes As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.ObservacoesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.ObservacoesColumn) = value
            End Set
        End Property
        
        Public Property DescHistoria As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescHistoriaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescHistoriaColumn) = value
            End Set
        End Property
        
        Public Property DescZonaGeografica As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescZonaGeograficaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescZonaGeograficaColumn) = value
            End Set
        End Property
        
        Public Property DescEstatutoLegal As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescEstatutoLegalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescEstatutoLegalColumn) = value
            End Set
        End Property
        
        Public Property DescOcupacoesActividades As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescOcupacoesActividadesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescOcupacoesActividadesColumn) = value
            End Set
        End Property
        
        Public Property DescEnquadramentoLegal As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescEnquadramentoLegalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescEnquadramentoLegalColumn) = value
            End Set
        End Property
        
        Public Property DescEstruturaInterna As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescEstruturaInternaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescEstruturaInternaColumn) = value
            End Set
        End Property
        
        Public Property DescContextoGeral As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescContextoGeralColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescContextoGeralColumn) = value
            End Set
        End Property
        
        Public Property DescOutraInformacaoRelevante As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.DescOutraInformacaoRelevanteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.DescOutraInformacaoRelevanteColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableControloAut.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAut.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableControloAut.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAut.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property Iso639Row As Iso639Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Iso639ControloAut")),Iso639Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Iso639ControloAut"))
            End Set
        End Property
        
        Public Property Iso15924Row As Iso15924Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Iso15924ControloAut")),Iso15924Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Iso15924ControloAut"))
            End Set
        End Property
        
        Public Property TipoNoticiaAutRow As TipoNoticiaAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNoticiaAutControloAut")),TipoNoticiaAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNoticiaAutControloAut"))
            End Set
        End Property
        
        Public Function IsNotaExplicativaNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.NotaExplicativaColumn)
        End Function
        
        Public Sub SetNotaExplicativaNull()
            Me(Me.tableControloAut.NotaExplicativaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDIso639p2Null() As Boolean
            Return Me.IsNull(Me.tableControloAut.IDIso639p2Column)
        End Function
        
        Public Sub SetIDIso639p2Null()
            Me(Me.tableControloAut.IDIso639p2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDIso15924Null() As Boolean
            Return Me.IsNull(Me.tableControloAut.IDIso15924Column)
        End Function
        
        Public Sub SetIDIso15924Null()
            Me(Me.tableControloAut.IDIso15924Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChaveColectividadeNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.ChaveColectividadeColumn)
        End Function
        
        Public Sub SetChaveColectividadeNull()
            Me(Me.tableControloAut.ChaveColectividadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChaveRegistoNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.ChaveRegistoColumn)
        End Function
        
        Public Sub SetChaveRegistoNull()
            Me(Me.tableControloAut.ChaveRegistoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegrasConvencoesNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.RegrasConvencoesColumn)
        End Function
        
        Public Sub SetRegrasConvencoesNull()
            Me(Me.tableControloAut.RegrasConvencoesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsObservacoesNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.ObservacoesColumn)
        End Function
        
        Public Sub SetObservacoesNull()
            Me(Me.tableControloAut.ObservacoesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescHistoriaNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescHistoriaColumn)
        End Function
        
        Public Sub SetDescHistoriaNull()
            Me(Me.tableControloAut.DescHistoriaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescZonaGeograficaNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescZonaGeograficaColumn)
        End Function
        
        Public Sub SetDescZonaGeograficaNull()
            Me(Me.tableControloAut.DescZonaGeograficaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescEstatutoLegalNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescEstatutoLegalColumn)
        End Function
        
        Public Sub SetDescEstatutoLegalNull()
            Me(Me.tableControloAut.DescEstatutoLegalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescOcupacoesActividadesNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescOcupacoesActividadesColumn)
        End Function
        
        Public Sub SetDescOcupacoesActividadesNull()
            Me(Me.tableControloAut.DescOcupacoesActividadesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescEnquadramentoLegalNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescEnquadramentoLegalColumn)
        End Function
        
        Public Sub SetDescEnquadramentoLegalNull()
            Me(Me.tableControloAut.DescEnquadramentoLegalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescEstruturaInternaNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescEstruturaInternaColumn)
        End Function
        
        Public Sub SetDescEstruturaInternaNull()
            Me(Me.tableControloAut.DescEstruturaInternaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescContextoGeralNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescContextoGeralColumn)
        End Function
        
        Public Sub SetDescContextoGeralNull()
            Me(Me.tableControloAut.DescContextoGeralColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescOutraInformacaoRelevanteNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.DescOutraInformacaoRelevanteColumn)
        End Function
        
        Public Sub SetDescOutraInformacaoRelevanteNull()
            Me(Me.tableControloAut.DescOutraInformacaoRelevanteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableControloAut.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableControloAut.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetControloAutDatasExistenciaRows() As ControloAutDatasExistenciaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutControloAutDatasExistencia")),ControloAutDatasExistenciaRow())
        End Function
        
        Public Function GetControloAutDataDeDescricaoRows() As ControloAutDataDeDescricaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutControloAutDataDeDescricao")),ControloAutDataDeDescricaoRow())
        End Function
        
        Public Function GetControloAutEntidadeProdutoraRows() As ControloAutEntidadeProdutoraRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutControloAutEntidadeProdutora")),ControloAutEntidadeProdutoraRow())
        End Function
        
        Public Function GetNivelControloAutRows() As NivelControloAutRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutNivelControloAut")),NivelControloAutRow())
        End Function
        
        Public Function GetControloAutDicionarioRows() As ControloAutDicionarioRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutControloAutDicionario")),ControloAutDicionarioRow())
        End Function
        
        Public Function GetIndexFRDCARows() As IndexFRDCARow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutIndexFRDCA")),IndexFRDCARow())
        End Function
        
        Public Function GetControloAutRelRowsByControloAutControloAutRel() As ControloAutRelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutControloAutRel")),ControloAutRelRow())
        End Function
        
        Public Function GetControloAutRelRowsByControloAutControloAutRelAlias() As ControloAutRelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ControloAutControloAutRelAlias")),ControloAutRelRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ControloAutRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ControloAutRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ControloAutRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNoticiaATipoControloAFormaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDTipoNoticiaAut As DataColumn
        
        Private columnIDTipoControloAutForma As DataColumn
        
        Private columnGUIOrder As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoNoticiaATipoControloAForma")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoNoticiaAutColumn As DataColumn
            Get
                Return Me.columnIDTipoNoticiaAut
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoControloAutFormaColumn As DataColumn
            Get
                Return Me.columnIDTipoControloAutForma
            End Get
        End Property
        
        Friend ReadOnly Property GUIOrderColumn As DataColumn
            Get
                Return Me.columnGUIOrder
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoNoticiaATipoControloAFormaRow
            Get
                Return CType(Me.Rows(index),TipoNoticiaATipoControloAFormaRow)
            End Get
        End Property
        
        Public Event TipoNoticiaATipoControloAFormaRowChanged As TipoNoticiaATipoControloAFormaRowChangeEventHandler
        
        Public Event TipoNoticiaATipoControloAFormaRowChanging As TipoNoticiaATipoControloAFormaRowChangeEventHandler
        
        Public Event TipoNoticiaATipoControloAFormaRowDeleted As TipoNoticiaATipoControloAFormaRowChangeEventHandler
        
        Public Event TipoNoticiaATipoControloAFormaRowDeleting As TipoNoticiaATipoControloAFormaRowChangeEventHandler
        
        Public Overloads Sub AddTipoNoticiaATipoControloAFormaRow(ByVal row As TipoNoticiaATipoControloAFormaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoNoticiaATipoControloAFormaRow(ByVal parentTipoNoticiaAutRowByTipoNoticiaAutTipoNoticiaATipoControloAForma As TipoNoticiaAutRow, ByVal parentTipoControloAutFormaRowByTipoControloAutFormaTipoNoticiaATipoControloAForma As TipoControloAutFormaRow, ByVal GUIOrder As Byte, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoNoticiaATipoControloAFormaRow
            Dim rowTipoNoticiaATipoControloAFormaRow As TipoNoticiaATipoControloAFormaRow = CType(Me.NewRow,TipoNoticiaATipoControloAFormaRow)
            rowTipoNoticiaATipoControloAFormaRow.ItemArray = New Object() {parentTipoNoticiaAutRowByTipoNoticiaAutTipoNoticiaATipoControloAForma(0), parentTipoControloAutFormaRowByTipoControloAutFormaTipoNoticiaATipoControloAForma(0), GUIOrder, Versao, isDeleted}
            Me.Rows.Add(rowTipoNoticiaATipoControloAFormaRow)
            Return rowTipoNoticiaATipoControloAFormaRow
        End Function
        
        Public Function FindByIDTipoNoticiaAutIDTipoControloAutForma(ByVal IDTipoNoticiaAut As Long, ByVal IDTipoControloAutForma As Long) As TipoNoticiaATipoControloAFormaRow
            Return CType(Me.Rows.Find(New Object() {IDTipoNoticiaAut, IDTipoControloAutForma}),TipoNoticiaATipoControloAFormaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoNoticiaATipoControloAFormaDataTable = CType(MyBase.Clone,TipoNoticiaATipoControloAFormaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoNoticiaATipoControloAFormaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDTipoNoticiaAut = Me.Columns("IDTipoNoticiaAut")
            Me.columnIDTipoControloAutForma = Me.Columns("IDTipoControloAutForma")
            Me.columnGUIOrder = Me.Columns("GUIOrder")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDTipoNoticiaAut = New DataColumn("IDTipoNoticiaAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoNoticiaAut)
            Me.columnIDTipoControloAutForma = New DataColumn("IDTipoControloAutForma", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoControloAutForma)
            Me.columnGUIOrder = New DataColumn("GUIOrder", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUIOrder)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDTipoNoticiaAut, Me.columnIDTipoControloAutForma}, true))
            Me.columnIDTipoNoticiaAut.AllowDBNull = false
            Me.columnIDTipoControloAutForma.AllowDBNull = false
            Me.columnGUIOrder.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoNoticiaATipoControloAFormaRow() As TipoNoticiaATipoControloAFormaRow
            Return CType(Me.NewRow,TipoNoticiaATipoControloAFormaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoNoticiaATipoControloAFormaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoNoticiaATipoControloAFormaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoNoticiaATipoControloAFormaRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaATipoControloAFormaRowChanged(Me, New TipoNoticiaATipoControloAFormaRowChangeEvent(CType(e.Row,TipoNoticiaATipoControloAFormaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoNoticiaATipoControloAFormaRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaATipoControloAFormaRowChanging(Me, New TipoNoticiaATipoControloAFormaRowChangeEvent(CType(e.Row,TipoNoticiaATipoControloAFormaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoNoticiaATipoControloAFormaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaATipoControloAFormaRowDeleted(Me, New TipoNoticiaATipoControloAFormaRowChangeEvent(CType(e.Row,TipoNoticiaATipoControloAFormaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoNoticiaATipoControloAFormaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaATipoControloAFormaRowDeleting(Me, New TipoNoticiaATipoControloAFormaRowChangeEvent(CType(e.Row,TipoNoticiaATipoControloAFormaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoNoticiaATipoControloAFormaRow(ByVal row As TipoNoticiaATipoControloAFormaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNoticiaATipoControloAFormaRow
        Inherits DataRow
        
        Private tableTipoNoticiaATipoControloAForma As TipoNoticiaATipoControloAFormaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoNoticiaATipoControloAForma = CType(Me.Table,TipoNoticiaATipoControloAFormaDataTable)
        End Sub
        
        Public Property IDTipoNoticiaAut As Long
            Get
                Return CType(Me(Me.tableTipoNoticiaATipoControloAForma.IDTipoNoticiaAutColumn),Long)
            End Get
            Set
                Me(Me.tableTipoNoticiaATipoControloAForma.IDTipoNoticiaAutColumn) = value
            End Set
        End Property
        
        Public Property IDTipoControloAutForma As Long
            Get
                Return CType(Me(Me.tableTipoNoticiaATipoControloAForma.IDTipoControloAutFormaColumn),Long)
            End Get
            Set
                Me(Me.tableTipoNoticiaATipoControloAForma.IDTipoControloAutFormaColumn) = value
            End Set
        End Property
        
        Public Property GUIOrder As Byte
            Get
                Return CType(Me(Me.tableTipoNoticiaATipoControloAForma.GUIOrderColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoNoticiaATipoControloAForma.GUIOrderColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoNoticiaATipoControloAForma.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoNoticiaATipoControloAForma.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoNoticiaATipoControloAForma.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNoticiaATipoControloAForma.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoNoticiaAutRow As TipoNoticiaAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNoticiaAutTipoNoticiaATipoControloAForma")),TipoNoticiaAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNoticiaAutTipoNoticiaATipoControloAForma"))
            End Set
        End Property
        
        Public Property TipoControloAutFormaRow As TipoControloAutFormaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoControloAutFormaTipoNoticiaATipoControloAForma")),TipoControloAutFormaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoControloAutFormaTipoNoticiaATipoControloAForma"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoNoticiaATipoControloAForma.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoNoticiaATipoControloAForma.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNoticiaATipoControloAFormaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoNoticiaATipoControloAFormaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoNoticiaATipoControloAFormaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoNoticiaATipoControloAFormaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelDesignadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("NivelDesignado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NivelDesignadoRow
            Get
                Return CType(Me.Rows(index),NivelDesignadoRow)
            End Get
        End Property
        
        Public Event NivelDesignadoRowChanged As NivelDesignadoRowChangeEventHandler
        
        Public Event NivelDesignadoRowChanging As NivelDesignadoRowChangeEventHandler
        
        Public Event NivelDesignadoRowDeleted As NivelDesignadoRowChangeEventHandler
        
        Public Event NivelDesignadoRowDeleting As NivelDesignadoRowChangeEventHandler
        
        Public Overloads Sub AddNivelDesignadoRow(ByVal row As NivelDesignadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNivelDesignadoRow(ByVal parentNivelRowByNivelNivelDesignado As NivelRow, ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As NivelDesignadoRow
            Dim rowNivelDesignadoRow As NivelDesignadoRow = CType(Me.NewRow,NivelDesignadoRow)
            rowNivelDesignadoRow.ItemArray = New Object() {parentNivelRowByNivelNivelDesignado(0), Designacao, Versao, isDeleted}
            Me.Rows.Add(rowNivelDesignadoRow)
            Return rowNivelDesignadoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As NivelDesignadoRow
            Return CType(Me.Rows.Find(New Object() {ID}),NivelDesignadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NivelDesignadoDataTable = CType(MyBase.Clone,NivelDesignadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NivelDesignadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 768
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewNivelDesignadoRow() As NivelDesignadoRow
            Return CType(Me.NewRow,NivelDesignadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NivelDesignadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NivelDesignadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NivelDesignadoRowChangedEvent) Is Nothing) Then
                RaiseEvent NivelDesignadoRowChanged(Me, New NivelDesignadoRowChangeEvent(CType(e.Row,NivelDesignadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NivelDesignadoRowChangingEvent) Is Nothing) Then
                RaiseEvent NivelDesignadoRowChanging(Me, New NivelDesignadoRowChangeEvent(CType(e.Row,NivelDesignadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NivelDesignadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent NivelDesignadoRowDeleted(Me, New NivelDesignadoRowChangeEvent(CType(e.Row,NivelDesignadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NivelDesignadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent NivelDesignadoRowDeleting(Me, New NivelDesignadoRowChangeEvent(CType(e.Row,NivelDesignadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNivelDesignadoRow(ByVal row As NivelDesignadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelDesignadoRow
        Inherits DataRow
        
        Private tableNivelDesignado As NivelDesignadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNivelDesignado = CType(Me.Table,NivelDesignadoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableNivelDesignado.IDColumn),Long)
            End Get
            Set
                Me(Me.tableNivelDesignado.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableNivelDesignado.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableNivelDesignado.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableNivelDesignado.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNivelDesignado.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableNivelDesignado.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableNivelDesignado.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property NivelRow As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelNivelDesignado")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelNivelDesignado"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableNivelDesignado.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableNivelDesignado.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetNivelUnidadeFisicaRows() As NivelUnidadeFisicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelDesignadoNivelUnidadeFisica")),NivelUnidadeFisicaRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelDesignadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NivelDesignadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NivelDesignadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NivelDesignadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFRDBaseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnBuiltInName As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoFRDBase")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property BuiltInNameColumn As DataColumn
            Get
                Return Me.columnBuiltInName
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoFRDBaseRow
            Get
                Return CType(Me.Rows(index),TipoFRDBaseRow)
            End Get
        End Property
        
        Public Event TipoFRDBaseRowChanged As TipoFRDBaseRowChangeEventHandler
        
        Public Event TipoFRDBaseRowChanging As TipoFRDBaseRowChangeEventHandler
        
        Public Event TipoFRDBaseRowDeleted As TipoFRDBaseRowChangeEventHandler
        
        Public Event TipoFRDBaseRowDeleting As TipoFRDBaseRowChangeEventHandler
        
        Public Overloads Sub AddTipoFRDBaseRow(ByVal row As TipoFRDBaseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoFRDBaseRow(ByVal BuiltInName As String, ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoFRDBaseRow
            Dim rowTipoFRDBaseRow As TipoFRDBaseRow = CType(Me.NewRow,TipoFRDBaseRow)
            rowTipoFRDBaseRow.ItemArray = New Object() {Nothing, BuiltInName, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoFRDBaseRow)
            Return rowTipoFRDBaseRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoFRDBaseRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoFRDBaseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoFRDBaseDataTable = CType(MyBase.Clone,TipoFRDBaseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoFRDBaseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnBuiltInName = Me.Columns("BuiltInName")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnBuiltInName = New DataColumn("BuiltInName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuiltInName)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnBuiltInName.AllowDBNull = false
            Me.columnBuiltInName.MaxLength = 50
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoFRDBaseRow() As TipoFRDBaseRow
            Return CType(Me.NewRow,TipoFRDBaseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoFRDBaseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoFRDBaseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoFRDBaseRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoFRDBaseRowChanged(Me, New TipoFRDBaseRowChangeEvent(CType(e.Row,TipoFRDBaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoFRDBaseRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoFRDBaseRowChanging(Me, New TipoFRDBaseRowChangeEvent(CType(e.Row,TipoFRDBaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoFRDBaseRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoFRDBaseRowDeleted(Me, New TipoFRDBaseRowChangeEvent(CType(e.Row,TipoFRDBaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoFRDBaseRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoFRDBaseRowDeleting(Me, New TipoFRDBaseRowChangeEvent(CType(e.Row,TipoFRDBaseRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoFRDBaseRow(ByVal row As TipoFRDBaseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFRDBaseRow
        Inherits DataRow
        
        Private tableTipoFRDBase As TipoFRDBaseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoFRDBase = CType(Me.Table,TipoFRDBaseDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoFRDBase.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoFRDBase.IDColumn) = value
            End Set
        End Property
        
        Public Property BuiltInName As String
            Get
                Return CType(Me(Me.tableTipoFRDBase.BuiltInNameColumn),String)
            End Get
            Set
                Me(Me.tableTipoFRDBase.BuiltInNameColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoFRDBase.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoFRDBase.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoFRDBase.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoFRDBase.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoFRDBase.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoFRDBase.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoFRDBase.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoFRDBase.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetFRDBaseRows() As FRDBaseRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoFRDBaseFRDBase")),FRDBaseRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFRDBaseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoFRDBaseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoFRDBaseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoFRDBaseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoOperationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnCodeName As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoOperation")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property CodeNameColumn As DataColumn
            Get
                Return Me.columnCodeName
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoOperationRow
            Get
                Return CType(Me.Rows(index),TipoOperationRow)
            End Get
        End Property
        
        Public Event TipoOperationRowChanged As TipoOperationRowChangeEventHandler
        
        Public Event TipoOperationRowChanging As TipoOperationRowChangeEventHandler
        
        Public Event TipoOperationRowDeleted As TipoOperationRowChangeEventHandler
        
        Public Event TipoOperationRowDeleting As TipoOperationRowChangeEventHandler
        
        Public Overloads Sub AddTipoOperationRow(ByVal row As TipoOperationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoOperationRow(ByVal ID As Byte, ByVal Name As String, ByVal CodeName As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoOperationRow
            Dim rowTipoOperationRow As TipoOperationRow = CType(Me.NewRow,TipoOperationRow)
            rowTipoOperationRow.ItemArray = New Object() {ID, Name, CodeName, Versao, isDeleted}
            Me.Rows.Add(rowTipoOperationRow)
            Return rowTipoOperationRow
        End Function
        
        Public Function FindByID(ByVal ID As Byte) As TipoOperationRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoOperationRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoOperationDataTable = CType(MyBase.Clone,TipoOperationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoOperationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnName = Me.Columns("Name")
            Me.columnCodeName = Me.Columns("CodeName")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnCodeName = New DataColumn("CodeName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodeName)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnCodeName.AllowDBNull = false
            Me.columnCodeName.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoOperationRow() As TipoOperationRow
            Return CType(Me.NewRow,TipoOperationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoOperationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoOperationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoOperationRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoOperationRowChanged(Me, New TipoOperationRowChangeEvent(CType(e.Row,TipoOperationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoOperationRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoOperationRowChanging(Me, New TipoOperationRowChangeEvent(CType(e.Row,TipoOperationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoOperationRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoOperationRowDeleted(Me, New TipoOperationRowChangeEvent(CType(e.Row,TipoOperationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoOperationRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoOperationRowDeleting(Me, New TipoOperationRowChangeEvent(CType(e.Row,TipoOperationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoOperationRow(ByVal row As TipoOperationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoOperationRow
        Inherits DataRow
        
        Private tableTipoOperation As TipoOperationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoOperation = CType(Me.Table,TipoOperationDataTable)
        End Sub
        
        Public Property ID As Byte
            Get
                Return CType(Me(Me.tableTipoOperation.IDColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoOperation.IDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Return CType(Me(Me.tableTipoOperation.NameColumn),String)
            End Get
            Set
                Me(Me.tableTipoOperation.NameColumn) = value
            End Set
        End Property
        
        Public Property CodeName As String
            Get
                Return CType(Me(Me.tableTipoOperation.CodeNameColumn),String)
            End Get
            Set
                Me(Me.tableTipoOperation.CodeNameColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoOperation.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoOperation.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoOperation.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoOperation.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoOperation.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoOperation.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetFunctionOperationRows() As FunctionOperationRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoOperationFunctionOperation")),FunctionOperationRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoOperationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoOperationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoOperationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoOperationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFunctionGroupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnGUIOrder As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoFunctionGroup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property GUIOrderColumn As DataColumn
            Get
                Return Me.columnGUIOrder
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoFunctionGroupRow
            Get
                Return CType(Me.Rows(index),TipoFunctionGroupRow)
            End Get
        End Property
        
        Public Event TipoFunctionGroupRowChanged As TipoFunctionGroupRowChangeEventHandler
        
        Public Event TipoFunctionGroupRowChanging As TipoFunctionGroupRowChangeEventHandler
        
        Public Event TipoFunctionGroupRowDeleted As TipoFunctionGroupRowChangeEventHandler
        
        Public Event TipoFunctionGroupRowDeleting As TipoFunctionGroupRowChangeEventHandler
        
        Public Overloads Sub AddTipoFunctionGroupRow(ByVal row As TipoFunctionGroupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoFunctionGroupRow(ByVal ID As Byte, ByVal Name As String, ByVal GUIOrder As Byte, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoFunctionGroupRow
            Dim rowTipoFunctionGroupRow As TipoFunctionGroupRow = CType(Me.NewRow,TipoFunctionGroupRow)
            rowTipoFunctionGroupRow.ItemArray = New Object() {ID, Name, GUIOrder, Versao, isDeleted}
            Me.Rows.Add(rowTipoFunctionGroupRow)
            Return rowTipoFunctionGroupRow
        End Function
        
        Public Function FindByID(ByVal ID As Byte) As TipoFunctionGroupRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoFunctionGroupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoFunctionGroupDataTable = CType(MyBase.Clone,TipoFunctionGroupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoFunctionGroupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnName = Me.Columns("Name")
            Me.columnGUIOrder = Me.Columns("GUIOrder")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnGUIOrder = New DataColumn("GUIOrder", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUIOrder)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnGUIOrder.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoFunctionGroupRow() As TipoFunctionGroupRow
            Return CType(Me.NewRow,TipoFunctionGroupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoFunctionGroupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoFunctionGroupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoFunctionGroupRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoFunctionGroupRowChanged(Me, New TipoFunctionGroupRowChangeEvent(CType(e.Row,TipoFunctionGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoFunctionGroupRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoFunctionGroupRowChanging(Me, New TipoFunctionGroupRowChangeEvent(CType(e.Row,TipoFunctionGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoFunctionGroupRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoFunctionGroupRowDeleted(Me, New TipoFunctionGroupRowChangeEvent(CType(e.Row,TipoFunctionGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoFunctionGroupRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoFunctionGroupRowDeleting(Me, New TipoFunctionGroupRowChangeEvent(CType(e.Row,TipoFunctionGroupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoFunctionGroupRow(ByVal row As TipoFunctionGroupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFunctionGroupRow
        Inherits DataRow
        
        Private tableTipoFunctionGroup As TipoFunctionGroupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoFunctionGroup = CType(Me.Table,TipoFunctionGroupDataTable)
        End Sub
        
        Public Property ID As Byte
            Get
                Return CType(Me(Me.tableTipoFunctionGroup.IDColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoFunctionGroup.IDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Return CType(Me(Me.tableTipoFunctionGroup.NameColumn),String)
            End Get
            Set
                Me(Me.tableTipoFunctionGroup.NameColumn) = value
            End Set
        End Property
        
        Public Property GUIOrder As Byte
            Get
                Return CType(Me(Me.tableTipoFunctionGroup.GUIOrderColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoFunctionGroup.GUIOrderColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoFunctionGroup.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoFunctionGroup.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoFunctionGroup.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoFunctionGroup.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoFunctionGroup.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoFunctionGroup.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTipoFunctionRows() As TipoFunctionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoFunctionGroupTipoFunction")),TipoFunctionRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFunctionGroupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoFunctionGroupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoFunctionGroupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoFunctionGroupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FRDBaseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDNivel As DataColumn
        
        Private columnIDTipoFRDBase As DataColumn
        
        Private columnNotaDoArquivista As DataColumn
        
        Private columnRegrasOuConvencoes As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("FRDBase")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDNivelColumn As DataColumn
            Get
                Return Me.columnIDNivel
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDTipoFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property NotaDoArquivistaColumn As DataColumn
            Get
                Return Me.columnNotaDoArquivista
            End Get
        End Property
        
        Friend ReadOnly Property RegrasOuConvencoesColumn As DataColumn
            Get
                Return Me.columnRegrasOuConvencoes
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRDBaseRow
            Get
                Return CType(Me.Rows(index),FRDBaseRow)
            End Get
        End Property
        
        Public Event FRDBaseRowChanged As FRDBaseRowChangeEventHandler
        
        Public Event FRDBaseRowChanging As FRDBaseRowChangeEventHandler
        
        Public Event FRDBaseRowDeleted As FRDBaseRowChangeEventHandler
        
        Public Event FRDBaseRowDeleting As FRDBaseRowChangeEventHandler
        
        Public Overloads Sub AddFRDBaseRow(ByVal row As FRDBaseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFRDBaseRow(ByVal parentNivelRowByNivelFRDBase As NivelRow, ByVal parentTipoFRDBaseRowByTipoFRDBaseFRDBase As TipoFRDBaseRow, ByVal NotaDoArquivista As String, ByVal RegrasOuConvencoes As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As FRDBaseRow
            Dim rowFRDBaseRow As FRDBaseRow = CType(Me.NewRow,FRDBaseRow)
            rowFRDBaseRow.ItemArray = New Object() {Nothing, parentNivelRowByNivelFRDBase(0), parentTipoFRDBaseRowByTipoFRDBaseFRDBase(0), NotaDoArquivista, RegrasOuConvencoes, Versao, isDeleted}
            Me.Rows.Add(rowFRDBaseRow)
            Return rowFRDBaseRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As FRDBaseRow
            Return CType(Me.Rows.Find(New Object() {ID}),FRDBaseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FRDBaseDataTable = CType(MyBase.Clone,FRDBaseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FRDBaseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDNivel = Me.Columns("IDNivel")
            Me.columnIDTipoFRDBase = Me.Columns("IDTipoFRDBase")
            Me.columnNotaDoArquivista = Me.Columns("NotaDoArquivista")
            Me.columnRegrasOuConvencoes = Me.Columns("RegrasOuConvencoes")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDNivel = New DataColumn("IDNivel", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDNivel)
            Me.columnIDTipoFRDBase = New DataColumn("IDTipoFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoFRDBase)
            Me.columnNotaDoArquivista = New DataColumn("NotaDoArquivista", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotaDoArquivista)
            Me.columnRegrasOuConvencoes = New DataColumn("RegrasOuConvencoes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegrasOuConvencoes)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("FRDBase_Constraint3", New DataColumn() {Me.columnIDNivel, Me.columnIDTipoFRDBase}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnIDNivel.AllowDBNull = false
            Me.columnIDTipoFRDBase.AllowDBNull = false
            Me.columnNotaDoArquivista.MaxLength = 1073741823
            Me.columnRegrasOuConvencoes.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewFRDBaseRow() As FRDBaseRow
            Return CType(Me.NewRow,FRDBaseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FRDBaseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRDBaseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRDBaseRowChangedEvent) Is Nothing) Then
                RaiseEvent FRDBaseRowChanged(Me, New FRDBaseRowChangeEvent(CType(e.Row,FRDBaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRDBaseRowChangingEvent) Is Nothing) Then
                RaiseEvent FRDBaseRowChanging(Me, New FRDBaseRowChangeEvent(CType(e.Row,FRDBaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRDBaseRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRDBaseRowDeleted(Me, New FRDBaseRowChangeEvent(CType(e.Row,FRDBaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRDBaseRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRDBaseRowDeleting(Me, New FRDBaseRowChangeEvent(CType(e.Row,FRDBaseRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFRDBaseRow(ByVal row As FRDBaseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FRDBaseRow
        Inherits DataRow
        
        Private tableFRDBase As FRDBaseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRDBase = CType(Me.Table,FRDBaseDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableFRDBase.IDColumn),Long)
            End Get
            Set
                Me(Me.tableFRDBase.IDColumn) = value
            End Set
        End Property
        
        Public Property IDNivel As Long
            Get
                Return CType(Me(Me.tableFRDBase.IDNivelColumn),Long)
            End Get
            Set
                Me(Me.tableFRDBase.IDNivelColumn) = value
            End Set
        End Property
        
        Public Property IDTipoFRDBase As Long
            Get
                Return CType(Me(Me.tableFRDBase.IDTipoFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableFRDBase.IDTipoFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property NotaDoArquivista As String
            Get
                Try 
                    Return CType(Me(Me.tableFRDBase.NotaDoArquivistaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRDBase.NotaDoArquivistaColumn) = value
            End Set
        End Property
        
        Public Property RegrasOuConvencoes As String
            Get
                Try 
                    Return CType(Me(Me.tableFRDBase.RegrasOuConvencoesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRDBase.RegrasOuConvencoesColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableFRDBase.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRDBase.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableFRDBase.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableFRDBase.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property NivelRow As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelFRDBase")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelFRDBase"))
            End Set
        End Property
        
        Public Property TipoFRDBaseRow As TipoFRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoFRDBaseFRDBase")),TipoFRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoFRDBaseFRDBase"))
            End Set
        End Property
        
        Public Function IsNotaDoArquivistaNull() As Boolean
            Return Me.IsNull(Me.tableFRDBase.NotaDoArquivistaColumn)
        End Function
        
        Public Sub SetNotaDoArquivistaNull()
            Me(Me.tableFRDBase.NotaDoArquivistaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegrasOuConvencoesNull() As Boolean
            Return Me.IsNull(Me.tableFRDBase.RegrasOuConvencoesColumn)
        End Function
        
        Public Sub SetRegrasOuConvencoesNull()
            Me(Me.tableFRDBase.RegrasOuConvencoesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableFRDBase.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableFRDBase.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDDatasProducaoRows() As SFRDDatasProducaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDDatasProducao")),SFRDDatasProducaoRow())
        End Function
        
        Public Function GetFRDBaseDataDeDescricaoRows() As FRDBaseDataDeDescricaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseFRDBaseDataDeDescricao")),FRDBaseDataDeDescricaoRow())
        End Function
        
        Public Function GetSFRDImagemRows() As SFRDImagemRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDImagem")),SFRDImagemRow())
        End Function
        
        Public Function GetSFRDUFAutoEliminacaoRows() As SFRDUFAutoEliminacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDUFAutoEliminacao")),SFRDUFAutoEliminacaoRow())
        End Function
        
        Public Function GetSFRDOrdenacaoRows() As SFRDOrdenacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDOrdenacao")),SFRDOrdenacaoRow())
        End Function
        
        Public Function GetSFRDTradicaoDocumentalRows() As SFRDTradicaoDocumentalRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDTradicaoDocumental")),SFRDTradicaoDocumentalRow())
        End Function
        
        Public Function GetSFRDUFCotaRows() As SFRDUFCotaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDUFCota")),SFRDUFCotaRow())
        End Function
        
        Public Function GetSFRDNotaGeralRows() As SFRDNotaGeralRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDNotaGeral")),SFRDNotaGeralRow())
        End Function
        
        Public Function GetSFRDDocumentacaoAssociadaRows() As SFRDDocumentacaoAssociadaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDDocumentacaoAssociada")),SFRDDocumentacaoAssociadaRow())
        End Function
        
        Public Function GetSFRDContextoRows() As SFRDContextoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDContexto")),SFRDContextoRow())
        End Function
        
        Public Function GetSFRDConteudoEEstruturaRows() As SFRDConteudoEEstruturaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDConteudoEEstrutura")),SFRDConteudoEEstruturaRow())
        End Function
        
        Public Function GetSFRDUnidadeFisicaRows() As SFRDUnidadeFisicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDUnidadeFisica")),SFRDUnidadeFisicaRow())
        End Function
        
        Public Function GetSFRDUFDescricaoFisicaRows() As SFRDUFDescricaoFisicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDUFDescricaoFisica")),SFRDUFDescricaoFisicaRow())
        End Function
        
        Public Function GetSFRDCondicaoDeAcessoRows() As SFRDCondicaoDeAcessoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDCondicaoDeAcesso")),SFRDCondicaoDeAcessoRow())
        End Function
        
        Public Function GetSFRDAvaliacaoRows() As SFRDAvaliacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseSFRDAvaliacao")),SFRDAvaliacaoRow())
        End Function
        
        Public Function GetIndexFRDCARows() As IndexFRDCARow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FRDBaseIndexFRDCA")),IndexFRDCARow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FRDBaseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FRDBaseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FRDBaseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FRDBaseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DicionarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnTermo As DataColumn
        
        Private columnCatCode As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("Dicionario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property TermoColumn As DataColumn
            Get
                Return Me.columnTermo
            End Get
        End Property
        
        Friend ReadOnly Property CatCodeColumn As DataColumn
            Get
                Return Me.columnCatCode
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DicionarioRow
            Get
                Return CType(Me.Rows(index),DicionarioRow)
            End Get
        End Property
        
        Public Event DicionarioRowChanged As DicionarioRowChangeEventHandler
        
        Public Event DicionarioRowChanging As DicionarioRowChangeEventHandler
        
        Public Event DicionarioRowDeleted As DicionarioRowChangeEventHandler
        
        Public Event DicionarioRowDeleting As DicionarioRowChangeEventHandler
        
        Public Overloads Sub AddDicionarioRow(ByVal row As DicionarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDicionarioRow(ByVal Termo As String, ByVal CatCode As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As DicionarioRow
            Dim rowDicionarioRow As DicionarioRow = CType(Me.NewRow,DicionarioRow)
            rowDicionarioRow.ItemArray = New Object() {Nothing, Termo, CatCode, Versao, isDeleted}
            Me.Rows.Add(rowDicionarioRow)
            Return rowDicionarioRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As DicionarioRow
            Return CType(Me.Rows.Find(New Object() {ID}),DicionarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DicionarioDataTable = CType(MyBase.Clone,DicionarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DicionarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnTermo = Me.Columns("Termo")
            Me.columnCatCode = Me.Columns("CatCode")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnTermo = New DataColumn("Termo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTermo)
            Me.columnCatCode = New DataColumn("CatCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCatCode)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Dicionario_Constraint1", New DataColumn() {Me.columnTermo, Me.columnCatCode}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnTermo.AllowDBNull = false
            Me.columnTermo.MaxLength = 444
            Me.columnCatCode.AllowDBNull = false
            Me.columnCatCode.MaxLength = 6
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewDicionarioRow() As DicionarioRow
            Return CType(Me.NewRow,DicionarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DicionarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DicionarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DicionarioRowChangedEvent) Is Nothing) Then
                RaiseEvent DicionarioRowChanged(Me, New DicionarioRowChangeEvent(CType(e.Row,DicionarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DicionarioRowChangingEvent) Is Nothing) Then
                RaiseEvent DicionarioRowChanging(Me, New DicionarioRowChangeEvent(CType(e.Row,DicionarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DicionarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent DicionarioRowDeleted(Me, New DicionarioRowChangeEvent(CType(e.Row,DicionarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DicionarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent DicionarioRowDeleting(Me, New DicionarioRowChangeEvent(CType(e.Row,DicionarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDicionarioRow(ByVal row As DicionarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DicionarioRow
        Inherits DataRow
        
        Private tableDicionario As DicionarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDicionario = CType(Me.Table,DicionarioDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableDicionario.IDColumn),Long)
            End Get
            Set
                Me(Me.tableDicionario.IDColumn) = value
            End Set
        End Property
        
        Public Property Termo As String
            Get
                Return CType(Me(Me.tableDicionario.TermoColumn),String)
            End Get
            Set
                Me(Me.tableDicionario.TermoColumn) = value
            End Set
        End Property
        
        Public Property CatCode As String
            Get
                Return CType(Me(Me.tableDicionario.CatCodeColumn),String)
            End Get
            Set
                Me(Me.tableDicionario.CatCodeColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableDicionario.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDicionario.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableDicionario.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableDicionario.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableDicionario.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableDicionario.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetControloAutDicionarioRows() As ControloAutDicionarioRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("DicionarioControloAutDicionario")),ControloAutDicionarioRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DicionarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DicionarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DicionarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DicionarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelUnidadeFisicaCodigoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnAno As DataColumn
        
        Private columnContador As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("NivelUnidadeFisicaCodigo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property AnoColumn As DataColumn
            Get
                Return Me.columnAno
            End Get
        End Property
        
        Friend ReadOnly Property ContadorColumn As DataColumn
            Get
                Return Me.columnContador
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NivelUnidadeFisicaCodigoRow
            Get
                Return CType(Me.Rows(index),NivelUnidadeFisicaCodigoRow)
            End Get
        End Property
        
        Public Event NivelUnidadeFisicaCodigoRowChanged As NivelUnidadeFisicaCodigoRowChangeEventHandler
        
        Public Event NivelUnidadeFisicaCodigoRowChanging As NivelUnidadeFisicaCodigoRowChangeEventHandler
        
        Public Event NivelUnidadeFisicaCodigoRowDeleted As NivelUnidadeFisicaCodigoRowChangeEventHandler
        
        Public Event NivelUnidadeFisicaCodigoRowDeleting As NivelUnidadeFisicaCodigoRowChangeEventHandler
        
        Public Overloads Sub AddNivelUnidadeFisicaCodigoRow(ByVal row As NivelUnidadeFisicaCodigoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNivelUnidadeFisicaCodigoRow(ByVal parentNivelRowByNivelNivelUnidadeFisicaCodigo As NivelRow, ByVal Ano As Decimal, ByVal Contador As Decimal, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As NivelUnidadeFisicaCodigoRow
            Dim rowNivelUnidadeFisicaCodigoRow As NivelUnidadeFisicaCodigoRow = CType(Me.NewRow,NivelUnidadeFisicaCodigoRow)
            rowNivelUnidadeFisicaCodigoRow.ItemArray = New Object() {parentNivelRowByNivelNivelUnidadeFisicaCodigo(0), Ano, Contador, Versao, isDeleted}
            Me.Rows.Add(rowNivelUnidadeFisicaCodigoRow)
            Return rowNivelUnidadeFisicaCodigoRow
        End Function
        
        Public Function FindByIDAno(ByVal ID As Long, ByVal Ano As Decimal) As NivelUnidadeFisicaCodigoRow
            Return CType(Me.Rows.Find(New Object() {ID, Ano}),NivelUnidadeFisicaCodigoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NivelUnidadeFisicaCodigoDataTable = CType(MyBase.Clone,NivelUnidadeFisicaCodigoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NivelUnidadeFisicaCodigoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnAno = Me.Columns("Ano")
            Me.columnContador = Me.Columns("Contador")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnAno = New DataColumn("Ano", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAno)
            Me.columnContador = New DataColumn("Contador", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContador)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID, Me.columnAno}, true))
            Me.columnID.AllowDBNull = false
            Me.columnAno.AllowDBNull = false
            Me.columnContador.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewNivelUnidadeFisicaCodigoRow() As NivelUnidadeFisicaCodigoRow
            Return CType(Me.NewRow,NivelUnidadeFisicaCodigoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NivelUnidadeFisicaCodigoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NivelUnidadeFisicaCodigoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NivelUnidadeFisicaCodigoRowChangedEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaCodigoRowChanged(Me, New NivelUnidadeFisicaCodigoRowChangeEvent(CType(e.Row,NivelUnidadeFisicaCodigoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NivelUnidadeFisicaCodigoRowChangingEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaCodigoRowChanging(Me, New NivelUnidadeFisicaCodigoRowChangeEvent(CType(e.Row,NivelUnidadeFisicaCodigoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NivelUnidadeFisicaCodigoRowDeletedEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaCodigoRowDeleted(Me, New NivelUnidadeFisicaCodigoRowChangeEvent(CType(e.Row,NivelUnidadeFisicaCodigoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NivelUnidadeFisicaCodigoRowDeletingEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaCodigoRowDeleting(Me, New NivelUnidadeFisicaCodigoRowChangeEvent(CType(e.Row,NivelUnidadeFisicaCodigoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNivelUnidadeFisicaCodigoRow(ByVal row As NivelUnidadeFisicaCodigoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelUnidadeFisicaCodigoRow
        Inherits DataRow
        
        Private tableNivelUnidadeFisicaCodigo As NivelUnidadeFisicaCodigoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNivelUnidadeFisicaCodigo = CType(Me.Table,NivelUnidadeFisicaCodigoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableNivelUnidadeFisicaCodigo.IDColumn),Long)
            End Get
            Set
                Me(Me.tableNivelUnidadeFisicaCodigo.IDColumn) = value
            End Set
        End Property
        
        Public Property Ano As Decimal
            Get
                Return CType(Me(Me.tableNivelUnidadeFisicaCodigo.AnoColumn),Decimal)
            End Get
            Set
                Me(Me.tableNivelUnidadeFisicaCodigo.AnoColumn) = value
            End Set
        End Property
        
        Public Property Contador As Decimal
            Get
                Return CType(Me(Me.tableNivelUnidadeFisicaCodigo.ContadorColumn),Decimal)
            End Get
            Set
                Me(Me.tableNivelUnidadeFisicaCodigo.ContadorColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableNivelUnidadeFisicaCodigo.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNivelUnidadeFisicaCodigo.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableNivelUnidadeFisicaCodigo.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableNivelUnidadeFisicaCodigo.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property NivelRow As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelNivelUnidadeFisicaCodigo")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelNivelUnidadeFisicaCodigo"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableNivelUnidadeFisicaCodigo.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableNivelUnidadeFisicaCodigo.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelUnidadeFisicaCodigoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NivelUnidadeFisicaCodigoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NivelUnidadeFisicaCodigoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NivelUnidadeFisicaCodigoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEntidadeProdutoraDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoEntidadeProdutora")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoEntidadeProdutoraRow
            Get
                Return CType(Me.Rows(index),TipoEntidadeProdutoraRow)
            End Get
        End Property
        
        Public Event TipoEntidadeProdutoraRowChanged As TipoEntidadeProdutoraRowChangeEventHandler
        
        Public Event TipoEntidadeProdutoraRowChanging As TipoEntidadeProdutoraRowChangeEventHandler
        
        Public Event TipoEntidadeProdutoraRowDeleted As TipoEntidadeProdutoraRowChangeEventHandler
        
        Public Event TipoEntidadeProdutoraRowDeleting As TipoEntidadeProdutoraRowChangeEventHandler
        
        Public Overloads Sub AddTipoEntidadeProdutoraRow(ByVal row As TipoEntidadeProdutoraRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoEntidadeProdutoraRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoEntidadeProdutoraRow
            Dim rowTipoEntidadeProdutoraRow As TipoEntidadeProdutoraRow = CType(Me.NewRow,TipoEntidadeProdutoraRow)
            rowTipoEntidadeProdutoraRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoEntidadeProdutoraRow)
            Return rowTipoEntidadeProdutoraRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoEntidadeProdutoraRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoEntidadeProdutoraRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoEntidadeProdutoraDataTable = CType(MyBase.Clone,TipoEntidadeProdutoraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoEntidadeProdutoraDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoEntidadeProdutoraRow() As TipoEntidadeProdutoraRow
            Return CType(Me.NewRow,TipoEntidadeProdutoraRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoEntidadeProdutoraRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoEntidadeProdutoraRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoEntidadeProdutoraRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoEntidadeProdutoraRowChanged(Me, New TipoEntidadeProdutoraRowChangeEvent(CType(e.Row,TipoEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoEntidadeProdutoraRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoEntidadeProdutoraRowChanging(Me, New TipoEntidadeProdutoraRowChangeEvent(CType(e.Row,TipoEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoEntidadeProdutoraRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoEntidadeProdutoraRowDeleted(Me, New TipoEntidadeProdutoraRowChangeEvent(CType(e.Row,TipoEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoEntidadeProdutoraRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoEntidadeProdutoraRowDeleting(Me, New TipoEntidadeProdutoraRowChangeEvent(CType(e.Row,TipoEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoEntidadeProdutoraRow(ByVal row As TipoEntidadeProdutoraRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEntidadeProdutoraRow
        Inherits DataRow
        
        Private tableTipoEntidadeProdutora As TipoEntidadeProdutoraDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoEntidadeProdutora = CType(Me.Table,TipoEntidadeProdutoraDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoEntidadeProdutora.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoEntidadeProdutora.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoEntidadeProdutora.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoEntidadeProdutora.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoEntidadeProdutora.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoEntidadeProdutora.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoEntidadeProdutora.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoEntidadeProdutora.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoEntidadeProdutora.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoEntidadeProdutora.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetControloAutEntidadeProdutoraRows() As ControloAutEntidadeProdutoraRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoEntidadeProdutoraControloAutEntidadeProdutora")),ControloAutEntidadeProdutoraRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEntidadeProdutoraRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoEntidadeProdutoraRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoEntidadeProdutoraRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoEntidadeProdutoraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientActivityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSequenceNumber As DataColumn
        
        Private columnGrantDate As DataColumn
        
        Private columnClientGUID As DataColumn
        
        Private columnSessionGUID As DataColumn
        
        Private columnLoginDate As DataColumn
        
        Private columnAccessDate As DataColumn
        
        Private columnLogoutDate As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ClientActivity")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SequenceNumberColumn As DataColumn
            Get
                Return Me.columnSequenceNumber
            End Get
        End Property
        
        Friend ReadOnly Property GrantDateColumn As DataColumn
            Get
                Return Me.columnGrantDate
            End Get
        End Property
        
        Friend ReadOnly Property ClientGUIDColumn As DataColumn
            Get
                Return Me.columnClientGUID
            End Get
        End Property
        
        Friend ReadOnly Property SessionGUIDColumn As DataColumn
            Get
                Return Me.columnSessionGUID
            End Get
        End Property
        
        Friend ReadOnly Property LoginDateColumn As DataColumn
            Get
                Return Me.columnLoginDate
            End Get
        End Property
        
        Friend ReadOnly Property AccessDateColumn As DataColumn
            Get
                Return Me.columnAccessDate
            End Get
        End Property
        
        Friend ReadOnly Property LogoutDateColumn As DataColumn
            Get
                Return Me.columnLogoutDate
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientActivityRow
            Get
                Return CType(Me.Rows(index),ClientActivityRow)
            End Get
        End Property
        
        Public Event ClientActivityRowChanged As ClientActivityRowChangeEventHandler
        
        Public Event ClientActivityRowChanging As ClientActivityRowChangeEventHandler
        
        Public Event ClientActivityRowDeleted As ClientActivityRowChangeEventHandler
        
        Public Event ClientActivityRowDeleting As ClientActivityRowChangeEventHandler
        
        Public Overloads Sub AddClientActivityRow(ByVal row As ClientActivityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClientActivityRow(ByVal SequenceNumber As Integer, ByVal GrantDate As Date, ByVal ClientGUID As String, ByVal SessionGUID As String, ByVal LoginDate As Date, ByVal AccessDate As Date, ByVal LogoutDate As Date, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ClientActivityRow
            Dim rowClientActivityRow As ClientActivityRow = CType(Me.NewRow,ClientActivityRow)
            rowClientActivityRow.ItemArray = New Object() {SequenceNumber, GrantDate, ClientGUID, SessionGUID, LoginDate, AccessDate, LogoutDate, Versao, isDeleted}
            Me.Rows.Add(rowClientActivityRow)
            Return rowClientActivityRow
        End Function
        
        Public Function FindBySequenceNumberGrantDateClientGUIDSessionGUIDLoginDate(ByVal SequenceNumber As Integer, ByVal GrantDate As Date, ByVal ClientGUID As String, ByVal SessionGUID As String, ByVal LoginDate As Date) As ClientActivityRow
            Return CType(Me.Rows.Find(New Object() {SequenceNumber, GrantDate, ClientGUID, SessionGUID, LoginDate}),ClientActivityRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClientActivityDataTable = CType(MyBase.Clone,ClientActivityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClientActivityDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSequenceNumber = Me.Columns("SequenceNumber")
            Me.columnGrantDate = Me.Columns("GrantDate")
            Me.columnClientGUID = Me.Columns("ClientGUID")
            Me.columnSessionGUID = Me.Columns("SessionGUID")
            Me.columnLoginDate = Me.Columns("LoginDate")
            Me.columnAccessDate = Me.Columns("AccessDate")
            Me.columnLogoutDate = Me.Columns("LogoutDate")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnSequenceNumber = New DataColumn("SequenceNumber", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSequenceNumber)
            Me.columnGrantDate = New DataColumn("GrantDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrantDate)
            Me.columnClientGUID = New DataColumn("ClientGUID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClientGUID)
            Me.columnSessionGUID = New DataColumn("SessionGUID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSessionGUID)
            Me.columnLoginDate = New DataColumn("LoginDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoginDate)
            Me.columnAccessDate = New DataColumn("AccessDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccessDate)
            Me.columnLogoutDate = New DataColumn("LogoutDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLogoutDate)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSequenceNumber, Me.columnGrantDate, Me.columnClientGUID, Me.columnSessionGUID, Me.columnLoginDate}, true))
            Me.columnSequenceNumber.AllowDBNull = false
            Me.columnGrantDate.AllowDBNull = false
            Me.columnClientGUID.AllowDBNull = false
            Me.columnClientGUID.MaxLength = 36
            Me.columnSessionGUID.AllowDBNull = false
            Me.columnSessionGUID.MaxLength = 36
            Me.columnLoginDate.AllowDBNull = false
            Me.columnAccessDate.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewClientActivityRow() As ClientActivityRow
            Return CType(Me.NewRow,ClientActivityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClientActivityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClientActivityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientActivityRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientActivityRowChanged(Me, New ClientActivityRowChangeEvent(CType(e.Row,ClientActivityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientActivityRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientActivityRowChanging(Me, New ClientActivityRowChangeEvent(CType(e.Row,ClientActivityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientActivityRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientActivityRowDeleted(Me, New ClientActivityRowChangeEvent(CType(e.Row,ClientActivityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientActivityRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientActivityRowDeleting(Me, New ClientActivityRowChangeEvent(CType(e.Row,ClientActivityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClientActivityRow(ByVal row As ClientActivityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientActivityRow
        Inherits DataRow
        
        Private tableClientActivity As ClientActivityDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientActivity = CType(Me.Table,ClientActivityDataTable)
        End Sub
        
        Public Property SequenceNumber As Integer
            Get
                Return CType(Me(Me.tableClientActivity.SequenceNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableClientActivity.SequenceNumberColumn) = value
            End Set
        End Property
        
        Public Property GrantDate As Date
            Get
                Return CType(Me(Me.tableClientActivity.GrantDateColumn),Date)
            End Get
            Set
                Me(Me.tableClientActivity.GrantDateColumn) = value
            End Set
        End Property
        
        Public Property ClientGUID As String
            Get
                Return CType(Me(Me.tableClientActivity.ClientGUIDColumn),String)
            End Get
            Set
                Me(Me.tableClientActivity.ClientGUIDColumn) = value
            End Set
        End Property
        
        Public Property SessionGUID As String
            Get
                Return CType(Me(Me.tableClientActivity.SessionGUIDColumn),String)
            End Get
            Set
                Me(Me.tableClientActivity.SessionGUIDColumn) = value
            End Set
        End Property
        
        Public Property LoginDate As Date
            Get
                Return CType(Me(Me.tableClientActivity.LoginDateColumn),Date)
            End Get
            Set
                Me(Me.tableClientActivity.LoginDateColumn) = value
            End Set
        End Property
        
        Public Property AccessDate As Date
            Get
                Return CType(Me(Me.tableClientActivity.AccessDateColumn),Date)
            End Get
            Set
                Me(Me.tableClientActivity.AccessDateColumn) = value
            End Set
        End Property
        
        Public Property LogoutDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientActivity.LogoutDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientActivity.LogoutDateColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableClientActivity.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientActivity.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableClientActivity.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableClientActivity.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property ClientLicenseRowParent As ClientLicenseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ClientLicenseClientActivity")),ClientLicenseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ClientLicenseClientActivity"))
            End Set
        End Property
        
        Public Function IsLogoutDateNull() As Boolean
            Return Me.IsNull(Me.tableClientActivity.LogoutDateColumn)
        End Function
        
        Public Sub SetLogoutDateNull()
            Me(Me.tableClientActivity.LogoutDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableClientActivity.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableClientActivity.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClientActivityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClientActivityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClientActivityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClientActivityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlobalConfigDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnNiveisOrganicos As DataColumn
        
        Private columnGestaoIntegrada As DataColumn
        
        Private columnMaxNumResultados As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("GlobalConfig")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NiveisOrganicosColumn As DataColumn
            Get
                Return Me.columnNiveisOrganicos
            End Get
        End Property
        
        Friend ReadOnly Property GestaoIntegradaColumn As DataColumn
            Get
                Return Me.columnGestaoIntegrada
            End Get
        End Property
        
        Friend ReadOnly Property MaxNumResultadosColumn As DataColumn
            Get
                Return Me.columnMaxNumResultados
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GlobalConfigRow
            Get
                Return CType(Me.Rows(index),GlobalConfigRow)
            End Get
        End Property
        
        Public Event GlobalConfigRowChanged As GlobalConfigRowChangeEventHandler
        
        Public Event GlobalConfigRowChanging As GlobalConfigRowChangeEventHandler
        
        Public Event GlobalConfigRowDeleted As GlobalConfigRowChangeEventHandler
        
        Public Event GlobalConfigRowDeleting As GlobalConfigRowChangeEventHandler
        
        Public Overloads Sub AddGlobalConfigRow(ByVal row As GlobalConfigRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGlobalConfigRow(ByVal ID As Long, ByVal NiveisOrganicos As Boolean, ByVal GestaoIntegrada As Boolean, ByVal MaxNumResultados As Integer, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As GlobalConfigRow
            Dim rowGlobalConfigRow As GlobalConfigRow = CType(Me.NewRow,GlobalConfigRow)
            rowGlobalConfigRow.ItemArray = New Object() {ID, NiveisOrganicos, GestaoIntegrada, MaxNumResultados, Versao, isDeleted}
            Me.Rows.Add(rowGlobalConfigRow)
            Return rowGlobalConfigRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As GlobalConfigRow
            Return CType(Me.Rows.Find(New Object() {ID}),GlobalConfigRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GlobalConfigDataTable = CType(MyBase.Clone,GlobalConfigDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GlobalConfigDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNiveisOrganicos = Me.Columns("NiveisOrganicos")
            Me.columnGestaoIntegrada = Me.Columns("GestaoIntegrada")
            Me.columnMaxNumResultados = Me.Columns("MaxNumResultados")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNiveisOrganicos = New DataColumn("NiveisOrganicos", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNiveisOrganicos)
            Me.columnGestaoIntegrada = New DataColumn("GestaoIntegrada", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGestaoIntegrada)
            Me.columnMaxNumResultados = New DataColumn("MaxNumResultados", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxNumResultados)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnNiveisOrganicos.AllowDBNull = false
            Me.columnGestaoIntegrada.AllowDBNull = false
            Me.columnMaxNumResultados.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewGlobalConfigRow() As GlobalConfigRow
            Return CType(Me.NewRow,GlobalConfigRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GlobalConfigRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GlobalConfigRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GlobalConfigRowChangedEvent) Is Nothing) Then
                RaiseEvent GlobalConfigRowChanged(Me, New GlobalConfigRowChangeEvent(CType(e.Row,GlobalConfigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GlobalConfigRowChangingEvent) Is Nothing) Then
                RaiseEvent GlobalConfigRowChanging(Me, New GlobalConfigRowChangeEvent(CType(e.Row,GlobalConfigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GlobalConfigRowDeletedEvent) Is Nothing) Then
                RaiseEvent GlobalConfigRowDeleted(Me, New GlobalConfigRowChangeEvent(CType(e.Row,GlobalConfigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GlobalConfigRowDeletingEvent) Is Nothing) Then
                RaiseEvent GlobalConfigRowDeleting(Me, New GlobalConfigRowChangeEvent(CType(e.Row,GlobalConfigRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGlobalConfigRow(ByVal row As GlobalConfigRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlobalConfigRow
        Inherits DataRow
        
        Private tableGlobalConfig As GlobalConfigDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGlobalConfig = CType(Me.Table,GlobalConfigDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableGlobalConfig.IDColumn),Long)
            End Get
            Set
                Me(Me.tableGlobalConfig.IDColumn) = value
            End Set
        End Property
        
        Public Property NiveisOrganicos As Boolean
            Get
                Return CType(Me(Me.tableGlobalConfig.NiveisOrganicosColumn),Boolean)
            End Get
            Set
                Me(Me.tableGlobalConfig.NiveisOrganicosColumn) = value
            End Set
        End Property
        
        Public Property GestaoIntegrada As Boolean
            Get
                Return CType(Me(Me.tableGlobalConfig.GestaoIntegradaColumn),Boolean)
            End Get
            Set
                Me(Me.tableGlobalConfig.GestaoIntegradaColumn) = value
            End Set
        End Property
        
        Public Property MaxNumResultados As Integer
            Get
                Return CType(Me(Me.tableGlobalConfig.MaxNumResultadosColumn),Integer)
            End Get
            Set
                Me(Me.tableGlobalConfig.MaxNumResultadosColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableGlobalConfig.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGlobalConfig.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableGlobalConfig.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableGlobalConfig.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableGlobalConfig.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableGlobalConfig.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlobalConfigRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GlobalConfigRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GlobalConfigRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GlobalConfigRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FunctionOperationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDTipoFunctionGroup As DataColumn
        
        Private columnIdxTipoFunction As DataColumn
        
        Private columnIDTipoOperation As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("FunctionOperation")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoFunctionGroupColumn As DataColumn
            Get
                Return Me.columnIDTipoFunctionGroup
            End Get
        End Property
        
        Friend ReadOnly Property IdxTipoFunctionColumn As DataColumn
            Get
                Return Me.columnIdxTipoFunction
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoOperationColumn As DataColumn
            Get
                Return Me.columnIDTipoOperation
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FunctionOperationRow
            Get
                Return CType(Me.Rows(index),FunctionOperationRow)
            End Get
        End Property
        
        Public Event FunctionOperationRowChanged As FunctionOperationRowChangeEventHandler
        
        Public Event FunctionOperationRowChanging As FunctionOperationRowChangeEventHandler
        
        Public Event FunctionOperationRowDeleted As FunctionOperationRowChangeEventHandler
        
        Public Event FunctionOperationRowDeleting As FunctionOperationRowChangeEventHandler
        
        Public Overloads Sub AddFunctionOperationRow(ByVal row As FunctionOperationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFunctionOperationRow(ByVal IDTipoFunctionGroup As Byte, ByVal IdxTipoFunction As Byte, ByVal parentTipoOperationRowByTipoOperationFunctionOperation As TipoOperationRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As FunctionOperationRow
            Dim rowFunctionOperationRow As FunctionOperationRow = CType(Me.NewRow,FunctionOperationRow)
            rowFunctionOperationRow.ItemArray = New Object() {IDTipoFunctionGroup, IdxTipoFunction, parentTipoOperationRowByTipoOperationFunctionOperation(0), Versao, isDeleted}
            Me.Rows.Add(rowFunctionOperationRow)
            Return rowFunctionOperationRow
        End Function
        
        Public Function FindByIDTipoFunctionGroupIdxTipoFunctionIDTipoOperation(ByVal IDTipoFunctionGroup As Byte, ByVal IdxTipoFunction As Byte, ByVal IDTipoOperation As Byte) As FunctionOperationRow
            Return CType(Me.Rows.Find(New Object() {IDTipoFunctionGroup, IdxTipoFunction, IDTipoOperation}),FunctionOperationRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FunctionOperationDataTable = CType(MyBase.Clone,FunctionOperationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FunctionOperationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDTipoFunctionGroup = Me.Columns("IDTipoFunctionGroup")
            Me.columnIdxTipoFunction = Me.Columns("IdxTipoFunction")
            Me.columnIDTipoOperation = Me.Columns("IDTipoOperation")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDTipoFunctionGroup = New DataColumn("IDTipoFunctionGroup", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoFunctionGroup)
            Me.columnIdxTipoFunction = New DataColumn("IdxTipoFunction", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdxTipoFunction)
            Me.columnIDTipoOperation = New DataColumn("IDTipoOperation", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoOperation)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDTipoFunctionGroup, Me.columnIdxTipoFunction, Me.columnIDTipoOperation}, true))
            Me.columnIDTipoFunctionGroup.AllowDBNull = false
            Me.columnIdxTipoFunction.AllowDBNull = false
            Me.columnIDTipoOperation.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewFunctionOperationRow() As FunctionOperationRow
            Return CType(Me.NewRow,FunctionOperationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FunctionOperationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FunctionOperationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FunctionOperationRowChangedEvent) Is Nothing) Then
                RaiseEvent FunctionOperationRowChanged(Me, New FunctionOperationRowChangeEvent(CType(e.Row,FunctionOperationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FunctionOperationRowChangingEvent) Is Nothing) Then
                RaiseEvent FunctionOperationRowChanging(Me, New FunctionOperationRowChangeEvent(CType(e.Row,FunctionOperationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FunctionOperationRowDeletedEvent) Is Nothing) Then
                RaiseEvent FunctionOperationRowDeleted(Me, New FunctionOperationRowChangeEvent(CType(e.Row,FunctionOperationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FunctionOperationRowDeletingEvent) Is Nothing) Then
                RaiseEvent FunctionOperationRowDeleting(Me, New FunctionOperationRowChangeEvent(CType(e.Row,FunctionOperationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFunctionOperationRow(ByVal row As FunctionOperationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FunctionOperationRow
        Inherits DataRow
        
        Private tableFunctionOperation As FunctionOperationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFunctionOperation = CType(Me.Table,FunctionOperationDataTable)
        End Sub
        
        Public Property IDTipoFunctionGroup As Byte
            Get
                Return CType(Me(Me.tableFunctionOperation.IDTipoFunctionGroupColumn),Byte)
            End Get
            Set
                Me(Me.tableFunctionOperation.IDTipoFunctionGroupColumn) = value
            End Set
        End Property
        
        Public Property IdxTipoFunction As Byte
            Get
                Return CType(Me(Me.tableFunctionOperation.IdxTipoFunctionColumn),Byte)
            End Get
            Set
                Me(Me.tableFunctionOperation.IdxTipoFunctionColumn) = value
            End Set
        End Property
        
        Public Property IDTipoOperation As Byte
            Get
                Return CType(Me(Me.tableFunctionOperation.IDTipoOperationColumn),Byte)
            End Get
            Set
                Me(Me.tableFunctionOperation.IDTipoOperationColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableFunctionOperation.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFunctionOperation.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableFunctionOperation.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableFunctionOperation.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoFunctionRowParent As TipoFunctionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoFunctionFunctionOperation")),TipoFunctionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoFunctionFunctionOperation"))
            End Set
        End Property
        
        Public Property TipoOperationRow As TipoOperationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoOperationFunctionOperation")),TipoOperationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoOperationFunctionOperation"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableFunctionOperation.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableFunctionOperation.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTrusteePrivilegeRows() As TrusteePrivilegeRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FunctionOperationTrusteePrivilege")),TrusteePrivilegeRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FunctionOperationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FunctionOperationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FunctionOperationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FunctionOperationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoControloAutRelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnDesignacaoInversa As DataColumn
        
        Private columnThesaurus As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoControloAutRel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoInversaColumn As DataColumn
            Get
                Return Me.columnDesignacaoInversa
            End Get
        End Property
        
        Friend ReadOnly Property ThesaurusColumn As DataColumn
            Get
                Return Me.columnThesaurus
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoControloAutRelRow
            Get
                Return CType(Me.Rows(index),TipoControloAutRelRow)
            End Get
        End Property
        
        Public Event TipoControloAutRelRowChanged As TipoControloAutRelRowChangeEventHandler
        
        Public Event TipoControloAutRelRowChanging As TipoControloAutRelRowChangeEventHandler
        
        Public Event TipoControloAutRelRowDeleted As TipoControloAutRelRowChangeEventHandler
        
        Public Event TipoControloAutRelRowDeleting As TipoControloAutRelRowChangeEventHandler
        
        Public Overloads Sub AddTipoControloAutRelRow(ByVal row As TipoControloAutRelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoControloAutRelRow(ByVal Designacao As String, ByVal DesignacaoInversa As String, ByVal Thesaurus As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoControloAutRelRow
            Dim rowTipoControloAutRelRow As TipoControloAutRelRow = CType(Me.NewRow,TipoControloAutRelRow)
            rowTipoControloAutRelRow.ItemArray = New Object() {Nothing, Designacao, DesignacaoInversa, Thesaurus, Versao, isDeleted}
            Me.Rows.Add(rowTipoControloAutRelRow)
            Return rowTipoControloAutRelRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoControloAutRelRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoControloAutRelRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoControloAutRelDataTable = CType(MyBase.Clone,TipoControloAutRelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoControloAutRelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnDesignacaoInversa = Me.Columns("DesignacaoInversa")
            Me.columnThesaurus = Me.Columns("Thesaurus")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnDesignacaoInversa = New DataColumn("DesignacaoInversa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacaoInversa)
            Me.columnThesaurus = New DataColumn("Thesaurus", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThesaurus)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnDesignacaoInversa.MaxLength = 50
            Me.columnThesaurus.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoControloAutRelRow() As TipoControloAutRelRow
            Return CType(Me.NewRow,TipoControloAutRelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoControloAutRelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoControloAutRelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoControloAutRelRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoControloAutRelRowChanged(Me, New TipoControloAutRelRowChangeEvent(CType(e.Row,TipoControloAutRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoControloAutRelRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoControloAutRelRowChanging(Me, New TipoControloAutRelRowChangeEvent(CType(e.Row,TipoControloAutRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoControloAutRelRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoControloAutRelRowDeleted(Me, New TipoControloAutRelRowChangeEvent(CType(e.Row,TipoControloAutRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoControloAutRelRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoControloAutRelRowDeleting(Me, New TipoControloAutRelRowChangeEvent(CType(e.Row,TipoControloAutRelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoControloAutRelRow(ByVal row As TipoControloAutRelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoControloAutRelRow
        Inherits DataRow
        
        Private tableTipoControloAutRel As TipoControloAutRelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoControloAutRel = CType(Me.Table,TipoControloAutRelDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoControloAutRel.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoControloAutRel.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoControloAutRel.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoControloAutRel.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property DesignacaoInversa As String
            Get
                Try 
                    Return CType(Me(Me.tableTipoControloAutRel.DesignacaoInversaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoControloAutRel.DesignacaoInversaColumn) = value
            End Set
        End Property
        
        Public Property Thesaurus As Boolean
            Get
                Return CType(Me(Me.tableTipoControloAutRel.ThesaurusColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoControloAutRel.ThesaurusColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoControloAutRel.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoControloAutRel.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoControloAutRel.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoControloAutRel.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsDesignacaoInversaNull() As Boolean
            Return Me.IsNull(Me.tableTipoControloAutRel.DesignacaoInversaColumn)
        End Function
        
        Public Sub SetDesignacaoInversaNull()
            Me(Me.tableTipoControloAutRel.DesignacaoInversaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoControloAutRel.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoControloAutRel.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetControloAutRelRows() As ControloAutRelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoControloAutRelControloAutRel")),ControloAutRelRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoControloAutRelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoControloAutRelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoControloAutRelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoControloAutRelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRelacionadoCodigoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDTipoNivelRelacionado As DataColumn
        
        Private columnContador As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoNivelRelacionadoCodigo")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoNivelRelacionadoColumn As DataColumn
            Get
                Return Me.columnIDTipoNivelRelacionado
            End Get
        End Property
        
        Friend ReadOnly Property ContadorColumn As DataColumn
            Get
                Return Me.columnContador
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoNivelRelacionadoCodigoRow
            Get
                Return CType(Me.Rows(index),TipoNivelRelacionadoCodigoRow)
            End Get
        End Property
        
        Public Event TipoNivelRelacionadoCodigoRowChanged As TipoNivelRelacionadoCodigoRowChangeEventHandler
        
        Public Event TipoNivelRelacionadoCodigoRowChanging As TipoNivelRelacionadoCodigoRowChangeEventHandler
        
        Public Event TipoNivelRelacionadoCodigoRowDeleted As TipoNivelRelacionadoCodigoRowChangeEventHandler
        
        Public Event TipoNivelRelacionadoCodigoRowDeleting As TipoNivelRelacionadoCodigoRowChangeEventHandler
        
        Public Overloads Sub AddTipoNivelRelacionadoCodigoRow(ByVal row As TipoNivelRelacionadoCodigoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoNivelRelacionadoCodigoRow(ByVal parentTipoNivelRelacionadoRowByTipoNivelRelacionadoTipoNivelRelacionadoCodigo As TipoNivelRelacionadoRow, ByVal Contador As Decimal, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoNivelRelacionadoCodigoRow
            Dim rowTipoNivelRelacionadoCodigoRow As TipoNivelRelacionadoCodigoRow = CType(Me.NewRow,TipoNivelRelacionadoCodigoRow)
            rowTipoNivelRelacionadoCodigoRow.ItemArray = New Object() {parentTipoNivelRelacionadoRowByTipoNivelRelacionadoTipoNivelRelacionadoCodigo(0), Contador, Versao, isDeleted}
            Me.Rows.Add(rowTipoNivelRelacionadoCodigoRow)
            Return rowTipoNivelRelacionadoCodigoRow
        End Function
        
        Public Function FindByIDTipoNivelRelacionado(ByVal IDTipoNivelRelacionado As Long) As TipoNivelRelacionadoCodigoRow
            Return CType(Me.Rows.Find(New Object() {IDTipoNivelRelacionado}),TipoNivelRelacionadoCodigoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoNivelRelacionadoCodigoDataTable = CType(MyBase.Clone,TipoNivelRelacionadoCodigoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoNivelRelacionadoCodigoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDTipoNivelRelacionado = Me.Columns("IDTipoNivelRelacionado")
            Me.columnContador = Me.Columns("Contador")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDTipoNivelRelacionado = New DataColumn("IDTipoNivelRelacionado", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoNivelRelacionado)
            Me.columnContador = New DataColumn("Contador", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContador)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDTipoNivelRelacionado}, true))
            Me.columnIDTipoNivelRelacionado.AllowDBNull = false
            Me.columnIDTipoNivelRelacionado.Unique = true
            Me.columnContador.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoNivelRelacionadoCodigoRow() As TipoNivelRelacionadoCodigoRow
            Return CType(Me.NewRow,TipoNivelRelacionadoCodigoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoNivelRelacionadoCodigoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoNivelRelacionadoCodigoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoNivelRelacionadoCodigoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoCodigoRowChanged(Me, New TipoNivelRelacionadoCodigoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoCodigoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoNivelRelacionadoCodigoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoCodigoRowChanging(Me, New TipoNivelRelacionadoCodigoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoCodigoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoNivelRelacionadoCodigoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoCodigoRowDeleted(Me, New TipoNivelRelacionadoCodigoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoCodigoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoNivelRelacionadoCodigoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoCodigoRowDeleting(Me, New TipoNivelRelacionadoCodigoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoCodigoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoNivelRelacionadoCodigoRow(ByVal row As TipoNivelRelacionadoCodigoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRelacionadoCodigoRow
        Inherits DataRow
        
        Private tableTipoNivelRelacionadoCodigo As TipoNivelRelacionadoCodigoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoNivelRelacionadoCodigo = CType(Me.Table,TipoNivelRelacionadoCodigoDataTable)
        End Sub
        
        Public Property IDTipoNivelRelacionado As Long
            Get
                Return CType(Me(Me.tableTipoNivelRelacionadoCodigo.IDTipoNivelRelacionadoColumn),Long)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionadoCodigo.IDTipoNivelRelacionadoColumn) = value
            End Set
        End Property
        
        Public Property Contador As Decimal
            Get
                Return CType(Me(Me.tableTipoNivelRelacionadoCodigo.ContadorColumn),Decimal)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionadoCodigo.ContadorColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoNivelRelacionadoCodigo.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoNivelRelacionadoCodigo.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoNivelRelacionadoCodigo.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionadoCodigo.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoNivelRelacionadoRow As TipoNivelRelacionadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNivelRelacionadoTipoNivelRelacionadoCodigo")),TipoNivelRelacionadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNivelRelacionadoTipoNivelRelacionadoCodigo"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoNivelRelacionadoCodigo.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoNivelRelacionadoCodigo.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRelacionadoCodigoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoNivelRelacionadoCodigoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoNivelRelacionadoCodigoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoNivelRelacionadoCodigoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoControloAutFormaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoControloAutForma")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoControloAutFormaRow
            Get
                Return CType(Me.Rows(index),TipoControloAutFormaRow)
            End Get
        End Property
        
        Public Event TipoControloAutFormaRowChanged As TipoControloAutFormaRowChangeEventHandler
        
        Public Event TipoControloAutFormaRowChanging As TipoControloAutFormaRowChangeEventHandler
        
        Public Event TipoControloAutFormaRowDeleted As TipoControloAutFormaRowChangeEventHandler
        
        Public Event TipoControloAutFormaRowDeleting As TipoControloAutFormaRowChangeEventHandler
        
        Public Overloads Sub AddTipoControloAutFormaRow(ByVal row As TipoControloAutFormaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoControloAutFormaRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoControloAutFormaRow
            Dim rowTipoControloAutFormaRow As TipoControloAutFormaRow = CType(Me.NewRow,TipoControloAutFormaRow)
            rowTipoControloAutFormaRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoControloAutFormaRow)
            Return rowTipoControloAutFormaRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoControloAutFormaRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoControloAutFormaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoControloAutFormaDataTable = CType(MyBase.Clone,TipoControloAutFormaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoControloAutFormaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoControloAutFormaRow() As TipoControloAutFormaRow
            Return CType(Me.NewRow,TipoControloAutFormaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoControloAutFormaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoControloAutFormaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoControloAutFormaRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoControloAutFormaRowChanged(Me, New TipoControloAutFormaRowChangeEvent(CType(e.Row,TipoControloAutFormaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoControloAutFormaRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoControloAutFormaRowChanging(Me, New TipoControloAutFormaRowChangeEvent(CType(e.Row,TipoControloAutFormaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoControloAutFormaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoControloAutFormaRowDeleted(Me, New TipoControloAutFormaRowChangeEvent(CType(e.Row,TipoControloAutFormaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoControloAutFormaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoControloAutFormaRowDeleting(Me, New TipoControloAutFormaRowChangeEvent(CType(e.Row,TipoControloAutFormaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoControloAutFormaRow(ByVal row As TipoControloAutFormaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoControloAutFormaRow
        Inherits DataRow
        
        Private tableTipoControloAutForma As TipoControloAutFormaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoControloAutForma = CType(Me.Table,TipoControloAutFormaDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoControloAutForma.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoControloAutForma.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoControloAutForma.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoControloAutForma.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoControloAutForma.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoControloAutForma.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoControloAutForma.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoControloAutForma.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoControloAutForma.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoControloAutForma.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetControloAutDicionarioRows() As ControloAutDicionarioRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoControloAutFormaControloAutDicionario")),ControloAutDicionarioRow())
        End Function
        
        Public Function GetTipoNoticiaATipoControloAFormaRows() As TipoNoticiaATipoControloAFormaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoControloAutFormaTipoNoticiaATipoControloAForma")),TipoNoticiaATipoControloAFormaRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoControloAutFormaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoControloAutFormaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoControloAutFormaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoControloAutFormaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso15924DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnScriptNameEnglish As DataColumn
        
        Private columnCodeAlpha2 As DataColumn
        
        Private columnCodeAlpha3 As DataColumn
        
        Private columnCodeNumeric As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("Iso15924")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property ScriptNameEnglishColumn As DataColumn
            Get
                Return Me.columnScriptNameEnglish
            End Get
        End Property
        
        Friend ReadOnly Property CodeAlpha2Column As DataColumn
            Get
                Return Me.columnCodeAlpha2
            End Get
        End Property
        
        Friend ReadOnly Property CodeAlpha3Column As DataColumn
            Get
                Return Me.columnCodeAlpha3
            End Get
        End Property
        
        Friend ReadOnly Property CodeNumericColumn As DataColumn
            Get
                Return Me.columnCodeNumeric
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Iso15924Row
            Get
                Return CType(Me.Rows(index),Iso15924Row)
            End Get
        End Property
        
        Public Event Iso15924RowChanged As Iso15924RowChangeEventHandler
        
        Public Event Iso15924RowChanging As Iso15924RowChangeEventHandler
        
        Public Event Iso15924RowDeleted As Iso15924RowChangeEventHandler
        
        Public Event Iso15924RowDeleting As Iso15924RowChangeEventHandler
        
        Public Overloads Sub AddIso15924Row(ByVal row As Iso15924Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIso15924Row(ByVal ScriptNameEnglish As String, ByVal CodeAlpha2 As String, ByVal CodeAlpha3 As String, ByVal CodeNumeric As Decimal, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As Iso15924Row
            Dim rowIso15924Row As Iso15924Row = CType(Me.NewRow,Iso15924Row)
            rowIso15924Row.ItemArray = New Object() {Nothing, ScriptNameEnglish, CodeAlpha2, CodeAlpha3, CodeNumeric, Versao, isDeleted}
            Me.Rows.Add(rowIso15924Row)
            Return rowIso15924Row
        End Function
        
        Public Function FindByID(ByVal ID As Long) As Iso15924Row
            Return CType(Me.Rows.Find(New Object() {ID}),Iso15924Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Iso15924DataTable = CType(MyBase.Clone,Iso15924DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Iso15924DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnScriptNameEnglish = Me.Columns("ScriptNameEnglish")
            Me.columnCodeAlpha2 = Me.Columns("CodeAlpha2")
            Me.columnCodeAlpha3 = Me.Columns("CodeAlpha3")
            Me.columnCodeNumeric = Me.Columns("CodeNumeric")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnScriptNameEnglish = New DataColumn("ScriptNameEnglish", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScriptNameEnglish)
            Me.columnCodeAlpha2 = New DataColumn("CodeAlpha2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodeAlpha2)
            Me.columnCodeAlpha3 = New DataColumn("CodeAlpha3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodeAlpha3)
            Me.columnCodeNumeric = New DataColumn("CodeNumeric", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodeNumeric)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnScriptNameEnglish.AllowDBNull = false
            Me.columnScriptNameEnglish.MaxLength = 50
            Me.columnCodeAlpha2.AllowDBNull = false
            Me.columnCodeAlpha2.MaxLength = 2
            Me.columnCodeAlpha3.AllowDBNull = false
            Me.columnCodeAlpha3.MaxLength = 3
            Me.columnCodeNumeric.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewIso15924Row() As Iso15924Row
            Return CType(Me.NewRow,Iso15924Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Iso15924Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Iso15924Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Iso15924RowChangedEvent) Is Nothing) Then
                RaiseEvent Iso15924RowChanged(Me, New Iso15924RowChangeEvent(CType(e.Row,Iso15924Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Iso15924RowChangingEvent) Is Nothing) Then
                RaiseEvent Iso15924RowChanging(Me, New Iso15924RowChangeEvent(CType(e.Row,Iso15924Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Iso15924RowDeletedEvent) Is Nothing) Then
                RaiseEvent Iso15924RowDeleted(Me, New Iso15924RowChangeEvent(CType(e.Row,Iso15924Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Iso15924RowDeletingEvent) Is Nothing) Then
                RaiseEvent Iso15924RowDeleting(Me, New Iso15924RowChangeEvent(CType(e.Row,Iso15924Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIso15924Row(ByVal row As Iso15924Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso15924Row
        Inherits DataRow
        
        Private tableIso15924 As Iso15924DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIso15924 = CType(Me.Table,Iso15924DataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableIso15924.IDColumn),Long)
            End Get
            Set
                Me(Me.tableIso15924.IDColumn) = value
            End Set
        End Property
        
        Public Property ScriptNameEnglish As String
            Get
                Return CType(Me(Me.tableIso15924.ScriptNameEnglishColumn),String)
            End Get
            Set
                Me(Me.tableIso15924.ScriptNameEnglishColumn) = value
            End Set
        End Property
        
        Public Property CodeAlpha2 As String
            Get
                Return CType(Me(Me.tableIso15924.CodeAlpha2Column),String)
            End Get
            Set
                Me(Me.tableIso15924.CodeAlpha2Column) = value
            End Set
        End Property
        
        Public Property CodeAlpha3 As String
            Get
                Return CType(Me(Me.tableIso15924.CodeAlpha3Column),String)
            End Get
            Set
                Me(Me.tableIso15924.CodeAlpha3Column) = value
            End Set
        End Property
        
        Public Property CodeNumeric As Decimal
            Get
                Return CType(Me(Me.tableIso15924.CodeNumericColumn),Decimal)
            End Get
            Set
                Me(Me.tableIso15924.CodeNumericColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableIso15924.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIso15924.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableIso15924.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableIso15924.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableIso15924.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableIso15924.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetControloAutRows() As ControloAutRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Iso15924ControloAut")),ControloAutRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso15924RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Iso15924Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Iso15924Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Iso15924Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoEliminacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("AutoEliminacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AutoEliminacaoRow
            Get
                Return CType(Me.Rows(index),AutoEliminacaoRow)
            End Get
        End Property
        
        Public Event AutoEliminacaoRowChanged As AutoEliminacaoRowChangeEventHandler
        
        Public Event AutoEliminacaoRowChanging As AutoEliminacaoRowChangeEventHandler
        
        Public Event AutoEliminacaoRowDeleted As AutoEliminacaoRowChangeEventHandler
        
        Public Event AutoEliminacaoRowDeleting As AutoEliminacaoRowChangeEventHandler
        
        Public Overloads Sub AddAutoEliminacaoRow(ByVal row As AutoEliminacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAutoEliminacaoRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As AutoEliminacaoRow
            Dim rowAutoEliminacaoRow As AutoEliminacaoRow = CType(Me.NewRow,AutoEliminacaoRow)
            rowAutoEliminacaoRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowAutoEliminacaoRow)
            Return rowAutoEliminacaoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As AutoEliminacaoRow
            Return CType(Me.Rows.Find(New Object() {ID}),AutoEliminacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AutoEliminacaoDataTable = CType(MyBase.Clone,AutoEliminacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AutoEliminacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnDesignacao}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.Unique = true
            Me.columnDesignacao.MaxLength = 400
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewAutoEliminacaoRow() As AutoEliminacaoRow
            Return CType(Me.NewRow,AutoEliminacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AutoEliminacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AutoEliminacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AutoEliminacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent AutoEliminacaoRowChanged(Me, New AutoEliminacaoRowChangeEvent(CType(e.Row,AutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AutoEliminacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent AutoEliminacaoRowChanging(Me, New AutoEliminacaoRowChangeEvent(CType(e.Row,AutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AutoEliminacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent AutoEliminacaoRowDeleted(Me, New AutoEliminacaoRowChangeEvent(CType(e.Row,AutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AutoEliminacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent AutoEliminacaoRowDeleting(Me, New AutoEliminacaoRowChangeEvent(CType(e.Row,AutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAutoEliminacaoRow(ByVal row As AutoEliminacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoEliminacaoRow
        Inherits DataRow
        
        Private tableAutoEliminacao As AutoEliminacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAutoEliminacao = CType(Me.Table,AutoEliminacaoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableAutoEliminacao.IDColumn),Long)
            End Get
            Set
                Me(Me.tableAutoEliminacao.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableAutoEliminacao.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableAutoEliminacao.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableAutoEliminacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAutoEliminacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableAutoEliminacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableAutoEliminacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableAutoEliminacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableAutoEliminacao.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFAutoEliminacaoRows() As SFRDUFAutoEliminacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AutoEliminacaoSFRDUFAutoEliminacao")),SFRDUFAutoEliminacaoRow())
        End Function
        
        Public Function GetSFRDAvaliacaoRows() As SFRDAvaliacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AutoEliminacaoSFRDAvaliacao")),SFRDAvaliacaoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AutoEliminacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AutoEliminacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AutoEliminacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AutoEliminacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso639DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnLanguageNameEnglish As DataColumn
        
        Private columnBibliographicCodeAlpha3 As DataColumn
        
        Private columnTerminologyCodeAlpha3 As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("Iso639")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property LanguageNameEnglishColumn As DataColumn
            Get
                Return Me.columnLanguageNameEnglish
            End Get
        End Property
        
        Friend ReadOnly Property BibliographicCodeAlpha3Column As DataColumn
            Get
                Return Me.columnBibliographicCodeAlpha3
            End Get
        End Property
        
        Friend ReadOnly Property TerminologyCodeAlpha3Column As DataColumn
            Get
                Return Me.columnTerminologyCodeAlpha3
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Iso639Row
            Get
                Return CType(Me.Rows(index),Iso639Row)
            End Get
        End Property
        
        Public Event Iso639RowChanged As Iso639RowChangeEventHandler
        
        Public Event Iso639RowChanging As Iso639RowChangeEventHandler
        
        Public Event Iso639RowDeleted As Iso639RowChangeEventHandler
        
        Public Event Iso639RowDeleting As Iso639RowChangeEventHandler
        
        Public Overloads Sub AddIso639Row(ByVal row As Iso639Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIso639Row(ByVal LanguageNameEnglish As String, ByVal BibliographicCodeAlpha3 As String, ByVal TerminologyCodeAlpha3 As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As Iso639Row
            Dim rowIso639Row As Iso639Row = CType(Me.NewRow,Iso639Row)
            rowIso639Row.ItemArray = New Object() {Nothing, LanguageNameEnglish, BibliographicCodeAlpha3, TerminologyCodeAlpha3, Versao, isDeleted}
            Me.Rows.Add(rowIso639Row)
            Return rowIso639Row
        End Function
        
        Public Function FindByID(ByVal ID As Long) As Iso639Row
            Return CType(Me.Rows.Find(New Object() {ID}),Iso639Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Iso639DataTable = CType(MyBase.Clone,Iso639DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Iso639DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnLanguageNameEnglish = Me.Columns("LanguageNameEnglish")
            Me.columnBibliographicCodeAlpha3 = Me.Columns("BibliographicCodeAlpha3")
            Me.columnTerminologyCodeAlpha3 = Me.Columns("TerminologyCodeAlpha3")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnLanguageNameEnglish = New DataColumn("LanguageNameEnglish", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLanguageNameEnglish)
            Me.columnBibliographicCodeAlpha3 = New DataColumn("BibliographicCodeAlpha3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBibliographicCodeAlpha3)
            Me.columnTerminologyCodeAlpha3 = New DataColumn("TerminologyCodeAlpha3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTerminologyCodeAlpha3)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnLanguageNameEnglish.AllowDBNull = false
            Me.columnLanguageNameEnglish.MaxLength = 50
            Me.columnBibliographicCodeAlpha3.AllowDBNull = false
            Me.columnBibliographicCodeAlpha3.MaxLength = 3
            Me.columnTerminologyCodeAlpha3.AllowDBNull = false
            Me.columnTerminologyCodeAlpha3.MaxLength = 3
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewIso639Row() As Iso639Row
            Return CType(Me.NewRow,Iso639Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Iso639Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Iso639Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Iso639RowChangedEvent) Is Nothing) Then
                RaiseEvent Iso639RowChanged(Me, New Iso639RowChangeEvent(CType(e.Row,Iso639Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Iso639RowChangingEvent) Is Nothing) Then
                RaiseEvent Iso639RowChanging(Me, New Iso639RowChangeEvent(CType(e.Row,Iso639Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Iso639RowDeletedEvent) Is Nothing) Then
                RaiseEvent Iso639RowDeleted(Me, New Iso639RowChangeEvent(CType(e.Row,Iso639Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Iso639RowDeletingEvent) Is Nothing) Then
                RaiseEvent Iso639RowDeleting(Me, New Iso639RowChangeEvent(CType(e.Row,Iso639Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIso639Row(ByVal row As Iso639Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso639Row
        Inherits DataRow
        
        Private tableIso639 As Iso639DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIso639 = CType(Me.Table,Iso639DataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableIso639.IDColumn),Long)
            End Get
            Set
                Me(Me.tableIso639.IDColumn) = value
            End Set
        End Property
        
        Public Property LanguageNameEnglish As String
            Get
                Return CType(Me(Me.tableIso639.LanguageNameEnglishColumn),String)
            End Get
            Set
                Me(Me.tableIso639.LanguageNameEnglishColumn) = value
            End Set
        End Property
        
        Public Property BibliographicCodeAlpha3 As String
            Get
                Return CType(Me(Me.tableIso639.BibliographicCodeAlpha3Column),String)
            End Get
            Set
                Me(Me.tableIso639.BibliographicCodeAlpha3Column) = value
            End Set
        End Property
        
        Public Property TerminologyCodeAlpha3 As String
            Get
                Return CType(Me(Me.tableIso639.TerminologyCodeAlpha3Column),String)
            End Get
            Set
                Me(Me.tableIso639.TerminologyCodeAlpha3Column) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableIso639.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIso639.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableIso639.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableIso639.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableIso639.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableIso639.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetControloAutRows() As ControloAutRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Iso639ControloAut")),ControloAutRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso639RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Iso639Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Iso639Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Iso639Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTecnicasDeRegistoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoTecnicasDeRegisto")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoTecnicasDeRegistoRow
            Get
                Return CType(Me.Rows(index),TipoTecnicasDeRegistoRow)
            End Get
        End Property
        
        Public Event TipoTecnicasDeRegistoRowChanged As TipoTecnicasDeRegistoRowChangeEventHandler
        
        Public Event TipoTecnicasDeRegistoRowChanging As TipoTecnicasDeRegistoRowChangeEventHandler
        
        Public Event TipoTecnicasDeRegistoRowDeleted As TipoTecnicasDeRegistoRowChangeEventHandler
        
        Public Event TipoTecnicasDeRegistoRowDeleting As TipoTecnicasDeRegistoRowChangeEventHandler
        
        Public Overloads Sub AddTipoTecnicasDeRegistoRow(ByVal row As TipoTecnicasDeRegistoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoTecnicasDeRegistoRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoTecnicasDeRegistoRow
            Dim rowTipoTecnicasDeRegistoRow As TipoTecnicasDeRegistoRow = CType(Me.NewRow,TipoTecnicasDeRegistoRow)
            rowTipoTecnicasDeRegistoRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoTecnicasDeRegistoRow)
            Return rowTipoTecnicasDeRegistoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoTecnicasDeRegistoRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoTecnicasDeRegistoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoTecnicasDeRegistoDataTable = CType(MyBase.Clone,TipoTecnicasDeRegistoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoTecnicasDeRegistoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoTecnicasDeRegistoRow() As TipoTecnicasDeRegistoRow
            Return CType(Me.NewRow,TipoTecnicasDeRegistoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoTecnicasDeRegistoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoTecnicasDeRegistoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoTecnicasDeRegistoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoTecnicasDeRegistoRowChanged(Me, New TipoTecnicasDeRegistoRowChangeEvent(CType(e.Row,TipoTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoTecnicasDeRegistoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoTecnicasDeRegistoRowChanging(Me, New TipoTecnicasDeRegistoRowChangeEvent(CType(e.Row,TipoTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoTecnicasDeRegistoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoTecnicasDeRegistoRowDeleted(Me, New TipoTecnicasDeRegistoRowChangeEvent(CType(e.Row,TipoTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoTecnicasDeRegistoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoTecnicasDeRegistoRowDeleting(Me, New TipoTecnicasDeRegistoRowChangeEvent(CType(e.Row,TipoTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoTecnicasDeRegistoRow(ByVal row As TipoTecnicasDeRegistoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTecnicasDeRegistoRow
        Inherits DataRow
        
        Private tableTipoTecnicasDeRegisto As TipoTecnicasDeRegistoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoTecnicasDeRegisto = CType(Me.Table,TipoTecnicasDeRegistoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoTecnicasDeRegisto.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoTecnicasDeRegisto.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoTecnicasDeRegisto.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoTecnicasDeRegisto.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoTecnicasDeRegisto.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoTecnicasDeRegisto.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoTecnicasDeRegisto.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoTecnicasDeRegisto.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoTecnicasDeRegisto.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoTecnicasDeRegisto.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDTecnicasDeRegistoRows() As SFRDTecnicasDeRegistoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoTecnicasDeRegistoSFRDTecnicasDeRegisto")),SFRDTecnicasDeRegistoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTecnicasDeRegistoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoTecnicasDeRegistoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoTecnicasDeRegistoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoTecnicasDeRegistoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNoticiaAutDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnConteudo As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoNoticiaAut")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property ConteudoColumn As DataColumn
            Get
                Return Me.columnConteudo
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoNoticiaAutRow
            Get
                Return CType(Me.Rows(index),TipoNoticiaAutRow)
            End Get
        End Property
        
        Public Event TipoNoticiaAutRowChanged As TipoNoticiaAutRowChangeEventHandler
        
        Public Event TipoNoticiaAutRowChanging As TipoNoticiaAutRowChangeEventHandler
        
        Public Event TipoNoticiaAutRowDeleted As TipoNoticiaAutRowChangeEventHandler
        
        Public Event TipoNoticiaAutRowDeleting As TipoNoticiaAutRowChangeEventHandler
        
        Public Overloads Sub AddTipoNoticiaAutRow(ByVal row As TipoNoticiaAutRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoNoticiaAutRow(ByVal Designacao As String, ByVal Conteudo As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoNoticiaAutRow
            Dim rowTipoNoticiaAutRow As TipoNoticiaAutRow = CType(Me.NewRow,TipoNoticiaAutRow)
            rowTipoNoticiaAutRow.ItemArray = New Object() {Nothing, Designacao, Conteudo, Versao, isDeleted}
            Me.Rows.Add(rowTipoNoticiaAutRow)
            Return rowTipoNoticiaAutRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoNoticiaAutRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoNoticiaAutRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoNoticiaAutDataTable = CType(MyBase.Clone,TipoNoticiaAutDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoNoticiaAutDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnConteudo = Me.Columns("Conteudo")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnConteudo = New DataColumn("Conteudo", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConteudo)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnConteudo.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoNoticiaAutRow() As TipoNoticiaAutRow
            Return CType(Me.NewRow,TipoNoticiaAutRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoNoticiaAutRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoNoticiaAutRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoNoticiaAutRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaAutRowChanged(Me, New TipoNoticiaAutRowChangeEvent(CType(e.Row,TipoNoticiaAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoNoticiaAutRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaAutRowChanging(Me, New TipoNoticiaAutRowChangeEvent(CType(e.Row,TipoNoticiaAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoNoticiaAutRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaAutRowDeleted(Me, New TipoNoticiaAutRowChangeEvent(CType(e.Row,TipoNoticiaAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoNoticiaAutRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoNoticiaAutRowDeleting(Me, New TipoNoticiaAutRowChangeEvent(CType(e.Row,TipoNoticiaAutRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoNoticiaAutRow(ByVal row As TipoNoticiaAutRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNoticiaAutRow
        Inherits DataRow
        
        Private tableTipoNoticiaAut As TipoNoticiaAutDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoNoticiaAut = CType(Me.Table,TipoNoticiaAutDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoNoticiaAut.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoNoticiaAut.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoNoticiaAut.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoNoticiaAut.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Conteudo As Boolean
            Get
                Return CType(Me(Me.tableTipoNoticiaAut.ConteudoColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNoticiaAut.ConteudoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoNoticiaAut.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoNoticiaAut.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoNoticiaAut.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNoticiaAut.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoNoticiaAut.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoNoticiaAut.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTipoNoticiaATipoControloAFormaRows() As TipoNoticiaATipoControloAFormaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNoticiaAutTipoNoticiaATipoControloAForma")),TipoNoticiaATipoControloAFormaRow())
        End Function
        
        Public Function GetControloAutRows() As ControloAutRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNoticiaAutControloAut")),ControloAutRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNoticiaAutRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoNoticiaAutRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoNoticiaAutRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoNoticiaAutRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFormaSuporteAcondDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoFormaSuporteAcond")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoFormaSuporteAcondRow
            Get
                Return CType(Me.Rows(index),TipoFormaSuporteAcondRow)
            End Get
        End Property
        
        Public Event TipoFormaSuporteAcondRowChanged As TipoFormaSuporteAcondRowChangeEventHandler
        
        Public Event TipoFormaSuporteAcondRowChanging As TipoFormaSuporteAcondRowChangeEventHandler
        
        Public Event TipoFormaSuporteAcondRowDeleted As TipoFormaSuporteAcondRowChangeEventHandler
        
        Public Event TipoFormaSuporteAcondRowDeleting As TipoFormaSuporteAcondRowChangeEventHandler
        
        Public Overloads Sub AddTipoFormaSuporteAcondRow(ByVal row As TipoFormaSuporteAcondRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoFormaSuporteAcondRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoFormaSuporteAcondRow
            Dim rowTipoFormaSuporteAcondRow As TipoFormaSuporteAcondRow = CType(Me.NewRow,TipoFormaSuporteAcondRow)
            rowTipoFormaSuporteAcondRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoFormaSuporteAcondRow)
            Return rowTipoFormaSuporteAcondRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoFormaSuporteAcondRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoFormaSuporteAcondRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoFormaSuporteAcondDataTable = CType(MyBase.Clone,TipoFormaSuporteAcondDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoFormaSuporteAcondDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoFormaSuporteAcondRow() As TipoFormaSuporteAcondRow
            Return CType(Me.NewRow,TipoFormaSuporteAcondRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoFormaSuporteAcondRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoFormaSuporteAcondRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoFormaSuporteAcondRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoFormaSuporteAcondRowChanged(Me, New TipoFormaSuporteAcondRowChangeEvent(CType(e.Row,TipoFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoFormaSuporteAcondRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoFormaSuporteAcondRowChanging(Me, New TipoFormaSuporteAcondRowChangeEvent(CType(e.Row,TipoFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoFormaSuporteAcondRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoFormaSuporteAcondRowDeleted(Me, New TipoFormaSuporteAcondRowChangeEvent(CType(e.Row,TipoFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoFormaSuporteAcondRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoFormaSuporteAcondRowDeleting(Me, New TipoFormaSuporteAcondRowChangeEvent(CType(e.Row,TipoFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoFormaSuporteAcondRow(ByVal row As TipoFormaSuporteAcondRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFormaSuporteAcondRow
        Inherits DataRow
        
        Private tableTipoFormaSuporteAcond As TipoFormaSuporteAcondDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoFormaSuporteAcond = CType(Me.Table,TipoFormaSuporteAcondDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoFormaSuporteAcond.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoFormaSuporteAcond.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoFormaSuporteAcond.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoFormaSuporteAcond.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoFormaSuporteAcond.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoFormaSuporteAcond.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoFormaSuporteAcond.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoFormaSuporteAcond.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoFormaSuporteAcond.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoFormaSuporteAcond.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDFormaSuporteAcondRows() As SFRDFormaSuporteAcondRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoFormaSuporteAcondSFRDFormaSuporteAcond")),SFRDFormaSuporteAcondRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFormaSuporteAcondRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoFormaSuporteAcondRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoFormaSuporteAcondRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoFormaSuporteAcondRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEstadoDeConservacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoEstadoDeConservacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoEstadoDeConservacaoRow
            Get
                Return CType(Me.Rows(index),TipoEstadoDeConservacaoRow)
            End Get
        End Property
        
        Public Event TipoEstadoDeConservacaoRowChanged As TipoEstadoDeConservacaoRowChangeEventHandler
        
        Public Event TipoEstadoDeConservacaoRowChanging As TipoEstadoDeConservacaoRowChangeEventHandler
        
        Public Event TipoEstadoDeConservacaoRowDeleted As TipoEstadoDeConservacaoRowChangeEventHandler
        
        Public Event TipoEstadoDeConservacaoRowDeleting As TipoEstadoDeConservacaoRowChangeEventHandler
        
        Public Overloads Sub AddTipoEstadoDeConservacaoRow(ByVal row As TipoEstadoDeConservacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoEstadoDeConservacaoRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoEstadoDeConservacaoRow
            Dim rowTipoEstadoDeConservacaoRow As TipoEstadoDeConservacaoRow = CType(Me.NewRow,TipoEstadoDeConservacaoRow)
            rowTipoEstadoDeConservacaoRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoEstadoDeConservacaoRow)
            Return rowTipoEstadoDeConservacaoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoEstadoDeConservacaoRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoEstadoDeConservacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoEstadoDeConservacaoDataTable = CType(MyBase.Clone,TipoEstadoDeConservacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoEstadoDeConservacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoEstadoDeConservacaoRow() As TipoEstadoDeConservacaoRow
            Return CType(Me.NewRow,TipoEstadoDeConservacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoEstadoDeConservacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoEstadoDeConservacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoEstadoDeConservacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoEstadoDeConservacaoRowChanged(Me, New TipoEstadoDeConservacaoRowChangeEvent(CType(e.Row,TipoEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoEstadoDeConservacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoEstadoDeConservacaoRowChanging(Me, New TipoEstadoDeConservacaoRowChangeEvent(CType(e.Row,TipoEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoEstadoDeConservacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoEstadoDeConservacaoRowDeleted(Me, New TipoEstadoDeConservacaoRowChangeEvent(CType(e.Row,TipoEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoEstadoDeConservacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoEstadoDeConservacaoRowDeleting(Me, New TipoEstadoDeConservacaoRowChangeEvent(CType(e.Row,TipoEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoEstadoDeConservacaoRow(ByVal row As TipoEstadoDeConservacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEstadoDeConservacaoRow
        Inherits DataRow
        
        Private tableTipoEstadoDeConservacao As TipoEstadoDeConservacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoEstadoDeConservacao = CType(Me.Table,TipoEstadoDeConservacaoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoEstadoDeConservacao.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoEstadoDeConservacao.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoEstadoDeConservacao.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoEstadoDeConservacao.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoEstadoDeConservacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoEstadoDeConservacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoEstadoDeConservacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoEstadoDeConservacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoEstadoDeConservacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoEstadoDeConservacao.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDEstadoDeConservacaoRows() As SFRDEstadoDeConservacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoEstadoDeConservacaoSFRDEstadoDeConservacao")),SFRDEstadoDeConservacaoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEstadoDeConservacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoEstadoDeConservacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoEstadoDeConservacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoEstadoDeConservacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoOrdenacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoOrdenacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoOrdenacaoRow
            Get
                Return CType(Me.Rows(index),TipoOrdenacaoRow)
            End Get
        End Property
        
        Public Event TipoOrdenacaoRowChanged As TipoOrdenacaoRowChangeEventHandler
        
        Public Event TipoOrdenacaoRowChanging As TipoOrdenacaoRowChangeEventHandler
        
        Public Event TipoOrdenacaoRowDeleted As TipoOrdenacaoRowChangeEventHandler
        
        Public Event TipoOrdenacaoRowDeleting As TipoOrdenacaoRowChangeEventHandler
        
        Public Overloads Sub AddTipoOrdenacaoRow(ByVal row As TipoOrdenacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoOrdenacaoRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoOrdenacaoRow
            Dim rowTipoOrdenacaoRow As TipoOrdenacaoRow = CType(Me.NewRow,TipoOrdenacaoRow)
            rowTipoOrdenacaoRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoOrdenacaoRow)
            Return rowTipoOrdenacaoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoOrdenacaoRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoOrdenacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoOrdenacaoDataTable = CType(MyBase.Clone,TipoOrdenacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoOrdenacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoOrdenacaoRow() As TipoOrdenacaoRow
            Return CType(Me.NewRow,TipoOrdenacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoOrdenacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoOrdenacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoOrdenacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoOrdenacaoRowChanged(Me, New TipoOrdenacaoRowChangeEvent(CType(e.Row,TipoOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoOrdenacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoOrdenacaoRowChanging(Me, New TipoOrdenacaoRowChangeEvent(CType(e.Row,TipoOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoOrdenacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoOrdenacaoRowDeleted(Me, New TipoOrdenacaoRowChangeEvent(CType(e.Row,TipoOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoOrdenacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoOrdenacaoRowDeleting(Me, New TipoOrdenacaoRowChangeEvent(CType(e.Row,TipoOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoOrdenacaoRow(ByVal row As TipoOrdenacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoOrdenacaoRow
        Inherits DataRow
        
        Private tableTipoOrdenacao As TipoOrdenacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoOrdenacao = CType(Me.Table,TipoOrdenacaoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoOrdenacao.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoOrdenacao.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoOrdenacao.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoOrdenacao.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoOrdenacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoOrdenacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoOrdenacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoOrdenacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoOrdenacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoOrdenacao.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDOrdenacaoRows() As SFRDOrdenacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoOrdenacaoSFRDOrdenacao")),SFRDOrdenacaoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoOrdenacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoOrdenacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoOrdenacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoOrdenacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelUnidadeFisicaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnRefSerie As DataColumn
        
        Private columnGuiaIncorporacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("NivelUnidadeFisica")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property RefSerieColumn As DataColumn
            Get
                Return Me.columnRefSerie
            End Get
        End Property
        
        Friend ReadOnly Property GuiaIncorporacaoColumn As DataColumn
            Get
                Return Me.columnGuiaIncorporacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NivelUnidadeFisicaRow
            Get
                Return CType(Me.Rows(index),NivelUnidadeFisicaRow)
            End Get
        End Property
        
        Public Event NivelUnidadeFisicaRowChanged As NivelUnidadeFisicaRowChangeEventHandler
        
        Public Event NivelUnidadeFisicaRowChanging As NivelUnidadeFisicaRowChangeEventHandler
        
        Public Event NivelUnidadeFisicaRowDeleted As NivelUnidadeFisicaRowChangeEventHandler
        
        Public Event NivelUnidadeFisicaRowDeleting As NivelUnidadeFisicaRowChangeEventHandler
        
        Public Overloads Sub AddNivelUnidadeFisicaRow(ByVal row As NivelUnidadeFisicaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNivelUnidadeFisicaRow(ByVal parentNivelDesignadoRowByNivelDesignadoNivelUnidadeFisica As NivelDesignadoRow, ByVal RefSerie As String, ByVal GuiaIncorporacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As NivelUnidadeFisicaRow
            Dim rowNivelUnidadeFisicaRow As NivelUnidadeFisicaRow = CType(Me.NewRow,NivelUnidadeFisicaRow)
            rowNivelUnidadeFisicaRow.ItemArray = New Object() {parentNivelDesignadoRowByNivelDesignadoNivelUnidadeFisica(0), RefSerie, GuiaIncorporacao, Versao, isDeleted}
            Me.Rows.Add(rowNivelUnidadeFisicaRow)
            Return rowNivelUnidadeFisicaRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As NivelUnidadeFisicaRow
            Return CType(Me.Rows.Find(New Object() {ID}),NivelUnidadeFisicaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NivelUnidadeFisicaDataTable = CType(MyBase.Clone,NivelUnidadeFisicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NivelUnidadeFisicaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnRefSerie = Me.Columns("RefSerie")
            Me.columnGuiaIncorporacao = Me.Columns("GuiaIncorporacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnRefSerie = New DataColumn("RefSerie", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRefSerie)
            Me.columnGuiaIncorporacao = New DataColumn("GuiaIncorporacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGuiaIncorporacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnRefSerie.DefaultValue = ""
            Me.columnRefSerie.MaxLength = 50
            Me.columnGuiaIncorporacao.DefaultValue = ""
            Me.columnGuiaIncorporacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewNivelUnidadeFisicaRow() As NivelUnidadeFisicaRow
            Return CType(Me.NewRow,NivelUnidadeFisicaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NivelUnidadeFisicaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NivelUnidadeFisicaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NivelUnidadeFisicaRowChangedEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaRowChanged(Me, New NivelUnidadeFisicaRowChangeEvent(CType(e.Row,NivelUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NivelUnidadeFisicaRowChangingEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaRowChanging(Me, New NivelUnidadeFisicaRowChangeEvent(CType(e.Row,NivelUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NivelUnidadeFisicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaRowDeleted(Me, New NivelUnidadeFisicaRowChangeEvent(CType(e.Row,NivelUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NivelUnidadeFisicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent NivelUnidadeFisicaRowDeleting(Me, New NivelUnidadeFisicaRowChangeEvent(CType(e.Row,NivelUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNivelUnidadeFisicaRow(ByVal row As NivelUnidadeFisicaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelUnidadeFisicaRow
        Inherits DataRow
        
        Private tableNivelUnidadeFisica As NivelUnidadeFisicaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNivelUnidadeFisica = CType(Me.Table,NivelUnidadeFisicaDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableNivelUnidadeFisica.IDColumn),Long)
            End Get
            Set
                Me(Me.tableNivelUnidadeFisica.IDColumn) = value
            End Set
        End Property
        
        Public Property RefSerie As String
            Get
                Try 
                    Return CType(Me(Me.tableNivelUnidadeFisica.RefSerieColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNivelUnidadeFisica.RefSerieColumn) = value
            End Set
        End Property
        
        Public Property GuiaIncorporacao As String
            Get
                Try 
                    Return CType(Me(Me.tableNivelUnidadeFisica.GuiaIncorporacaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNivelUnidadeFisica.GuiaIncorporacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableNivelUnidadeFisica.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNivelUnidadeFisica.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableNivelUnidadeFisica.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableNivelUnidadeFisica.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property NivelDesignadoRow As NivelDesignadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelDesignadoNivelUnidadeFisica")),NivelDesignadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelDesignadoNivelUnidadeFisica"))
            End Set
        End Property
        
        Public Function IsRefSerieNull() As Boolean
            Return Me.IsNull(Me.tableNivelUnidadeFisica.RefSerieColumn)
        End Function
        
        Public Sub SetRefSerieNull()
            Me(Me.tableNivelUnidadeFisica.RefSerieColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGuiaIncorporacaoNull() As Boolean
            Return Me.IsNull(Me.tableNivelUnidadeFisica.GuiaIncorporacaoColumn)
        End Function
        
        Public Sub SetGuiaIncorporacaoNull()
            Me(Me.tableNivelUnidadeFisica.GuiaIncorporacaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableNivelUnidadeFisica.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableNivelUnidadeFisica.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelUnidadeFisicaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NivelUnidadeFisicaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NivelUnidadeFisicaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NivelUnidadeFisicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTradicaoDocumentalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoTradicaoDocumental")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoTradicaoDocumentalRow
            Get
                Return CType(Me.Rows(index),TipoTradicaoDocumentalRow)
            End Get
        End Property
        
        Public Event TipoTradicaoDocumentalRowChanged As TipoTradicaoDocumentalRowChangeEventHandler
        
        Public Event TipoTradicaoDocumentalRowChanging As TipoTradicaoDocumentalRowChangeEventHandler
        
        Public Event TipoTradicaoDocumentalRowDeleted As TipoTradicaoDocumentalRowChangeEventHandler
        
        Public Event TipoTradicaoDocumentalRowDeleting As TipoTradicaoDocumentalRowChangeEventHandler
        
        Public Overloads Sub AddTipoTradicaoDocumentalRow(ByVal row As TipoTradicaoDocumentalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoTradicaoDocumentalRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoTradicaoDocumentalRow
            Dim rowTipoTradicaoDocumentalRow As TipoTradicaoDocumentalRow = CType(Me.NewRow,TipoTradicaoDocumentalRow)
            rowTipoTradicaoDocumentalRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoTradicaoDocumentalRow)
            Return rowTipoTradicaoDocumentalRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoTradicaoDocumentalRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoTradicaoDocumentalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoTradicaoDocumentalDataTable = CType(MyBase.Clone,TipoTradicaoDocumentalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoTradicaoDocumentalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoTradicaoDocumentalRow() As TipoTradicaoDocumentalRow
            Return CType(Me.NewRow,TipoTradicaoDocumentalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoTradicaoDocumentalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoTradicaoDocumentalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoTradicaoDocumentalRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoTradicaoDocumentalRowChanged(Me, New TipoTradicaoDocumentalRowChangeEvent(CType(e.Row,TipoTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoTradicaoDocumentalRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoTradicaoDocumentalRowChanging(Me, New TipoTradicaoDocumentalRowChangeEvent(CType(e.Row,TipoTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoTradicaoDocumentalRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoTradicaoDocumentalRowDeleted(Me, New TipoTradicaoDocumentalRowChangeEvent(CType(e.Row,TipoTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoTradicaoDocumentalRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoTradicaoDocumentalRowDeleting(Me, New TipoTradicaoDocumentalRowChangeEvent(CType(e.Row,TipoTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoTradicaoDocumentalRow(ByVal row As TipoTradicaoDocumentalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTradicaoDocumentalRow
        Inherits DataRow
        
        Private tableTipoTradicaoDocumental As TipoTradicaoDocumentalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoTradicaoDocumental = CType(Me.Table,TipoTradicaoDocumentalDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoTradicaoDocumental.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoTradicaoDocumental.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoTradicaoDocumental.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoTradicaoDocumental.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoTradicaoDocumental.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoTradicaoDocumental.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoTradicaoDocumental.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoTradicaoDocumental.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoTradicaoDocumental.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoTradicaoDocumental.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDTradicaoDocumentalRows() As SFRDTradicaoDocumentalRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoTradicaoDocumentalSFRDTradicaoDocumental")),SFRDTradicaoDocumentalRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTradicaoDocumentalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoTradicaoDocumentalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoTradicaoDocumentalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoTradicaoDocumentalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMaterialDeSuporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoMaterialDeSuporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoMaterialDeSuporteRow
            Get
                Return CType(Me.Rows(index),TipoMaterialDeSuporteRow)
            End Get
        End Property
        
        Public Event TipoMaterialDeSuporteRowChanged As TipoMaterialDeSuporteRowChangeEventHandler
        
        Public Event TipoMaterialDeSuporteRowChanging As TipoMaterialDeSuporteRowChangeEventHandler
        
        Public Event TipoMaterialDeSuporteRowDeleted As TipoMaterialDeSuporteRowChangeEventHandler
        
        Public Event TipoMaterialDeSuporteRowDeleting As TipoMaterialDeSuporteRowChangeEventHandler
        
        Public Overloads Sub AddTipoMaterialDeSuporteRow(ByVal row As TipoMaterialDeSuporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoMaterialDeSuporteRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoMaterialDeSuporteRow
            Dim rowTipoMaterialDeSuporteRow As TipoMaterialDeSuporteRow = CType(Me.NewRow,TipoMaterialDeSuporteRow)
            rowTipoMaterialDeSuporteRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoMaterialDeSuporteRow)
            Return rowTipoMaterialDeSuporteRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoMaterialDeSuporteRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoMaterialDeSuporteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoMaterialDeSuporteDataTable = CType(MyBase.Clone,TipoMaterialDeSuporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoMaterialDeSuporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoMaterialDeSuporteRow() As TipoMaterialDeSuporteRow
            Return CType(Me.NewRow,TipoMaterialDeSuporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoMaterialDeSuporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoMaterialDeSuporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoMaterialDeSuporteRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoMaterialDeSuporteRowChanged(Me, New TipoMaterialDeSuporteRowChangeEvent(CType(e.Row,TipoMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoMaterialDeSuporteRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoMaterialDeSuporteRowChanging(Me, New TipoMaterialDeSuporteRowChangeEvent(CType(e.Row,TipoMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoMaterialDeSuporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoMaterialDeSuporteRowDeleted(Me, New TipoMaterialDeSuporteRowChangeEvent(CType(e.Row,TipoMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoMaterialDeSuporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoMaterialDeSuporteRowDeleting(Me, New TipoMaterialDeSuporteRowChangeEvent(CType(e.Row,TipoMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoMaterialDeSuporteRow(ByVal row As TipoMaterialDeSuporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMaterialDeSuporteRow
        Inherits DataRow
        
        Private tableTipoMaterialDeSuporte As TipoMaterialDeSuporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoMaterialDeSuporte = CType(Me.Table,TipoMaterialDeSuporteDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoMaterialDeSuporte.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoMaterialDeSuporte.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoMaterialDeSuporte.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoMaterialDeSuporte.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoMaterialDeSuporte.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoMaterialDeSuporte.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoMaterialDeSuporte.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoMaterialDeSuporte.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoMaterialDeSuporte.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoMaterialDeSuporte.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDMaterialDeSuporteRows() As SFRDMaterialDeSuporteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoMaterialDeSuporteSFRDMaterialDeSuporte")),SFRDMaterialDeSuporteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMaterialDeSuporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoMaterialDeSuporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoMaterialDeSuporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoMaterialDeSuporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDAvaliacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDPertinencia As DataColumn
        
        Private columnIDDensidade As DataColumn
        
        Private columnIDSubdensidade As DataColumn
        
        Private columnIDAutoEliminacao As DataColumn
        
        Private columnFrequencia As DataColumn
        
        Private columnPreservar As DataColumn
        
        Private columnPrazoConservacao As DataColumn
        
        Private columnPublicar As DataColumn
        
        Private columnObservacoes As DataColumn
        
        Private columnEnquadramentoLegal As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDAvaliacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDPertinenciaColumn As DataColumn
            Get
                Return Me.columnIDPertinencia
            End Get
        End Property
        
        Friend ReadOnly Property IDDensidadeColumn As DataColumn
            Get
                Return Me.columnIDDensidade
            End Get
        End Property
        
        Friend ReadOnly Property IDSubdensidadeColumn As DataColumn
            Get
                Return Me.columnIDSubdensidade
            End Get
        End Property
        
        Friend ReadOnly Property IDAutoEliminacaoColumn As DataColumn
            Get
                Return Me.columnIDAutoEliminacao
            End Get
        End Property
        
        Friend ReadOnly Property FrequenciaColumn As DataColumn
            Get
                Return Me.columnFrequencia
            End Get
        End Property
        
        Friend ReadOnly Property PreservarColumn As DataColumn
            Get
                Return Me.columnPreservar
            End Get
        End Property
        
        Friend ReadOnly Property PrazoConservacaoColumn As DataColumn
            Get
                Return Me.columnPrazoConservacao
            End Get
        End Property
        
        Friend ReadOnly Property PublicarColumn As DataColumn
            Get
                Return Me.columnPublicar
            End Get
        End Property
        
        Friend ReadOnly Property ObservacoesColumn As DataColumn
            Get
                Return Me.columnObservacoes
            End Get
        End Property
        
        Friend ReadOnly Property EnquadramentoLegalColumn As DataColumn
            Get
                Return Me.columnEnquadramentoLegal
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDAvaliacaoRow
            Get
                Return CType(Me.Rows(index),SFRDAvaliacaoRow)
            End Get
        End Property
        
        Public Event SFRDAvaliacaoRowChanged As SFRDAvaliacaoRowChangeEventHandler
        
        Public Event SFRDAvaliacaoRowChanging As SFRDAvaliacaoRowChangeEventHandler
        
        Public Event SFRDAvaliacaoRowDeleted As SFRDAvaliacaoRowChangeEventHandler
        
        Public Event SFRDAvaliacaoRowDeleting As SFRDAvaliacaoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDAvaliacaoRow(ByVal row As SFRDAvaliacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDAvaliacaoRow(ByVal parentFRDBaseRowByFRDBaseSFRDAvaliacao As FRDBaseRow, ByVal parentTipoPertinenciaRowByTipoPertinenciaSFRDAvaliacao As TipoPertinenciaRow, ByVal parentTipoDensidadeRowByTipoDensidadeSFRDAvaliacao As TipoDensidadeRow, ByVal parentTipoSubDensidadeRowByTipoSubDensidadeSFRDAvaliacao As TipoSubDensidadeRow, ByVal parentAutoEliminacaoRowByAutoEliminacaoSFRDAvaliacao As AutoEliminacaoRow, ByVal Frequencia As Decimal, ByVal Preservar As Boolean, ByVal PrazoConservacao As Short, ByVal Publicar As Boolean, ByVal Observacoes As String, ByVal EnquadramentoLegal As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDAvaliacaoRow
            Dim rowSFRDAvaliacaoRow As SFRDAvaliacaoRow = CType(Me.NewRow,SFRDAvaliacaoRow)
            rowSFRDAvaliacaoRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDAvaliacao(0), parentTipoPertinenciaRowByTipoPertinenciaSFRDAvaliacao(0), parentTipoDensidadeRowByTipoDensidadeSFRDAvaliacao(0), parentTipoSubDensidadeRowByTipoSubDensidadeSFRDAvaliacao(0), parentAutoEliminacaoRowByAutoEliminacaoSFRDAvaliacao(0), Frequencia, Preservar, PrazoConservacao, Publicar, Observacoes, EnquadramentoLegal, Versao, isDeleted}
            Me.Rows.Add(rowSFRDAvaliacaoRow)
            Return rowSFRDAvaliacaoRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDAvaliacaoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDAvaliacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDAvaliacaoDataTable = CType(MyBase.Clone,SFRDAvaliacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDAvaliacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDPertinencia = Me.Columns("IDPertinencia")
            Me.columnIDDensidade = Me.Columns("IDDensidade")
            Me.columnIDSubdensidade = Me.Columns("IDSubdensidade")
            Me.columnIDAutoEliminacao = Me.Columns("IDAutoEliminacao")
            Me.columnFrequencia = Me.Columns("Frequencia")
            Me.columnPreservar = Me.Columns("Preservar")
            Me.columnPrazoConservacao = Me.Columns("PrazoConservacao")
            Me.columnPublicar = Me.Columns("Publicar")
            Me.columnObservacoes = Me.Columns("Observacoes")
            Me.columnEnquadramentoLegal = Me.Columns("EnquadramentoLegal")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDPertinencia = New DataColumn("IDPertinencia", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDPertinencia)
            Me.columnIDDensidade = New DataColumn("IDDensidade", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDDensidade)
            Me.columnIDSubdensidade = New DataColumn("IDSubdensidade", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDSubdensidade)
            Me.columnIDAutoEliminacao = New DataColumn("IDAutoEliminacao", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDAutoEliminacao)
            Me.columnFrequencia = New DataColumn("Frequencia", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFrequencia)
            Me.columnPreservar = New DataColumn("Preservar", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreservar)
            Me.columnPrazoConservacao = New DataColumn("PrazoConservacao", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrazoConservacao)
            Me.columnPublicar = New DataColumn("Publicar", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPublicar)
            Me.columnObservacoes = New DataColumn("Observacoes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservacoes)
            Me.columnEnquadramentoLegal = New DataColumn("EnquadramentoLegal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnquadramentoLegal)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnPublicar.AllowDBNull = false
            Me.columnObservacoes.MaxLength = 1073741823
            Me.columnEnquadramentoLegal.DefaultValue = ""
            Me.columnEnquadramentoLegal.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDAvaliacaoRow() As SFRDAvaliacaoRow
            Return CType(Me.NewRow,SFRDAvaliacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDAvaliacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDAvaliacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDAvaliacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRowChanged(Me, New SFRDAvaliacaoRowChangeEvent(CType(e.Row,SFRDAvaliacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDAvaliacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRowChanging(Me, New SFRDAvaliacaoRowChangeEvent(CType(e.Row,SFRDAvaliacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDAvaliacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRowDeleted(Me, New SFRDAvaliacaoRowChangeEvent(CType(e.Row,SFRDAvaliacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDAvaliacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRowDeleting(Me, New SFRDAvaliacaoRowChangeEvent(CType(e.Row,SFRDAvaliacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDAvaliacaoRow(ByVal row As SFRDAvaliacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDAvaliacaoRow
        Inherits DataRow
        
        Private tableSFRDAvaliacao As SFRDAvaliacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDAvaliacao = CType(Me.Table,SFRDAvaliacaoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDAvaliacao.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDPertinencia As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.IDPertinenciaColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.IDPertinenciaColumn) = value
            End Set
        End Property
        
        Public Property IDDensidade As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.IDDensidadeColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.IDDensidadeColumn) = value
            End Set
        End Property
        
        Public Property IDSubdensidade As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.IDSubdensidadeColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.IDSubdensidadeColumn) = value
            End Set
        End Property
        
        Public Property IDAutoEliminacao As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.IDAutoEliminacaoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.IDAutoEliminacaoColumn) = value
            End Set
        End Property
        
        Public Property Frequencia As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.FrequenciaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.FrequenciaColumn) = value
            End Set
        End Property
        
        Public Property Preservar As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.PreservarColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.PreservarColumn) = value
            End Set
        End Property
        
        Public Property PrazoConservacao As Short
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.PrazoConservacaoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.PrazoConservacaoColumn) = value
            End Set
        End Property
        
        Public Property Publicar As Boolean
            Get
                Return CType(Me(Me.tableSFRDAvaliacao.PublicarColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.PublicarColumn) = value
            End Set
        End Property
        
        Public Property Observacoes As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.ObservacoesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.ObservacoesColumn) = value
            End Set
        End Property
        
        Public Property EnquadramentoLegal As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.EnquadramentoLegalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.EnquadramentoLegalColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDAvaliacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDAvaliacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property AutoEliminacaoRow As AutoEliminacaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AutoEliminacaoSFRDAvaliacao")),AutoEliminacaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AutoEliminacaoSFRDAvaliacao"))
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDAvaliacao")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDAvaliacao"))
            End Set
        End Property
        
        Public Property TipoPertinenciaRow As TipoPertinenciaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoPertinenciaSFRDAvaliacao")),TipoPertinenciaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoPertinenciaSFRDAvaliacao"))
            End Set
        End Property
        
        Public Property TipoSubDensidadeRow As TipoSubDensidadeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoSubDensidadeSFRDAvaliacao")),TipoSubDensidadeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoSubDensidadeSFRDAvaliacao"))
            End Set
        End Property
        
        Public Property TipoDensidadeRow As TipoDensidadeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoDensidadeSFRDAvaliacao")),TipoDensidadeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoDensidadeSFRDAvaliacao"))
            End Set
        End Property
        
        Public Function IsIDPertinenciaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.IDPertinenciaColumn)
        End Function
        
        Public Sub SetIDPertinenciaNull()
            Me(Me.tableSFRDAvaliacao.IDPertinenciaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDDensidadeNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.IDDensidadeColumn)
        End Function
        
        Public Sub SetIDDensidadeNull()
            Me(Me.tableSFRDAvaliacao.IDDensidadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDSubdensidadeNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.IDSubdensidadeColumn)
        End Function
        
        Public Sub SetIDSubdensidadeNull()
            Me(Me.tableSFRDAvaliacao.IDSubdensidadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDAutoEliminacaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.IDAutoEliminacaoColumn)
        End Function
        
        Public Sub SetIDAutoEliminacaoNull()
            Me(Me.tableSFRDAvaliacao.IDAutoEliminacaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFrequenciaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.FrequenciaColumn)
        End Function
        
        Public Sub SetFrequenciaNull()
            Me(Me.tableSFRDAvaliacao.FrequenciaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreservarNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.PreservarColumn)
        End Function
        
        Public Sub SetPreservarNull()
            Me(Me.tableSFRDAvaliacao.PreservarColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrazoConservacaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.PrazoConservacaoColumn)
        End Function
        
        Public Sub SetPrazoConservacaoNull()
            Me(Me.tableSFRDAvaliacao.PrazoConservacaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsObservacoesNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.ObservacoesColumn)
        End Function
        
        Public Sub SetObservacoesNull()
            Me(Me.tableSFRDAvaliacao.ObservacoesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnquadramentoLegalNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.EnquadramentoLegalColumn)
        End Function
        
        Public Sub SetEnquadramentoLegalNull()
            Me(Me.tableSFRDAvaliacao.EnquadramentoLegalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDAvaliacao.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDAvaliacaoRelRows() As SFRDAvaliacaoRelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDAvaliacaoSFRDAvaliacaoRel")),SFRDAvaliacaoRelRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDAvaliacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDAvaliacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDAvaliacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDAvaliacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFMateriaisComponenteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDComponente As DataColumn
        
        Private columnIDMaterial As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDUFMateriaisComponente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDComponenteColumn As DataColumn
            Get
                Return Me.columnIDComponente
            End Get
        End Property
        
        Friend ReadOnly Property IDMaterialColumn As DataColumn
            Get
                Return Me.columnIDMaterial
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDUFMateriaisComponenteRow
            Get
                Return CType(Me.Rows(index),SFRDUFMateriaisComponenteRow)
            End Get
        End Property
        
        Public Event SFRDUFMateriaisComponenteRowChanged As SFRDUFMateriaisComponenteRowChangeEventHandler
        
        Public Event SFRDUFMateriaisComponenteRowChanging As SFRDUFMateriaisComponenteRowChangeEventHandler
        
        Public Event SFRDUFMateriaisComponenteRowDeleted As SFRDUFMateriaisComponenteRowChangeEventHandler
        
        Public Event SFRDUFMateriaisComponenteRowDeleting As SFRDUFMateriaisComponenteRowChangeEventHandler
        
        Public Overloads Sub AddSFRDUFMateriaisComponenteRow(ByVal row As SFRDUFMateriaisComponenteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDUFMateriaisComponenteRow(ByVal parentSFRDUFComponenteRowBySFRDUFComponenteSFRDUFMateriaisComponente As SFRDUFComponenteRow, ByVal parentTipoMaterialRowByTipoMaterialSFRDUFMateriaisComponente As TipoMaterialRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDUFMateriaisComponenteRow
            Dim rowSFRDUFMateriaisComponenteRow As SFRDUFMateriaisComponenteRow = CType(Me.NewRow,SFRDUFMateriaisComponenteRow)
            rowSFRDUFMateriaisComponenteRow.ItemArray = New Object() {parentSFRDUFComponenteRowBySFRDUFComponenteSFRDUFMateriaisComponente(0), parentTipoMaterialRowByTipoMaterialSFRDUFMateriaisComponente(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDUFMateriaisComponenteRow)
            Return rowSFRDUFMateriaisComponenteRow
        End Function
        
        Public Function FindByIDComponenteIDMaterial(ByVal IDComponente As Long, ByVal IDMaterial As Long) As SFRDUFMateriaisComponenteRow
            Return CType(Me.Rows.Find(New Object() {IDComponente, IDMaterial}),SFRDUFMateriaisComponenteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDUFMateriaisComponenteDataTable = CType(MyBase.Clone,SFRDUFMateriaisComponenteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDUFMateriaisComponenteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDComponente = Me.Columns("IDComponente")
            Me.columnIDMaterial = Me.Columns("IDMaterial")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDComponente = New DataColumn("IDComponente", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDComponente)
            Me.columnIDMaterial = New DataColumn("IDMaterial", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMaterial)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDComponente, Me.columnIDMaterial}, true))
            Me.columnIDComponente.AllowDBNull = false
            Me.columnIDMaterial.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDUFMateriaisComponenteRow() As SFRDUFMateriaisComponenteRow
            Return CType(Me.NewRow,SFRDUFMateriaisComponenteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDUFMateriaisComponenteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDUFMateriaisComponenteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDUFMateriaisComponenteRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDUFMateriaisComponenteRowChanged(Me, New SFRDUFMateriaisComponenteRowChangeEvent(CType(e.Row,SFRDUFMateriaisComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDUFMateriaisComponenteRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDUFMateriaisComponenteRowChanging(Me, New SFRDUFMateriaisComponenteRowChangeEvent(CType(e.Row,SFRDUFMateriaisComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDUFMateriaisComponenteRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDUFMateriaisComponenteRowDeleted(Me, New SFRDUFMateriaisComponenteRowChangeEvent(CType(e.Row,SFRDUFMateriaisComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDUFMateriaisComponenteRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDUFMateriaisComponenteRowDeleting(Me, New SFRDUFMateriaisComponenteRowChangeEvent(CType(e.Row,SFRDUFMateriaisComponenteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDUFMateriaisComponenteRow(ByVal row As SFRDUFMateriaisComponenteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFMateriaisComponenteRow
        Inherits DataRow
        
        Private tableSFRDUFMateriaisComponente As SFRDUFMateriaisComponenteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDUFMateriaisComponente = CType(Me.Table,SFRDUFMateriaisComponenteDataTable)
        End Sub
        
        Public Property IDComponente As Long
            Get
                Return CType(Me(Me.tableSFRDUFMateriaisComponente.IDComponenteColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFMateriaisComponente.IDComponenteColumn) = value
            End Set
        End Property
        
        Public Property IDMaterial As Long
            Get
                Return CType(Me(Me.tableSFRDUFMateriaisComponente.IDMaterialColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFMateriaisComponente.IDMaterialColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFMateriaisComponente.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFMateriaisComponente.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDUFMateriaisComponente.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDUFMateriaisComponente.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoMaterialRow As TipoMaterialRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoMaterialSFRDUFMateriaisComponente")),TipoMaterialRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoMaterialSFRDUFMateriaisComponente"))
            End Set
        End Property
        
        Public Property SFRDUFComponenteRow As SFRDUFComponenteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDUFComponenteSFRDUFMateriaisComponente")),SFRDUFComponenteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDUFComponenteSFRDUFMateriaisComponente"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFMateriaisComponente.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDUFMateriaisComponente.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFMateriaisComponenteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDUFMateriaisComponenteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDUFMateriaisComponenteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDUFMateriaisComponenteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDicionarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDControloAut As DataColumn
        
        Private columnIDDicionario As DataColumn
        
        Private columnIDTipoControloAutForma As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ControloAutDicionario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutColumn As DataColumn
            Get
                Return Me.columnIDControloAut
            End Get
        End Property
        
        Friend ReadOnly Property IDDicionarioColumn As DataColumn
            Get
                Return Me.columnIDDicionario
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoControloAutFormaColumn As DataColumn
            Get
                Return Me.columnIDTipoControloAutForma
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ControloAutDicionarioRow
            Get
                Return CType(Me.Rows(index),ControloAutDicionarioRow)
            End Get
        End Property
        
        Public Event ControloAutDicionarioRowChanged As ControloAutDicionarioRowChangeEventHandler
        
        Public Event ControloAutDicionarioRowChanging As ControloAutDicionarioRowChangeEventHandler
        
        Public Event ControloAutDicionarioRowDeleted As ControloAutDicionarioRowChangeEventHandler
        
        Public Event ControloAutDicionarioRowDeleting As ControloAutDicionarioRowChangeEventHandler
        
        Public Overloads Sub AddControloAutDicionarioRow(ByVal row As ControloAutDicionarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddControloAutDicionarioRow(ByVal parentControloAutRowByControloAutControloAutDicionario As ControloAutRow, ByVal parentDicionarioRowByDicionarioControloAutDicionario As DicionarioRow, ByVal parentTipoControloAutFormaRowByTipoControloAutFormaControloAutDicionario As TipoControloAutFormaRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ControloAutDicionarioRow
            Dim rowControloAutDicionarioRow As ControloAutDicionarioRow = CType(Me.NewRow,ControloAutDicionarioRow)
            rowControloAutDicionarioRow.ItemArray = New Object() {parentControloAutRowByControloAutControloAutDicionario(0), parentDicionarioRowByDicionarioControloAutDicionario(0), parentTipoControloAutFormaRowByTipoControloAutFormaControloAutDicionario(0), Versao, isDeleted}
            Me.Rows.Add(rowControloAutDicionarioRow)
            Return rowControloAutDicionarioRow
        End Function
        
        Public Function FindByIDControloAutIDDicionarioIDTipoControloAutForma(ByVal IDControloAut As Long, ByVal IDDicionario As Long, ByVal IDTipoControloAutForma As Long) As ControloAutDicionarioRow
            Return CType(Me.Rows.Find(New Object() {IDControloAut, IDDicionario, IDTipoControloAutForma}),ControloAutDicionarioRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ControloAutDicionarioDataTable = CType(MyBase.Clone,ControloAutDicionarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ControloAutDicionarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDControloAut = Me.Columns("IDControloAut")
            Me.columnIDDicionario = Me.Columns("IDDicionario")
            Me.columnIDTipoControloAutForma = Me.Columns("IDTipoControloAutForma")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDControloAut = New DataColumn("IDControloAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAut)
            Me.columnIDDicionario = New DataColumn("IDDicionario", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDDicionario)
            Me.columnIDTipoControloAutForma = New DataColumn("IDTipoControloAutForma", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoControloAutForma)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDControloAut, Me.columnIDDicionario, Me.columnIDTipoControloAutForma}, true))
            Me.columnIDControloAut.AllowDBNull = false
            Me.columnIDDicionario.AllowDBNull = false
            Me.columnIDTipoControloAutForma.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewControloAutDicionarioRow() As ControloAutDicionarioRow
            Return CType(Me.NewRow,ControloAutDicionarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ControloAutDicionarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ControloAutDicionarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ControloAutDicionarioRowChangedEvent) Is Nothing) Then
                RaiseEvent ControloAutDicionarioRowChanged(Me, New ControloAutDicionarioRowChangeEvent(CType(e.Row,ControloAutDicionarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ControloAutDicionarioRowChangingEvent) Is Nothing) Then
                RaiseEvent ControloAutDicionarioRowChanging(Me, New ControloAutDicionarioRowChangeEvent(CType(e.Row,ControloAutDicionarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ControloAutDicionarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent ControloAutDicionarioRowDeleted(Me, New ControloAutDicionarioRowChangeEvent(CType(e.Row,ControloAutDicionarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ControloAutDicionarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent ControloAutDicionarioRowDeleting(Me, New ControloAutDicionarioRowChangeEvent(CType(e.Row,ControloAutDicionarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveControloAutDicionarioRow(ByVal row As ControloAutDicionarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDicionarioRow
        Inherits DataRow
        
        Private tableControloAutDicionario As ControloAutDicionarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableControloAutDicionario = CType(Me.Table,ControloAutDicionarioDataTable)
        End Sub
        
        Public Property IDControloAut As Long
            Get
                Return CType(Me(Me.tableControloAutDicionario.IDControloAutColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutDicionario.IDControloAutColumn) = value
            End Set
        End Property
        
        Public Property IDDicionario As Long
            Get
                Return CType(Me(Me.tableControloAutDicionario.IDDicionarioColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutDicionario.IDDicionarioColumn) = value
            End Set
        End Property
        
        Public Property IDTipoControloAutForma As Long
            Get
                Return CType(Me(Me.tableControloAutDicionario.IDTipoControloAutFormaColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutDicionario.IDTipoControloAutFormaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDicionario.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDicionario.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableControloAutDicionario.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAutDicionario.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoControloAutFormaRow As TipoControloAutFormaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoControloAutFormaControloAutDicionario")),TipoControloAutFormaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoControloAutFormaControloAutDicionario"))
            End Set
        End Property
        
        Public Property DicionarioRow As DicionarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DicionarioControloAutDicionario")),DicionarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DicionarioControloAutDicionario"))
            End Set
        End Property
        
        Public Property ControloAutRow As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutControloAutDicionario")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutControloAutDicionario"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDicionario.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableControloAutDicionario.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDicionarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ControloAutDicionarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ControloAutDicionarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ControloAutDicionarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnCatCode As DataColumn
        
        Private columnBuiltInTrustee As DataColumn
        
        Private columnIsActive As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("Trustee")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property CatCodeColumn As DataColumn
            Get
                Return Me.columnCatCode
            End Get
        End Property
        
        Friend ReadOnly Property BuiltInTrusteeColumn As DataColumn
            Get
                Return Me.columnBuiltInTrustee
            End Get
        End Property
        
        Friend ReadOnly Property IsActiveColumn As DataColumn
            Get
                Return Me.columnIsActive
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TrusteeRow
            Get
                Return CType(Me.Rows(index),TrusteeRow)
            End Get
        End Property
        
        Public Event TrusteeRowChanged As TrusteeRowChangeEventHandler
        
        Public Event TrusteeRowChanging As TrusteeRowChangeEventHandler
        
        Public Event TrusteeRowDeleted As TrusteeRowChangeEventHandler
        
        Public Event TrusteeRowDeleting As TrusteeRowChangeEventHandler
        
        Public Overloads Sub AddTrusteeRow(ByVal row As TrusteeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTrusteeRow(ByVal Name As String, ByVal Description As String, ByVal CatCode As String, ByVal BuiltInTrustee As Boolean, ByVal IsActive As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TrusteeRow
            Dim rowTrusteeRow As TrusteeRow = CType(Me.NewRow,TrusteeRow)
            rowTrusteeRow.ItemArray = New Object() {Nothing, Name, Description, CatCode, BuiltInTrustee, IsActive, Versao, isDeleted}
            Me.Rows.Add(rowTrusteeRow)
            Return rowTrusteeRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TrusteeRow
            Return CType(Me.Rows.Find(New Object() {ID}),TrusteeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TrusteeDataTable = CType(MyBase.Clone,TrusteeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TrusteeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnName = Me.Columns("Name")
            Me.columnDescription = Me.Columns("Description")
            Me.columnCatCode = Me.Columns("CatCode")
            Me.columnBuiltInTrustee = Me.Columns("BuiltInTrustee")
            Me.columnIsActive = Me.Columns("IsActive")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnCatCode = New DataColumn("CatCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCatCode)
            Me.columnBuiltInTrustee = New DataColumn("BuiltInTrustee", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuiltInTrustee)
            Me.columnIsActive = New DataColumn("IsActive", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsActive)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnName}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.Unique = true
            Me.columnName.MaxLength = 50
            Me.columnDescription.MaxLength = 255
            Me.columnCatCode.AllowDBNull = false
            Me.columnCatCode.DefaultValue = "USR"
            Me.columnCatCode.MaxLength = 3
            Me.columnBuiltInTrustee.AllowDBNull = false
            Me.columnIsActive.AllowDBNull = false
            Me.columnIsActive.DefaultValue = true
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTrusteeRow() As TrusteeRow
            Return CType(Me.NewRow,TrusteeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TrusteeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TrusteeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TrusteeRowChangedEvent) Is Nothing) Then
                RaiseEvent TrusteeRowChanged(Me, New TrusteeRowChangeEvent(CType(e.Row,TrusteeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TrusteeRowChangingEvent) Is Nothing) Then
                RaiseEvent TrusteeRowChanging(Me, New TrusteeRowChangeEvent(CType(e.Row,TrusteeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TrusteeRowDeletedEvent) Is Nothing) Then
                RaiseEvent TrusteeRowDeleted(Me, New TrusteeRowChangeEvent(CType(e.Row,TrusteeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TrusteeRowDeletingEvent) Is Nothing) Then
                RaiseEvent TrusteeRowDeleting(Me, New TrusteeRowChangeEvent(CType(e.Row,TrusteeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTrusteeRow(ByVal row As TrusteeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeRow
        Inherits DataRow
        
        Private tableTrustee As TrusteeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrustee = CType(Me.Table,TrusteeDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTrustee.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTrustee.IDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Return CType(Me(Me.tableTrustee.NameColumn),String)
            End Get
            Set
                Me(Me.tableTrustee.NameColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableTrustee.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrustee.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property CatCode As String
            Get
                Return CType(Me(Me.tableTrustee.CatCodeColumn),String)
            End Get
            Set
                Me(Me.tableTrustee.CatCodeColumn) = value
            End Set
        End Property
        
        Public Property BuiltInTrustee As Boolean
            Get
                Return CType(Me(Me.tableTrustee.BuiltInTrusteeColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrustee.BuiltInTrusteeColumn) = value
            End Set
        End Property
        
        Public Property IsActive As Boolean
            Get
                Return CType(Me(Me.tableTrustee.IsActiveColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrustee.IsActiveColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTrustee.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrustee.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTrustee.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrustee.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTrustee.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableTrustee.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTrustee.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTrustee.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTrusteeUserRows() As TrusteeUserRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeTrusteeUser")),TrusteeUserRow())
        End Function
        
        Public Function GetTrusteePrivilegeRows() As TrusteePrivilegeRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeTrusteePrivilege")),TrusteePrivilegeRow())
        End Function
        
        Public Function GetTrusteeGroupRows() As TrusteeGroupRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeTrusteeGroup")),TrusteeGroupRow())
        End Function
        
        Public Function GetAccessControlElementRows() As AccessControlElementRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeAccessControlElement")),AccessControlElementRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TrusteeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TrusteeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TrusteeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelControloAutDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDControloAut As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("NivelControloAut")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutColumn As DataColumn
            Get
                Return Me.columnIDControloAut
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NivelControloAutRow
            Get
                Return CType(Me.Rows(index),NivelControloAutRow)
            End Get
        End Property
        
        Public Event NivelControloAutRowChanged As NivelControloAutRowChangeEventHandler
        
        Public Event NivelControloAutRowChanging As NivelControloAutRowChangeEventHandler
        
        Public Event NivelControloAutRowDeleted As NivelControloAutRowChangeEventHandler
        
        Public Event NivelControloAutRowDeleting As NivelControloAutRowChangeEventHandler
        
        Public Overloads Sub AddNivelControloAutRow(ByVal row As NivelControloAutRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNivelControloAutRow(ByVal parentNivelRowByNivelNivelControloAut As NivelRow, ByVal parentControloAutRowByControloAutNivelControloAut As ControloAutRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As NivelControloAutRow
            Dim rowNivelControloAutRow As NivelControloAutRow = CType(Me.NewRow,NivelControloAutRow)
            rowNivelControloAutRow.ItemArray = New Object() {parentNivelRowByNivelNivelControloAut(0), parentControloAutRowByControloAutNivelControloAut(0), Versao, isDeleted}
            Me.Rows.Add(rowNivelControloAutRow)
            Return rowNivelControloAutRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As NivelControloAutRow
            Return CType(Me.Rows.Find(New Object() {ID}),NivelControloAutRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NivelControloAutDataTable = CType(MyBase.Clone,NivelControloAutDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NivelControloAutDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDControloAut = Me.Columns("IDControloAut")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDControloAut = New DataColumn("IDControloAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAut)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnIDControloAut.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewNivelControloAutRow() As NivelControloAutRow
            Return CType(Me.NewRow,NivelControloAutRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NivelControloAutRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NivelControloAutRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NivelControloAutRowChangedEvent) Is Nothing) Then
                RaiseEvent NivelControloAutRowChanged(Me, New NivelControloAutRowChangeEvent(CType(e.Row,NivelControloAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NivelControloAutRowChangingEvent) Is Nothing) Then
                RaiseEvent NivelControloAutRowChanging(Me, New NivelControloAutRowChangeEvent(CType(e.Row,NivelControloAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NivelControloAutRowDeletedEvent) Is Nothing) Then
                RaiseEvent NivelControloAutRowDeleted(Me, New NivelControloAutRowChangeEvent(CType(e.Row,NivelControloAutRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NivelControloAutRowDeletingEvent) Is Nothing) Then
                RaiseEvent NivelControloAutRowDeleting(Me, New NivelControloAutRowChangeEvent(CType(e.Row,NivelControloAutRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNivelControloAutRow(ByVal row As NivelControloAutRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelControloAutRow
        Inherits DataRow
        
        Private tableNivelControloAut As NivelControloAutDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNivelControloAut = CType(Me.Table,NivelControloAutDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableNivelControloAut.IDColumn),Long)
            End Get
            Set
                Me(Me.tableNivelControloAut.IDColumn) = value
            End Set
        End Property
        
        Public Property IDControloAut As Long
            Get
                Return CType(Me(Me.tableNivelControloAut.IDControloAutColumn),Long)
            End Get
            Set
                Me(Me.tableNivelControloAut.IDControloAutColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableNivelControloAut.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNivelControloAut.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableNivelControloAut.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableNivelControloAut.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property NivelRow As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelNivelControloAut")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelNivelControloAut"))
            End Set
        End Property
        
        Public Property ControloAutRow As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutNivelControloAut")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutNivelControloAut"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableNivelControloAut.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableNivelControloAut.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelControloAutRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NivelControloAutRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NivelControloAutRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NivelControloAutRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutEntidadeProdutoraDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDControloAut As DataColumn
        
        Private columnIDTipoEntidadeProdutora As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ControloAutEntidadeProdutora")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutColumn As DataColumn
            Get
                Return Me.columnIDControloAut
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoEntidadeProdutoraColumn As DataColumn
            Get
                Return Me.columnIDTipoEntidadeProdutora
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ControloAutEntidadeProdutoraRow
            Get
                Return CType(Me.Rows(index),ControloAutEntidadeProdutoraRow)
            End Get
        End Property
        
        Public Event ControloAutEntidadeProdutoraRowChanged As ControloAutEntidadeProdutoraRowChangeEventHandler
        
        Public Event ControloAutEntidadeProdutoraRowChanging As ControloAutEntidadeProdutoraRowChangeEventHandler
        
        Public Event ControloAutEntidadeProdutoraRowDeleted As ControloAutEntidadeProdutoraRowChangeEventHandler
        
        Public Event ControloAutEntidadeProdutoraRowDeleting As ControloAutEntidadeProdutoraRowChangeEventHandler
        
        Public Overloads Sub AddControloAutEntidadeProdutoraRow(ByVal row As ControloAutEntidadeProdutoraRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddControloAutEntidadeProdutoraRow(ByVal parentControloAutRowByControloAutControloAutEntidadeProdutora As ControloAutRow, ByVal parentTipoEntidadeProdutoraRowByTipoEntidadeProdutoraControloAutEntidadeProdutora As TipoEntidadeProdutoraRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ControloAutEntidadeProdutoraRow
            Dim rowControloAutEntidadeProdutoraRow As ControloAutEntidadeProdutoraRow = CType(Me.NewRow,ControloAutEntidadeProdutoraRow)
            rowControloAutEntidadeProdutoraRow.ItemArray = New Object() {parentControloAutRowByControloAutControloAutEntidadeProdutora(0), parentTipoEntidadeProdutoraRowByTipoEntidadeProdutoraControloAutEntidadeProdutora(0), Versao, isDeleted}
            Me.Rows.Add(rowControloAutEntidadeProdutoraRow)
            Return rowControloAutEntidadeProdutoraRow
        End Function
        
        Public Function FindByIDControloAut(ByVal IDControloAut As Long) As ControloAutEntidadeProdutoraRow
            Return CType(Me.Rows.Find(New Object() {IDControloAut}),ControloAutEntidadeProdutoraRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ControloAutEntidadeProdutoraDataTable = CType(MyBase.Clone,ControloAutEntidadeProdutoraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ControloAutEntidadeProdutoraDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDControloAut = Me.Columns("IDControloAut")
            Me.columnIDTipoEntidadeProdutora = Me.Columns("IDTipoEntidadeProdutora")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDControloAut = New DataColumn("IDControloAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAut)
            Me.columnIDTipoEntidadeProdutora = New DataColumn("IDTipoEntidadeProdutora", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoEntidadeProdutora)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDControloAut}, true))
            Me.columnIDControloAut.AllowDBNull = false
            Me.columnIDControloAut.Unique = true
            Me.columnIDTipoEntidadeProdutora.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewControloAutEntidadeProdutoraRow() As ControloAutEntidadeProdutoraRow
            Return CType(Me.NewRow,ControloAutEntidadeProdutoraRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ControloAutEntidadeProdutoraRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ControloAutEntidadeProdutoraRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ControloAutEntidadeProdutoraRowChangedEvent) Is Nothing) Then
                RaiseEvent ControloAutEntidadeProdutoraRowChanged(Me, New ControloAutEntidadeProdutoraRowChangeEvent(CType(e.Row,ControloAutEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ControloAutEntidadeProdutoraRowChangingEvent) Is Nothing) Then
                RaiseEvent ControloAutEntidadeProdutoraRowChanging(Me, New ControloAutEntidadeProdutoraRowChangeEvent(CType(e.Row,ControloAutEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ControloAutEntidadeProdutoraRowDeletedEvent) Is Nothing) Then
                RaiseEvent ControloAutEntidadeProdutoraRowDeleted(Me, New ControloAutEntidadeProdutoraRowChangeEvent(CType(e.Row,ControloAutEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ControloAutEntidadeProdutoraRowDeletingEvent) Is Nothing) Then
                RaiseEvent ControloAutEntidadeProdutoraRowDeleting(Me, New ControloAutEntidadeProdutoraRowChangeEvent(CType(e.Row,ControloAutEntidadeProdutoraRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveControloAutEntidadeProdutoraRow(ByVal row As ControloAutEntidadeProdutoraRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutEntidadeProdutoraRow
        Inherits DataRow
        
        Private tableControloAutEntidadeProdutora As ControloAutEntidadeProdutoraDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableControloAutEntidadeProdutora = CType(Me.Table,ControloAutEntidadeProdutoraDataTable)
        End Sub
        
        Public Property IDControloAut As Long
            Get
                Return CType(Me(Me.tableControloAutEntidadeProdutora.IDControloAutColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutEntidadeProdutora.IDControloAutColumn) = value
            End Set
        End Property
        
        Public Property IDTipoEntidadeProdutora As Long
            Get
                Return CType(Me(Me.tableControloAutEntidadeProdutora.IDTipoEntidadeProdutoraColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutEntidadeProdutora.IDTipoEntidadeProdutoraColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableControloAutEntidadeProdutora.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutEntidadeProdutora.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableControloAutEntidadeProdutora.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAutEntidadeProdutora.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoEntidadeProdutoraRow As TipoEntidadeProdutoraRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoEntidadeProdutoraControloAutEntidadeProdutora")),TipoEntidadeProdutoraRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoEntidadeProdutoraControloAutEntidadeProdutora"))
            End Set
        End Property
        
        Public Property ControloAutRow As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutControloAutEntidadeProdutora")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutControloAutEntidadeProdutora"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutEntidadeProdutora.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableControloAutEntidadeProdutora.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutEntidadeProdutoraRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ControloAutEntidadeProdutoraRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ControloAutEntidadeProdutoraRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ControloAutEntidadeProdutoraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDCondicaoDeAcessoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnEstatutoLegal As DataColumn
        
        Private columnCondicaoDeAcesso As DataColumn
        
        Private columnCondicaoDeReproducao As DataColumn
        
        Private columnIdioma As DataColumn
        
        Private columnAuxiliarDePesquisa As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDCondicaoDeAcesso")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property EstatutoLegalColumn As DataColumn
            Get
                Return Me.columnEstatutoLegal
            End Get
        End Property
        
        Friend ReadOnly Property CondicaoDeAcessoColumn As DataColumn
            Get
                Return Me.columnCondicaoDeAcesso
            End Get
        End Property
        
        Friend ReadOnly Property CondicaoDeReproducaoColumn As DataColumn
            Get
                Return Me.columnCondicaoDeReproducao
            End Get
        End Property
        
        Friend ReadOnly Property IdiomaColumn As DataColumn
            Get
                Return Me.columnIdioma
            End Get
        End Property
        
        Friend ReadOnly Property AuxiliarDePesquisaColumn As DataColumn
            Get
                Return Me.columnAuxiliarDePesquisa
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDCondicaoDeAcessoRow
            Get
                Return CType(Me.Rows(index),SFRDCondicaoDeAcessoRow)
            End Get
        End Property
        
        Public Event SFRDCondicaoDeAcessoRowChanged As SFRDCondicaoDeAcessoRowChangeEventHandler
        
        Public Event SFRDCondicaoDeAcessoRowChanging As SFRDCondicaoDeAcessoRowChangeEventHandler
        
        Public Event SFRDCondicaoDeAcessoRowDeleted As SFRDCondicaoDeAcessoRowChangeEventHandler
        
        Public Event SFRDCondicaoDeAcessoRowDeleting As SFRDCondicaoDeAcessoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDCondicaoDeAcessoRow(ByVal row As SFRDCondicaoDeAcessoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDCondicaoDeAcessoRow(ByVal parentFRDBaseRowByFRDBaseSFRDCondicaoDeAcesso As FRDBaseRow, ByVal EstatutoLegal As String, ByVal CondicaoDeAcesso As String, ByVal CondicaoDeReproducao As String, ByVal Idioma As String, ByVal AuxiliarDePesquisa As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDCondicaoDeAcessoRow
            Dim rowSFRDCondicaoDeAcessoRow As SFRDCondicaoDeAcessoRow = CType(Me.NewRow,SFRDCondicaoDeAcessoRow)
            rowSFRDCondicaoDeAcessoRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDCondicaoDeAcesso(0), EstatutoLegal, CondicaoDeAcesso, CondicaoDeReproducao, Idioma, AuxiliarDePesquisa, Versao, isDeleted}
            Me.Rows.Add(rowSFRDCondicaoDeAcessoRow)
            Return rowSFRDCondicaoDeAcessoRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDCondicaoDeAcessoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDCondicaoDeAcessoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDCondicaoDeAcessoDataTable = CType(MyBase.Clone,SFRDCondicaoDeAcessoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDCondicaoDeAcessoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnEstatutoLegal = Me.Columns("EstatutoLegal")
            Me.columnCondicaoDeAcesso = Me.Columns("CondicaoDeAcesso")
            Me.columnCondicaoDeReproducao = Me.Columns("CondicaoDeReproducao")
            Me.columnIdioma = Me.Columns("Idioma")
            Me.columnAuxiliarDePesquisa = Me.Columns("AuxiliarDePesquisa")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnEstatutoLegal = New DataColumn("EstatutoLegal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstatutoLegal)
            Me.columnCondicaoDeAcesso = New DataColumn("CondicaoDeAcesso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondicaoDeAcesso)
            Me.columnCondicaoDeReproducao = New DataColumn("CondicaoDeReproducao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondicaoDeReproducao)
            Me.columnIdioma = New DataColumn("Idioma", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdioma)
            Me.columnAuxiliarDePesquisa = New DataColumn("AuxiliarDePesquisa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAuxiliarDePesquisa)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnEstatutoLegal.MaxLength = 1073741823
            Me.columnCondicaoDeAcesso.MaxLength = 1073741823
            Me.columnCondicaoDeReproducao.MaxLength = 1073741823
            Me.columnIdioma.MaxLength = 1073741823
            Me.columnAuxiliarDePesquisa.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDCondicaoDeAcessoRow() As SFRDCondicaoDeAcessoRow
            Return CType(Me.NewRow,SFRDCondicaoDeAcessoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDCondicaoDeAcessoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDCondicaoDeAcessoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDCondicaoDeAcessoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDCondicaoDeAcessoRowChanged(Me, New SFRDCondicaoDeAcessoRowChangeEvent(CType(e.Row,SFRDCondicaoDeAcessoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDCondicaoDeAcessoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDCondicaoDeAcessoRowChanging(Me, New SFRDCondicaoDeAcessoRowChangeEvent(CType(e.Row,SFRDCondicaoDeAcessoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDCondicaoDeAcessoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDCondicaoDeAcessoRowDeleted(Me, New SFRDCondicaoDeAcessoRowChangeEvent(CType(e.Row,SFRDCondicaoDeAcessoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDCondicaoDeAcessoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDCondicaoDeAcessoRowDeleting(Me, New SFRDCondicaoDeAcessoRowChangeEvent(CType(e.Row,SFRDCondicaoDeAcessoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDCondicaoDeAcessoRow(ByVal row As SFRDCondicaoDeAcessoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDCondicaoDeAcessoRow
        Inherits DataRow
        
        Private tableSFRDCondicaoDeAcesso As SFRDCondicaoDeAcessoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDCondicaoDeAcesso = CType(Me.Table,SFRDCondicaoDeAcessoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property EstatutoLegal As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDCondicaoDeAcesso.EstatutoLegalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.EstatutoLegalColumn) = value
            End Set
        End Property
        
        Public Property CondicaoDeAcesso As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDCondicaoDeAcesso.CondicaoDeAcessoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.CondicaoDeAcessoColumn) = value
            End Set
        End Property
        
        Public Property CondicaoDeReproducao As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDCondicaoDeAcesso.CondicaoDeReproducaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.CondicaoDeReproducaoColumn) = value
            End Set
        End Property
        
        Public Property Idioma As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDCondicaoDeAcesso.IdiomaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.IdiomaColumn) = value
            End Set
        End Property
        
        Public Property AuxiliarDePesquisa As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDCondicaoDeAcesso.AuxiliarDePesquisaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.AuxiliarDePesquisaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDCondicaoDeAcesso.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDCondicaoDeAcesso.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDCondicaoDeAcesso.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDCondicaoDeAcesso")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDCondicaoDeAcesso"))
            End Set
        End Property
        
        Public Function IsEstatutoLegalNull() As Boolean
            Return Me.IsNull(Me.tableSFRDCondicaoDeAcesso.EstatutoLegalColumn)
        End Function
        
        Public Sub SetEstatutoLegalNull()
            Me(Me.tableSFRDCondicaoDeAcesso.EstatutoLegalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCondicaoDeAcessoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDCondicaoDeAcesso.CondicaoDeAcessoColumn)
        End Function
        
        Public Sub SetCondicaoDeAcessoNull()
            Me(Me.tableSFRDCondicaoDeAcesso.CondicaoDeAcessoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCondicaoDeReproducaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDCondicaoDeAcesso.CondicaoDeReproducaoColumn)
        End Function
        
        Public Sub SetCondicaoDeReproducaoNull()
            Me(Me.tableSFRDCondicaoDeAcesso.CondicaoDeReproducaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdiomaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDCondicaoDeAcesso.IdiomaColumn)
        End Function
        
        Public Sub SetIdiomaNull()
            Me(Me.tableSFRDCondicaoDeAcesso.IdiomaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAuxiliarDePesquisaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDCondicaoDeAcesso.AuxiliarDePesquisaColumn)
        End Function
        
        Public Sub SetAuxiliarDePesquisaNull()
            Me(Me.tableSFRDCondicaoDeAcesso.AuxiliarDePesquisaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDCondicaoDeAcesso.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDCondicaoDeAcesso.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDTecnicasDeRegistoRows() As SFRDTecnicasDeRegistoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDCondicaoDeAcessoSFRDTecnicasDeRegisto")),SFRDTecnicasDeRegistoRow())
        End Function
        
        Public Function GetSFRDFormaSuporteAcondRows() As SFRDFormaSuporteAcondRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDCondicaoDeAcessoSFRDFormaSuporteAcond")),SFRDFormaSuporteAcondRow())
        End Function
        
        Public Function GetSFRDEstadoDeConservacaoRows() As SFRDEstadoDeConservacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDCondicaoDeAcessoSFRDEstadoDeConservacao")),SFRDEstadoDeConservacaoRow())
        End Function
        
        Public Function GetSFRDMaterialDeSuporteRows() As SFRDMaterialDeSuporteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDCondicaoDeAcessoSFRDMaterialDeSuporte")),SFRDMaterialDeSuporteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDCondicaoDeAcessoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDCondicaoDeAcessoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDCondicaoDeAcessoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDCondicaoDeAcessoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFDescricaoFisicaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTipoAcondicionamento As DataColumn
        
        Private columnMedidaLargura As DataColumn
        
        Private columnMedidaAltura As DataColumn
        
        Private columnMedidaProfundidade As DataColumn
        
        Private columnIDTipoMedida As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDUFDescricaoFisica")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoAcondicionamentoColumn As DataColumn
            Get
                Return Me.columnIDTipoAcondicionamento
            End Get
        End Property
        
        Friend ReadOnly Property MedidaLarguraColumn As DataColumn
            Get
                Return Me.columnMedidaLargura
            End Get
        End Property
        
        Friend ReadOnly Property MedidaAlturaColumn As DataColumn
            Get
                Return Me.columnMedidaAltura
            End Get
        End Property
        
        Friend ReadOnly Property MedidaProfundidadeColumn As DataColumn
            Get
                Return Me.columnMedidaProfundidade
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoMedidaColumn As DataColumn
            Get
                Return Me.columnIDTipoMedida
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDUFDescricaoFisicaRow
            Get
                Return CType(Me.Rows(index),SFRDUFDescricaoFisicaRow)
            End Get
        End Property
        
        Public Event SFRDUFDescricaoFisicaRowChanged As SFRDUFDescricaoFisicaRowChangeEventHandler
        
        Public Event SFRDUFDescricaoFisicaRowChanging As SFRDUFDescricaoFisicaRowChangeEventHandler
        
        Public Event SFRDUFDescricaoFisicaRowDeleted As SFRDUFDescricaoFisicaRowChangeEventHandler
        
        Public Event SFRDUFDescricaoFisicaRowDeleting As SFRDUFDescricaoFisicaRowChangeEventHandler
        
        Public Overloads Sub AddSFRDUFDescricaoFisicaRow(ByVal row As SFRDUFDescricaoFisicaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDUFDescricaoFisicaRow(ByVal parentFRDBaseRowByFRDBaseSFRDUFDescricaoFisica As FRDBaseRow, ByVal parentTipoAcondicionamentoRowByTipoAcondicionamentoSFRDUFDescricaoFisica As TipoAcondicionamentoRow, ByVal MedidaLargura As Decimal, ByVal MedidaAltura As Decimal, ByVal MedidaProfundidade As Decimal, ByVal parentTipoMedidaRowByTipoMedidaSFRDUFDescricaoFisica As TipoMedidaRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDUFDescricaoFisicaRow
            Dim rowSFRDUFDescricaoFisicaRow As SFRDUFDescricaoFisicaRow = CType(Me.NewRow,SFRDUFDescricaoFisicaRow)
            rowSFRDUFDescricaoFisicaRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDUFDescricaoFisica(0), parentTipoAcondicionamentoRowByTipoAcondicionamentoSFRDUFDescricaoFisica(0), MedidaLargura, MedidaAltura, MedidaProfundidade, parentTipoMedidaRowByTipoMedidaSFRDUFDescricaoFisica(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDUFDescricaoFisicaRow)
            Return rowSFRDUFDescricaoFisicaRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDUFDescricaoFisicaRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDUFDescricaoFisicaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDUFDescricaoFisicaDataTable = CType(MyBase.Clone,SFRDUFDescricaoFisicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDUFDescricaoFisicaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTipoAcondicionamento = Me.Columns("IDTipoAcondicionamento")
            Me.columnMedidaLargura = Me.Columns("MedidaLargura")
            Me.columnMedidaAltura = Me.Columns("MedidaAltura")
            Me.columnMedidaProfundidade = Me.Columns("MedidaProfundidade")
            Me.columnIDTipoMedida = Me.Columns("IDTipoMedida")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTipoAcondicionamento = New DataColumn("IDTipoAcondicionamento", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoAcondicionamento)
            Me.columnMedidaLargura = New DataColumn("MedidaLargura", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedidaLargura)
            Me.columnMedidaAltura = New DataColumn("MedidaAltura", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedidaAltura)
            Me.columnMedidaProfundidade = New DataColumn("MedidaProfundidade", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedidaProfundidade)
            Me.columnIDTipoMedida = New DataColumn("IDTipoMedida", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoMedida)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnIDTipoAcondicionamento.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDUFDescricaoFisicaRow() As SFRDUFDescricaoFisicaRow
            Return CType(Me.NewRow,SFRDUFDescricaoFisicaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDUFDescricaoFisicaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDUFDescricaoFisicaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDUFDescricaoFisicaRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDUFDescricaoFisicaRowChanged(Me, New SFRDUFDescricaoFisicaRowChangeEvent(CType(e.Row,SFRDUFDescricaoFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDUFDescricaoFisicaRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDUFDescricaoFisicaRowChanging(Me, New SFRDUFDescricaoFisicaRowChangeEvent(CType(e.Row,SFRDUFDescricaoFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDUFDescricaoFisicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDUFDescricaoFisicaRowDeleted(Me, New SFRDUFDescricaoFisicaRowChangeEvent(CType(e.Row,SFRDUFDescricaoFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDUFDescricaoFisicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDUFDescricaoFisicaRowDeleting(Me, New SFRDUFDescricaoFisicaRowChangeEvent(CType(e.Row,SFRDUFDescricaoFisicaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDUFDescricaoFisicaRow(ByVal row As SFRDUFDescricaoFisicaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFDescricaoFisicaRow
        Inherits DataRow
        
        Private tableSFRDUFDescricaoFisica As SFRDUFDescricaoFisicaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDUFDescricaoFisica = CType(Me.Table,SFRDUFDescricaoFisicaDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDUFDescricaoFisica.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTipoAcondicionamento As Long
            Get
                Return CType(Me(Me.tableSFRDUFDescricaoFisica.IDTipoAcondicionamentoColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.IDTipoAcondicionamentoColumn) = value
            End Set
        End Property
        
        Public Property MedidaLargura As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFDescricaoFisica.MedidaLarguraColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.MedidaLarguraColumn) = value
            End Set
        End Property
        
        Public Property MedidaAltura As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFDescricaoFisica.MedidaAlturaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.MedidaAlturaColumn) = value
            End Set
        End Property
        
        Public Property MedidaProfundidade As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFDescricaoFisica.MedidaProfundidadeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.MedidaProfundidadeColumn) = value
            End Set
        End Property
        
        Public Property IDTipoMedida As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFDescricaoFisica.IDTipoMedidaColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.IDTipoMedidaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFDescricaoFisica.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDUFDescricaoFisica.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDUFDescricaoFisica.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoAcondicionamentoRow As TipoAcondicionamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoAcondicionamentoSFRDUFDescricaoFisica")),TipoAcondicionamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoAcondicionamentoSFRDUFDescricaoFisica"))
            End Set
        End Property
        
        Public Property TipoMedidaRow As TipoMedidaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoMedidaSFRDUFDescricaoFisica")),TipoMedidaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoMedidaSFRDUFDescricaoFisica"))
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDUFDescricaoFisica")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDUFDescricaoFisica"))
            End Set
        End Property
        
        Public Function IsMedidaLarguraNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFDescricaoFisica.MedidaLarguraColumn)
        End Function
        
        Public Sub SetMedidaLarguraNull()
            Me(Me.tableSFRDUFDescricaoFisica.MedidaLarguraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedidaAlturaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFDescricaoFisica.MedidaAlturaColumn)
        End Function
        
        Public Sub SetMedidaAlturaNull()
            Me(Me.tableSFRDUFDescricaoFisica.MedidaAlturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedidaProfundidadeNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFDescricaoFisica.MedidaProfundidadeColumn)
        End Function
        
        Public Sub SetMedidaProfundidadeNull()
            Me(Me.tableSFRDUFDescricaoFisica.MedidaProfundidadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDTipoMedidaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFDescricaoFisica.IDTipoMedidaColumn)
        End Function
        
        Public Sub SetIDTipoMedidaNull()
            Me(Me.tableSFRDUFDescricaoFisica.IDTipoMedidaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFDescricaoFisica.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDUFDescricaoFisica.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFComponenteRows() As SFRDUFComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDUFDescricaoFisicaSFRDUFComponente")),SFRDUFComponenteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFDescricaoFisicaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDUFDescricaoFisicaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDUFDescricaoFisicaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDUFDescricaoFisicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecurableObjectDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnCatCode As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SecurableObject")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property CatCodeColumn As DataColumn
            Get
                Return Me.columnCatCode
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecurableObjectRow
            Get
                Return CType(Me.Rows(index),SecurableObjectRow)
            End Get
        End Property
        
        Public Event SecurableObjectRowChanged As SecurableObjectRowChangeEventHandler
        
        Public Event SecurableObjectRowChanging As SecurableObjectRowChangeEventHandler
        
        Public Event SecurableObjectRowDeleted As SecurableObjectRowChangeEventHandler
        
        Public Event SecurableObjectRowDeleting As SecurableObjectRowChangeEventHandler
        
        Public Overloads Sub AddSecurableObjectRow(ByVal row As SecurableObjectRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecurableObjectRow(ByVal CatCode As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SecurableObjectRow
            Dim rowSecurableObjectRow As SecurableObjectRow = CType(Me.NewRow,SecurableObjectRow)
            rowSecurableObjectRow.ItemArray = New Object() {Nothing, CatCode, Versao, isDeleted}
            Me.Rows.Add(rowSecurableObjectRow)
            Return rowSecurableObjectRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As SecurableObjectRow
            Return CType(Me.Rows.Find(New Object() {ID}),SecurableObjectRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecurableObjectDataTable = CType(MyBase.Clone,SecurableObjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecurableObjectDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnCatCode = Me.Columns("CatCode")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnCatCode = New DataColumn("CatCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCatCode)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCatCode.AllowDBNull = false
            Me.columnCatCode.DefaultValue = "NVL"
            Me.columnCatCode.MaxLength = 3
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSecurableObjectRow() As SecurableObjectRow
            Return CType(Me.NewRow,SecurableObjectRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecurableObjectRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecurableObjectRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecurableObjectRowChangedEvent) Is Nothing) Then
                RaiseEvent SecurableObjectRowChanged(Me, New SecurableObjectRowChangeEvent(CType(e.Row,SecurableObjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecurableObjectRowChangingEvent) Is Nothing) Then
                RaiseEvent SecurableObjectRowChanging(Me, New SecurableObjectRowChangeEvent(CType(e.Row,SecurableObjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecurableObjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecurableObjectRowDeleted(Me, New SecurableObjectRowChangeEvent(CType(e.Row,SecurableObjectRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecurableObjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecurableObjectRowDeleting(Me, New SecurableObjectRowChangeEvent(CType(e.Row,SecurableObjectRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecurableObjectRow(ByVal row As SecurableObjectRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecurableObjectRow
        Inherits DataRow
        
        Private tableSecurableObject As SecurableObjectDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecurableObject = CType(Me.Table,SecurableObjectDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableSecurableObject.IDColumn),Long)
            End Get
            Set
                Me(Me.tableSecurableObject.IDColumn) = value
            End Set
        End Property
        
        Public Property CatCode As String
            Get
                Return CType(Me(Me.tableSecurableObject.CatCodeColumn),String)
            End Get
            Set
                Me(Me.tableSecurableObject.CatCodeColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSecurableObject.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecurableObject.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSecurableObject.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSecurableObject.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSecurableObject.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSecurableObject.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSecurableObjectNivelRows() As SecurableObjectNivelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SecurableObjectSecurableObjectNivel")),SecurableObjectNivelRow())
        End Function
        
        Public Function GetAccessControlElementRows() As AccessControlElementRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SecurableObjectAccessControlElement")),AccessControlElementRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecurableObjectRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecurableObjectRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecurableObjectRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecurableObjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUnidadeFisicaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDNivel As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDUnidadeFisica")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDNivelColumn As DataColumn
            Get
                Return Me.columnIDNivel
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDUnidadeFisicaRow
            Get
                Return CType(Me.Rows(index),SFRDUnidadeFisicaRow)
            End Get
        End Property
        
        Public Event SFRDUnidadeFisicaRowChanged As SFRDUnidadeFisicaRowChangeEventHandler
        
        Public Event SFRDUnidadeFisicaRowChanging As SFRDUnidadeFisicaRowChangeEventHandler
        
        Public Event SFRDUnidadeFisicaRowDeleted As SFRDUnidadeFisicaRowChangeEventHandler
        
        Public Event SFRDUnidadeFisicaRowDeleting As SFRDUnidadeFisicaRowChangeEventHandler
        
        Public Overloads Sub AddSFRDUnidadeFisicaRow(ByVal row As SFRDUnidadeFisicaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDUnidadeFisicaRow(ByVal parentFRDBaseRowByFRDBaseSFRDUnidadeFisica As FRDBaseRow, ByVal parentNivelRowByNivelSFRDUnidadeFisica As NivelRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDUnidadeFisicaRow
            Dim rowSFRDUnidadeFisicaRow As SFRDUnidadeFisicaRow = CType(Me.NewRow,SFRDUnidadeFisicaRow)
            rowSFRDUnidadeFisicaRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDUnidadeFisica(0), parentNivelRowByNivelSFRDUnidadeFisica(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDUnidadeFisicaRow)
            Return rowSFRDUnidadeFisicaRow
        End Function
        
        Public Function FindByIDFRDBaseIDNivel(ByVal IDFRDBase As Long, ByVal IDNivel As Long) As SFRDUnidadeFisicaRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDNivel}),SFRDUnidadeFisicaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDUnidadeFisicaDataTable = CType(MyBase.Clone,SFRDUnidadeFisicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDUnidadeFisicaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDNivel = Me.Columns("IDNivel")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDNivel = New DataColumn("IDNivel", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDNivel)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDNivel}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDNivel.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDUnidadeFisicaRow() As SFRDUnidadeFisicaRow
            Return CType(Me.NewRow,SFRDUnidadeFisicaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDUnidadeFisicaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDUnidadeFisicaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDUnidadeFisicaRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDUnidadeFisicaRowChanged(Me, New SFRDUnidadeFisicaRowChangeEvent(CType(e.Row,SFRDUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDUnidadeFisicaRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDUnidadeFisicaRowChanging(Me, New SFRDUnidadeFisicaRowChangeEvent(CType(e.Row,SFRDUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDUnidadeFisicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDUnidadeFisicaRowDeleted(Me, New SFRDUnidadeFisicaRowChangeEvent(CType(e.Row,SFRDUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDUnidadeFisicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDUnidadeFisicaRowDeleting(Me, New SFRDUnidadeFisicaRowChangeEvent(CType(e.Row,SFRDUnidadeFisicaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDUnidadeFisicaRow(ByVal row As SFRDUnidadeFisicaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUnidadeFisicaRow
        Inherits DataRow
        
        Private tableSFRDUnidadeFisica As SFRDUnidadeFisicaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDUnidadeFisica = CType(Me.Table,SFRDUnidadeFisicaDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDUnidadeFisica.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUnidadeFisica.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDNivel As Long
            Get
                Return CType(Me(Me.tableSFRDUnidadeFisica.IDNivelColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUnidadeFisica.IDNivelColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUnidadeFisica.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUnidadeFisica.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDUnidadeFisica.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDUnidadeFisica.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property NivelRow As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelSFRDUnidadeFisica")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelSFRDUnidadeFisica"))
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDUnidadeFisica")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDUnidadeFisica"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUnidadeFisica.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDUnidadeFisica.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFComponenteRows() As SFRDUFComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDUnidadeFisicaSFRDUFComponente")),SFRDUFComponenteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUnidadeFisicaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDUnidadeFisicaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDUnidadeFisicaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDUnidadeFisicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso3166DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnCountryNameEnglish As DataColumn
        
        Private columnCodeAlpha2 As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("Iso3166")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property CountryNameEnglishColumn As DataColumn
            Get
                Return Me.columnCountryNameEnglish
            End Get
        End Property
        
        Friend ReadOnly Property CodeAlpha2Column As DataColumn
            Get
                Return Me.columnCodeAlpha2
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Iso3166Row
            Get
                Return CType(Me.Rows(index),Iso3166Row)
            End Get
        End Property
        
        Public Event Iso3166RowChanged As Iso3166RowChangeEventHandler
        
        Public Event Iso3166RowChanging As Iso3166RowChangeEventHandler
        
        Public Event Iso3166RowDeleted As Iso3166RowChangeEventHandler
        
        Public Event Iso3166RowDeleting As Iso3166RowChangeEventHandler
        
        Public Overloads Sub AddIso3166Row(ByVal row As Iso3166Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIso3166Row(ByVal CountryNameEnglish As String, ByVal CodeAlpha2 As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As Iso3166Row
            Dim rowIso3166Row As Iso3166Row = CType(Me.NewRow,Iso3166Row)
            rowIso3166Row.ItemArray = New Object() {Nothing, CountryNameEnglish, CodeAlpha2, Versao, isDeleted}
            Me.Rows.Add(rowIso3166Row)
            Return rowIso3166Row
        End Function
        
        Public Function FindByID(ByVal ID As Long) As Iso3166Row
            Return CType(Me.Rows.Find(New Object() {ID}),Iso3166Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Iso3166DataTable = CType(MyBase.Clone,Iso3166DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Iso3166DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnCountryNameEnglish = Me.Columns("CountryNameEnglish")
            Me.columnCodeAlpha2 = Me.Columns("CodeAlpha2")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnCountryNameEnglish = New DataColumn("CountryNameEnglish", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryNameEnglish)
            Me.columnCodeAlpha2 = New DataColumn("CodeAlpha2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodeAlpha2)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnCountryNameEnglish.AllowDBNull = false
            Me.columnCountryNameEnglish.MaxLength = 50
            Me.columnCodeAlpha2.AllowDBNull = false
            Me.columnCodeAlpha2.MaxLength = 2
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewIso3166Row() As Iso3166Row
            Return CType(Me.NewRow,Iso3166Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Iso3166Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Iso3166Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Iso3166RowChangedEvent) Is Nothing) Then
                RaiseEvent Iso3166RowChanged(Me, New Iso3166RowChangeEvent(CType(e.Row,Iso3166Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Iso3166RowChangingEvent) Is Nothing) Then
                RaiseEvent Iso3166RowChanging(Me, New Iso3166RowChangeEvent(CType(e.Row,Iso3166Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Iso3166RowDeletedEvent) Is Nothing) Then
                RaiseEvent Iso3166RowDeleted(Me, New Iso3166RowChangeEvent(CType(e.Row,Iso3166Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Iso3166RowDeletingEvent) Is Nothing) Then
                RaiseEvent Iso3166RowDeleting(Me, New Iso3166RowChangeEvent(CType(e.Row,Iso3166Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIso3166Row(ByVal row As Iso3166Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso3166Row
        Inherits DataRow
        
        Private tableIso3166 As Iso3166DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIso3166 = CType(Me.Table,Iso3166DataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableIso3166.IDColumn),Long)
            End Get
            Set
                Me(Me.tableIso3166.IDColumn) = value
            End Set
        End Property
        
        Public Property CountryNameEnglish As String
            Get
                Return CType(Me(Me.tableIso3166.CountryNameEnglishColumn),String)
            End Get
            Set
                Me(Me.tableIso3166.CountryNameEnglishColumn) = value
            End Set
        End Property
        
        Public Property CodeAlpha2 As String
            Get
                Return CType(Me(Me.tableIso3166.CodeAlpha2Column),String)
            End Get
            Set
                Me(Me.tableIso3166.CodeAlpha2Column) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableIso3166.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIso3166.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableIso3166.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableIso3166.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableIso3166.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableIso3166.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Iso3166RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Iso3166Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Iso3166Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Iso3166Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFComponenteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDNivelUA As DataColumn
        
        Private columnQuantidade As DataColumn
        
        Private columnIDTipoSuporte As DataColumn
        
        Private columnMedidaLargura As DataColumn
        
        Private columnMedidaAltura As DataColumn
        
        Private columnMedidaProfundidade As DataColumn
        
        Private columnIDTipoMedida As DataColumn
        
        Private columnIDTipoEstadoConservacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDUFComponente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDNivelUAColumn As DataColumn
            Get
                Return Me.columnIDNivelUA
            End Get
        End Property
        
        Friend ReadOnly Property QuantidadeColumn As DataColumn
            Get
                Return Me.columnQuantidade
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoSuporteColumn As DataColumn
            Get
                Return Me.columnIDTipoSuporte
            End Get
        End Property
        
        Friend ReadOnly Property MedidaLarguraColumn As DataColumn
            Get
                Return Me.columnMedidaLargura
            End Get
        End Property
        
        Friend ReadOnly Property MedidaAlturaColumn As DataColumn
            Get
                Return Me.columnMedidaAltura
            End Get
        End Property
        
        Friend ReadOnly Property MedidaProfundidadeColumn As DataColumn
            Get
                Return Me.columnMedidaProfundidade
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoMedidaColumn As DataColumn
            Get
                Return Me.columnIDTipoMedida
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoEstadoConservacaoColumn As DataColumn
            Get
                Return Me.columnIDTipoEstadoConservacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDUFComponenteRow
            Get
                Return CType(Me.Rows(index),SFRDUFComponenteRow)
            End Get
        End Property
        
        Public Event SFRDUFComponenteRowChanged As SFRDUFComponenteRowChangeEventHandler
        
        Public Event SFRDUFComponenteRowChanging As SFRDUFComponenteRowChangeEventHandler
        
        Public Event SFRDUFComponenteRowDeleted As SFRDUFComponenteRowChangeEventHandler
        
        Public Event SFRDUFComponenteRowDeleting As SFRDUFComponenteRowChangeEventHandler
        
        Public Overloads Sub AddSFRDUFComponenteRow(ByVal row As SFRDUFComponenteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDUFComponenteRow(ByVal parentSFRDUFDescricaoFisicaRowBySFRDUFDescricaoFisicaSFRDUFComponente As SFRDUFDescricaoFisicaRow, ByVal IDNivelUA As Long, ByVal Quantidade As Decimal, ByVal parentTipoSuporteRowByTipoSuporteSFRDUFComponente As TipoSuporteRow, ByVal MedidaLargura As Decimal, ByVal MedidaAltura As Decimal, ByVal MedidaProfundidade As Decimal, ByVal parentTipoMedidaRowByTipoMedidaSFRDUFComponente As TipoMedidaRow, ByVal parentTipoEstadoConservacaoRowByTipoEstadoConservacaoSFRDUFComponente As TipoEstadoConservacaoRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDUFComponenteRow
            Dim rowSFRDUFComponenteRow As SFRDUFComponenteRow = CType(Me.NewRow,SFRDUFComponenteRow)
            rowSFRDUFComponenteRow.ItemArray = New Object() {Nothing, parentSFRDUFDescricaoFisicaRowBySFRDUFDescricaoFisicaSFRDUFComponente(0), IDNivelUA, Quantidade, parentTipoSuporteRowByTipoSuporteSFRDUFComponente(0), MedidaLargura, MedidaAltura, MedidaProfundidade, parentTipoMedidaRowByTipoMedidaSFRDUFComponente(0), parentTipoEstadoConservacaoRowByTipoEstadoConservacaoSFRDUFComponente(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDUFComponenteRow)
            Return rowSFRDUFComponenteRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As SFRDUFComponenteRow
            Return CType(Me.Rows.Find(New Object() {ID}),SFRDUFComponenteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDUFComponenteDataTable = CType(MyBase.Clone,SFRDUFComponenteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDUFComponenteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDNivelUA = Me.Columns("IDNivelUA")
            Me.columnQuantidade = Me.Columns("Quantidade")
            Me.columnIDTipoSuporte = Me.Columns("IDTipoSuporte")
            Me.columnMedidaLargura = Me.Columns("MedidaLargura")
            Me.columnMedidaAltura = Me.Columns("MedidaAltura")
            Me.columnMedidaProfundidade = Me.Columns("MedidaProfundidade")
            Me.columnIDTipoMedida = Me.Columns("IDTipoMedida")
            Me.columnIDTipoEstadoConservacao = Me.Columns("IDTipoEstadoConservacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDNivelUA = New DataColumn("IDNivelUA", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDNivelUA)
            Me.columnQuantidade = New DataColumn("Quantidade", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantidade)
            Me.columnIDTipoSuporte = New DataColumn("IDTipoSuporte", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoSuporte)
            Me.columnMedidaLargura = New DataColumn("MedidaLargura", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedidaLargura)
            Me.columnMedidaAltura = New DataColumn("MedidaAltura", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedidaAltura)
            Me.columnMedidaProfundidade = New DataColumn("MedidaProfundidade", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMedidaProfundidade)
            Me.columnIDTipoMedida = New DataColumn("IDTipoMedida", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoMedida)
            Me.columnIDTipoEstadoConservacao = New DataColumn("IDTipoEstadoConservacao", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoEstadoConservacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnQuantidade.AllowDBNull = false
            Me.columnIDTipoSuporte.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDUFComponenteRow() As SFRDUFComponenteRow
            Return CType(Me.NewRow,SFRDUFComponenteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDUFComponenteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDUFComponenteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDUFComponenteRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDUFComponenteRowChanged(Me, New SFRDUFComponenteRowChangeEvent(CType(e.Row,SFRDUFComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDUFComponenteRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDUFComponenteRowChanging(Me, New SFRDUFComponenteRowChangeEvent(CType(e.Row,SFRDUFComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDUFComponenteRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDUFComponenteRowDeleted(Me, New SFRDUFComponenteRowChangeEvent(CType(e.Row,SFRDUFComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDUFComponenteRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDUFComponenteRowDeleting(Me, New SFRDUFComponenteRowChangeEvent(CType(e.Row,SFRDUFComponenteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDUFComponenteRow(ByVal row As SFRDUFComponenteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFComponenteRow
        Inherits DataRow
        
        Private tableSFRDUFComponente As SFRDUFComponenteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDUFComponente = CType(Me.Table,SFRDUFComponenteDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableSFRDUFComponente.IDColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFComponente.IDColumn) = value
            End Set
        End Property
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDUFComponente.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFComponente.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDNivelUA As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFComponente.IDNivelUAColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFComponente.IDNivelUAColumn) = value
            End Set
        End Property
        
        Public Property Quantidade As Decimal
            Get
                Return CType(Me(Me.tableSFRDUFComponente.QuantidadeColumn),Decimal)
            End Get
            Set
                Me(Me.tableSFRDUFComponente.QuantidadeColumn) = value
            End Set
        End Property
        
        Public Property IDTipoSuporte As Long
            Get
                Return CType(Me(Me.tableSFRDUFComponente.IDTipoSuporteColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFComponente.IDTipoSuporteColumn) = value
            End Set
        End Property
        
        Public Property MedidaLargura As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFComponente.MedidaLarguraColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFComponente.MedidaLarguraColumn) = value
            End Set
        End Property
        
        Public Property MedidaAltura As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFComponente.MedidaAlturaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFComponente.MedidaAlturaColumn) = value
            End Set
        End Property
        
        Public Property MedidaProfundidade As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFComponente.MedidaProfundidadeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFComponente.MedidaProfundidadeColumn) = value
            End Set
        End Property
        
        Public Property IDTipoMedida As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFComponente.IDTipoMedidaColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFComponente.IDTipoMedidaColumn) = value
            End Set
        End Property
        
        Public Property IDTipoEstadoConservacao As Long
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFComponente.IDTipoEstadoConservacaoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFComponente.IDTipoEstadoConservacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFComponente.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFComponente.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDUFComponente.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDUFComponente.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoSuporteRow As TipoSuporteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoSuporteSFRDUFComponente")),TipoSuporteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoSuporteSFRDUFComponente"))
            End Set
        End Property
        
        Public Property TipoEstadoConservacaoRow As TipoEstadoConservacaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoEstadoConservacaoSFRDUFComponente")),TipoEstadoConservacaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoEstadoConservacaoSFRDUFComponente"))
            End Set
        End Property
        
        Public Property SFRDUFDescricaoFisicaRow As SFRDUFDescricaoFisicaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDUFDescricaoFisicaSFRDUFComponente")),SFRDUFDescricaoFisicaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDUFDescricaoFisicaSFRDUFComponente"))
            End Set
        End Property
        
        Public Property TipoMedidaRow As TipoMedidaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoMedidaSFRDUFComponente")),TipoMedidaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoMedidaSFRDUFComponente"))
            End Set
        End Property
        
        Public Property SFRDUnidadeFisicaRowParent As SFRDUnidadeFisicaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDUnidadeFisicaSFRDUFComponente")),SFRDUnidadeFisicaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDUnidadeFisicaSFRDUFComponente"))
            End Set
        End Property
        
        Public Function IsIDNivelUANull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFComponente.IDNivelUAColumn)
        End Function
        
        Public Sub SetIDNivelUANull()
            Me(Me.tableSFRDUFComponente.IDNivelUAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedidaLarguraNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFComponente.MedidaLarguraColumn)
        End Function
        
        Public Sub SetMedidaLarguraNull()
            Me(Me.tableSFRDUFComponente.MedidaLarguraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedidaAlturaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFComponente.MedidaAlturaColumn)
        End Function
        
        Public Sub SetMedidaAlturaNull()
            Me(Me.tableSFRDUFComponente.MedidaAlturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMedidaProfundidadeNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFComponente.MedidaProfundidadeColumn)
        End Function
        
        Public Sub SetMedidaProfundidadeNull()
            Me(Me.tableSFRDUFComponente.MedidaProfundidadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDTipoMedidaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFComponente.IDTipoMedidaColumn)
        End Function
        
        Public Sub SetIDTipoMedidaNull()
            Me(Me.tableSFRDUFComponente.IDTipoMedidaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDTipoEstadoConservacaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFComponente.IDTipoEstadoConservacaoColumn)
        End Function
        
        Public Sub SetIDTipoEstadoConservacaoNull()
            Me(Me.tableSFRDUFComponente.IDTipoEstadoConservacaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFComponente.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDUFComponente.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFTecnicasRegComponenteRows() As SFRDUFTecnicasRegComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDUFComponenteSFRDUFTecnicasRegComponente")),SFRDUFTecnicasRegComponenteRow())
        End Function
        
        Public Function GetSFRDUFMateriaisComponenteRows() As SFRDUFMateriaisComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDUFComponenteSFRDUFMateriaisComponente")),SFRDUFMateriaisComponenteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFComponenteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDUFComponenteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDUFComponenteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDUFComponenteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoDensidadeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoDensidade")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoDensidadeRow
            Get
                Return CType(Me.Rows(index),TipoDensidadeRow)
            End Get
        End Property
        
        Public Event TipoDensidadeRowChanged As TipoDensidadeRowChangeEventHandler
        
        Public Event TipoDensidadeRowChanging As TipoDensidadeRowChangeEventHandler
        
        Public Event TipoDensidadeRowDeleted As TipoDensidadeRowChangeEventHandler
        
        Public Event TipoDensidadeRowDeleting As TipoDensidadeRowChangeEventHandler
        
        Public Overloads Sub AddTipoDensidadeRow(ByVal row As TipoDensidadeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoDensidadeRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoDensidadeRow
            Dim rowTipoDensidadeRow As TipoDensidadeRow = CType(Me.NewRow,TipoDensidadeRow)
            rowTipoDensidadeRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoDensidadeRow)
            Return rowTipoDensidadeRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoDensidadeRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoDensidadeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoDensidadeDataTable = CType(MyBase.Clone,TipoDensidadeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoDensidadeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoDensidadeRow() As TipoDensidadeRow
            Return CType(Me.NewRow,TipoDensidadeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoDensidadeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoDensidadeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoDensidadeRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoDensidadeRowChanged(Me, New TipoDensidadeRowChangeEvent(CType(e.Row,TipoDensidadeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoDensidadeRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoDensidadeRowChanging(Me, New TipoDensidadeRowChangeEvent(CType(e.Row,TipoDensidadeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoDensidadeRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoDensidadeRowDeleted(Me, New TipoDensidadeRowChangeEvent(CType(e.Row,TipoDensidadeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoDensidadeRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoDensidadeRowDeleting(Me, New TipoDensidadeRowChangeEvent(CType(e.Row,TipoDensidadeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoDensidadeRow(ByVal row As TipoDensidadeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoDensidadeRow
        Inherits DataRow
        
        Private tableTipoDensidade As TipoDensidadeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoDensidade = CType(Me.Table,TipoDensidadeDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoDensidade.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoDensidade.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoDensidade.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoDensidade.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoDensidade.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoDensidade.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoDensidade.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoDensidade.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoDensidade.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoDensidade.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDAvaliacaoRelRows() As SFRDAvaliacaoRelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoDensidadeSFRDAvaliacaoRel")),SFRDAvaliacaoRelRow())
        End Function
        
        Public Function GetTipoSubDensidadeRows() As TipoSubDensidadeRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoDensidadeTipoSubDensidade")),TipoSubDensidadeRow())
        End Function
        
        Public Function GetSFRDAvaliacaoRows() As SFRDAvaliacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoDensidadeSFRDAvaliacao")),SFRDAvaliacaoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoDensidadeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoDensidadeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoDensidadeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoDensidadeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDConteudoEEstruturaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnConteudoInformacional As DataColumn
        
        Private columnIncorporacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDConteudoEEstrutura")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property ConteudoInformacionalColumn As DataColumn
            Get
                Return Me.columnConteudoInformacional
            End Get
        End Property
        
        Friend ReadOnly Property IncorporacaoColumn As DataColumn
            Get
                Return Me.columnIncorporacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDConteudoEEstruturaRow
            Get
                Return CType(Me.Rows(index),SFRDConteudoEEstruturaRow)
            End Get
        End Property
        
        Public Event SFRDConteudoEEstruturaRowChanged As SFRDConteudoEEstruturaRowChangeEventHandler
        
        Public Event SFRDConteudoEEstruturaRowChanging As SFRDConteudoEEstruturaRowChangeEventHandler
        
        Public Event SFRDConteudoEEstruturaRowDeleted As SFRDConteudoEEstruturaRowChangeEventHandler
        
        Public Event SFRDConteudoEEstruturaRowDeleting As SFRDConteudoEEstruturaRowChangeEventHandler
        
        Public Overloads Sub AddSFRDConteudoEEstruturaRow(ByVal row As SFRDConteudoEEstruturaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDConteudoEEstruturaRow(ByVal parentFRDBaseRowByFRDBaseSFRDConteudoEEstrutura As FRDBaseRow, ByVal ConteudoInformacional As String, ByVal Incorporacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDConteudoEEstruturaRow
            Dim rowSFRDConteudoEEstruturaRow As SFRDConteudoEEstruturaRow = CType(Me.NewRow,SFRDConteudoEEstruturaRow)
            rowSFRDConteudoEEstruturaRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDConteudoEEstrutura(0), ConteudoInformacional, Incorporacao, Versao, isDeleted}
            Me.Rows.Add(rowSFRDConteudoEEstruturaRow)
            Return rowSFRDConteudoEEstruturaRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDConteudoEEstruturaRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDConteudoEEstruturaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDConteudoEEstruturaDataTable = CType(MyBase.Clone,SFRDConteudoEEstruturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDConteudoEEstruturaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnConteudoInformacional = Me.Columns("ConteudoInformacional")
            Me.columnIncorporacao = Me.Columns("Incorporacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnConteudoInformacional = New DataColumn("ConteudoInformacional", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConteudoInformacional)
            Me.columnIncorporacao = New DataColumn("Incorporacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIncorporacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnConteudoInformacional.MaxLength = 1073741823
            Me.columnIncorporacao.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDConteudoEEstruturaRow() As SFRDConteudoEEstruturaRow
            Return CType(Me.NewRow,SFRDConteudoEEstruturaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDConteudoEEstruturaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDConteudoEEstruturaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDConteudoEEstruturaRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDConteudoEEstruturaRowChanged(Me, New SFRDConteudoEEstruturaRowChangeEvent(CType(e.Row,SFRDConteudoEEstruturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDConteudoEEstruturaRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDConteudoEEstruturaRowChanging(Me, New SFRDConteudoEEstruturaRowChangeEvent(CType(e.Row,SFRDConteudoEEstruturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDConteudoEEstruturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDConteudoEEstruturaRowDeleted(Me, New SFRDConteudoEEstruturaRowChangeEvent(CType(e.Row,SFRDConteudoEEstruturaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDConteudoEEstruturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDConteudoEEstruturaRowDeleting(Me, New SFRDConteudoEEstruturaRowChangeEvent(CType(e.Row,SFRDConteudoEEstruturaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDConteudoEEstruturaRow(ByVal row As SFRDConteudoEEstruturaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDConteudoEEstruturaRow
        Inherits DataRow
        
        Private tableSFRDConteudoEEstrutura As SFRDConteudoEEstruturaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDConteudoEEstrutura = CType(Me.Table,SFRDConteudoEEstruturaDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDConteudoEEstrutura.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDConteudoEEstrutura.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property ConteudoInformacional As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDConteudoEEstrutura.ConteudoInformacionalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDConteudoEEstrutura.ConteudoInformacionalColumn) = value
            End Set
        End Property
        
        Public Property Incorporacao As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDConteudoEEstrutura.IncorporacaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDConteudoEEstrutura.IncorporacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDConteudoEEstrutura.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDConteudoEEstrutura.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDConteudoEEstrutura.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDConteudoEEstrutura.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDConteudoEEstrutura")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDConteudoEEstrutura"))
            End Set
        End Property
        
        Public Function IsConteudoInformacionalNull() As Boolean
            Return Me.IsNull(Me.tableSFRDConteudoEEstrutura.ConteudoInformacionalColumn)
        End Function
        
        Public Sub SetConteudoInformacionalNull()
            Me(Me.tableSFRDConteudoEEstrutura.ConteudoInformacionalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIncorporacaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDConteudoEEstrutura.IncorporacaoColumn)
        End Function
        
        Public Sub SetIncorporacaoNull()
            Me(Me.tableSFRDConteudoEEstrutura.IncorporacaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDConteudoEEstrutura.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDConteudoEEstrutura.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDConteudoEEstruturaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDConteudoEEstruturaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDConteudoEEstruturaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDConteudoEEstruturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoSubDensidadeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnIDTipoDensidade As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoSubDensidade")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoDensidadeColumn As DataColumn
            Get
                Return Me.columnIDTipoDensidade
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoSubDensidadeRow
            Get
                Return CType(Me.Rows(index),TipoSubDensidadeRow)
            End Get
        End Property
        
        Public Event TipoSubDensidadeRowChanged As TipoSubDensidadeRowChangeEventHandler
        
        Public Event TipoSubDensidadeRowChanging As TipoSubDensidadeRowChangeEventHandler
        
        Public Event TipoSubDensidadeRowDeleted As TipoSubDensidadeRowChangeEventHandler
        
        Public Event TipoSubDensidadeRowDeleting As TipoSubDensidadeRowChangeEventHandler
        
        Public Overloads Sub AddTipoSubDensidadeRow(ByVal row As TipoSubDensidadeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoSubDensidadeRow(ByVal Designacao As String, ByVal parentTipoDensidadeRowByTipoDensidadeTipoSubDensidade As TipoDensidadeRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoSubDensidadeRow
            Dim rowTipoSubDensidadeRow As TipoSubDensidadeRow = CType(Me.NewRow,TipoSubDensidadeRow)
            rowTipoSubDensidadeRow.ItemArray = New Object() {Nothing, Designacao, parentTipoDensidadeRowByTipoDensidadeTipoSubDensidade(0), Versao, isDeleted}
            Me.Rows.Add(rowTipoSubDensidadeRow)
            Return rowTipoSubDensidadeRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoSubDensidadeRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoSubDensidadeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoSubDensidadeDataTable = CType(MyBase.Clone,TipoSubDensidadeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoSubDensidadeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnIDTipoDensidade = Me.Columns("IDTipoDensidade")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnIDTipoDensidade = New DataColumn("IDTipoDensidade", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoDensidade)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnIDTipoDensidade.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoSubDensidadeRow() As TipoSubDensidadeRow
            Return CType(Me.NewRow,TipoSubDensidadeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoSubDensidadeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoSubDensidadeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoSubDensidadeRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoSubDensidadeRowChanged(Me, New TipoSubDensidadeRowChangeEvent(CType(e.Row,TipoSubDensidadeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoSubDensidadeRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoSubDensidadeRowChanging(Me, New TipoSubDensidadeRowChangeEvent(CType(e.Row,TipoSubDensidadeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoSubDensidadeRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoSubDensidadeRowDeleted(Me, New TipoSubDensidadeRowChangeEvent(CType(e.Row,TipoSubDensidadeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoSubDensidadeRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoSubDensidadeRowDeleting(Me, New TipoSubDensidadeRowChangeEvent(CType(e.Row,TipoSubDensidadeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoSubDensidadeRow(ByVal row As TipoSubDensidadeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoSubDensidadeRow
        Inherits DataRow
        
        Private tableTipoSubDensidade As TipoSubDensidadeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoSubDensidade = CType(Me.Table,TipoSubDensidadeDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoSubDensidade.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoSubDensidade.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoSubDensidade.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoSubDensidade.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property IDTipoDensidade As Long
            Get
                Return CType(Me(Me.tableTipoSubDensidade.IDTipoDensidadeColumn),Long)
            End Get
            Set
                Me(Me.tableTipoSubDensidade.IDTipoDensidadeColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoSubDensidade.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoSubDensidade.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoSubDensidade.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoSubDensidade.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoDensidadeRow As TipoDensidadeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoDensidadeTipoSubDensidade")),TipoDensidadeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoDensidadeTipoSubDensidade"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoSubDensidade.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoSubDensidade.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDAvaliacaoRelRows() As SFRDAvaliacaoRelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoSubDensidadeSFRDAvaliacaoRel")),SFRDAvaliacaoRelRow())
        End Function
        
        Public Function GetSFRDAvaliacaoRows() As SFRDAvaliacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoSubDensidadeSFRDAvaliacao")),SFRDAvaliacaoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoSubDensidadeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoSubDensidadeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoSubDensidadeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoSubDensidadeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDContextoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnHistoriaAdministrativa As DataColumn
        
        Private columnHistoriaCustodial As DataColumn
        
        Private columnFonteImediataDeAquisicao As DataColumn
        
        Private columnSerieAberta As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDContexto")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property HistoriaAdministrativaColumn As DataColumn
            Get
                Return Me.columnHistoriaAdministrativa
            End Get
        End Property
        
        Friend ReadOnly Property HistoriaCustodialColumn As DataColumn
            Get
                Return Me.columnHistoriaCustodial
            End Get
        End Property
        
        Friend ReadOnly Property FonteImediataDeAquisicaoColumn As DataColumn
            Get
                Return Me.columnFonteImediataDeAquisicao
            End Get
        End Property
        
        Friend ReadOnly Property SerieAbertaColumn As DataColumn
            Get
                Return Me.columnSerieAberta
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDContextoRow
            Get
                Return CType(Me.Rows(index),SFRDContextoRow)
            End Get
        End Property
        
        Public Event SFRDContextoRowChanged As SFRDContextoRowChangeEventHandler
        
        Public Event SFRDContextoRowChanging As SFRDContextoRowChangeEventHandler
        
        Public Event SFRDContextoRowDeleted As SFRDContextoRowChangeEventHandler
        
        Public Event SFRDContextoRowDeleting As SFRDContextoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDContextoRow(ByVal row As SFRDContextoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDContextoRow(ByVal parentFRDBaseRowByFRDBaseSFRDContexto As FRDBaseRow, ByVal HistoriaAdministrativa As String, ByVal HistoriaCustodial As String, ByVal FonteImediataDeAquisicao As String, ByVal SerieAberta As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDContextoRow
            Dim rowSFRDContextoRow As SFRDContextoRow = CType(Me.NewRow,SFRDContextoRow)
            rowSFRDContextoRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDContexto(0), HistoriaAdministrativa, HistoriaCustodial, FonteImediataDeAquisicao, SerieAberta, Versao, isDeleted}
            Me.Rows.Add(rowSFRDContextoRow)
            Return rowSFRDContextoRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDContextoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDContextoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDContextoDataTable = CType(MyBase.Clone,SFRDContextoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDContextoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnHistoriaAdministrativa = Me.Columns("HistoriaAdministrativa")
            Me.columnHistoriaCustodial = Me.Columns("HistoriaCustodial")
            Me.columnFonteImediataDeAquisicao = Me.Columns("FonteImediataDeAquisicao")
            Me.columnSerieAberta = Me.Columns("SerieAberta")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnHistoriaAdministrativa = New DataColumn("HistoriaAdministrativa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHistoriaAdministrativa)
            Me.columnHistoriaCustodial = New DataColumn("HistoriaCustodial", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHistoriaCustodial)
            Me.columnFonteImediataDeAquisicao = New DataColumn("FonteImediataDeAquisicao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFonteImediataDeAquisicao)
            Me.columnSerieAberta = New DataColumn("SerieAberta", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSerieAberta)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnHistoriaAdministrativa.MaxLength = 1073741823
            Me.columnHistoriaCustodial.MaxLength = 1073741823
            Me.columnFonteImediataDeAquisicao.MaxLength = 1073741823
            Me.columnSerieAberta.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDContextoRow() As SFRDContextoRow
            Return CType(Me.NewRow,SFRDContextoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDContextoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDContextoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDContextoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDContextoRowChanged(Me, New SFRDContextoRowChangeEvent(CType(e.Row,SFRDContextoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDContextoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDContextoRowChanging(Me, New SFRDContextoRowChangeEvent(CType(e.Row,SFRDContextoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDContextoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDContextoRowDeleted(Me, New SFRDContextoRowChangeEvent(CType(e.Row,SFRDContextoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDContextoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDContextoRowDeleting(Me, New SFRDContextoRowChangeEvent(CType(e.Row,SFRDContextoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDContextoRow(ByVal row As SFRDContextoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDContextoRow
        Inherits DataRow
        
        Private tableSFRDContexto As SFRDContextoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDContexto = CType(Me.Table,SFRDContextoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDContexto.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDContexto.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property HistoriaAdministrativa As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDContexto.HistoriaAdministrativaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDContexto.HistoriaAdministrativaColumn) = value
            End Set
        End Property
        
        Public Property HistoriaCustodial As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDContexto.HistoriaCustodialColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDContexto.HistoriaCustodialColumn) = value
            End Set
        End Property
        
        Public Property FonteImediataDeAquisicao As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDContexto.FonteImediataDeAquisicaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDContexto.FonteImediataDeAquisicaoColumn) = value
            End Set
        End Property
        
        Public Property SerieAberta As Boolean
            Get
                Return CType(Me(Me.tableSFRDContexto.SerieAbertaColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDContexto.SerieAbertaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDContexto.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDContexto.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDContexto.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDContexto.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDContexto")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDContexto"))
            End Set
        End Property
        
        Public Function IsHistoriaAdministrativaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDContexto.HistoriaAdministrativaColumn)
        End Function
        
        Public Sub SetHistoriaAdministrativaNull()
            Me(Me.tableSFRDContexto.HistoriaAdministrativaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHistoriaCustodialNull() As Boolean
            Return Me.IsNull(Me.tableSFRDContexto.HistoriaCustodialColumn)
        End Function
        
        Public Sub SetHistoriaCustodialNull()
            Me(Me.tableSFRDContexto.HistoriaCustodialColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFonteImediataDeAquisicaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDContexto.FonteImediataDeAquisicaoColumn)
        End Function
        
        Public Sub SetFonteImediataDeAquisicaoNull()
            Me(Me.tableSFRDContexto.FonteImediataDeAquisicaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDContexto.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDContexto.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDContextoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDContextoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDContextoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDContextoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFTecnicasRegComponenteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDComponente As DataColumn
        
        Private columnIDTecnicaRegisto As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDUFTecnicasRegComponente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDComponenteColumn As DataColumn
            Get
                Return Me.columnIDComponente
            End Get
        End Property
        
        Friend ReadOnly Property IDTecnicaRegistoColumn As DataColumn
            Get
                Return Me.columnIDTecnicaRegisto
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDUFTecnicasRegComponenteRow
            Get
                Return CType(Me.Rows(index),SFRDUFTecnicasRegComponenteRow)
            End Get
        End Property
        
        Public Event SFRDUFTecnicasRegComponenteRowChanged As SFRDUFTecnicasRegComponenteRowChangeEventHandler
        
        Public Event SFRDUFTecnicasRegComponenteRowChanging As SFRDUFTecnicasRegComponenteRowChangeEventHandler
        
        Public Event SFRDUFTecnicasRegComponenteRowDeleted As SFRDUFTecnicasRegComponenteRowChangeEventHandler
        
        Public Event SFRDUFTecnicasRegComponenteRowDeleting As SFRDUFTecnicasRegComponenteRowChangeEventHandler
        
        Public Overloads Sub AddSFRDUFTecnicasRegComponenteRow(ByVal row As SFRDUFTecnicasRegComponenteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDUFTecnicasRegComponenteRow(ByVal parentSFRDUFComponenteRowBySFRDUFComponenteSFRDUFTecnicasRegComponente As SFRDUFComponenteRow, ByVal parentTipoTecnicaRegistoRowByTipoTecnicaRegistoSFRDUFTecnicasRegComponente As TipoTecnicaRegistoRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDUFTecnicasRegComponenteRow
            Dim rowSFRDUFTecnicasRegComponenteRow As SFRDUFTecnicasRegComponenteRow = CType(Me.NewRow,SFRDUFTecnicasRegComponenteRow)
            rowSFRDUFTecnicasRegComponenteRow.ItemArray = New Object() {parentSFRDUFComponenteRowBySFRDUFComponenteSFRDUFTecnicasRegComponente(0), parentTipoTecnicaRegistoRowByTipoTecnicaRegistoSFRDUFTecnicasRegComponente(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDUFTecnicasRegComponenteRow)
            Return rowSFRDUFTecnicasRegComponenteRow
        End Function
        
        Public Function FindByIDComponenteIDTecnicaRegisto(ByVal IDComponente As Long, ByVal IDTecnicaRegisto As Long) As SFRDUFTecnicasRegComponenteRow
            Return CType(Me.Rows.Find(New Object() {IDComponente, IDTecnicaRegisto}),SFRDUFTecnicasRegComponenteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDUFTecnicasRegComponenteDataTable = CType(MyBase.Clone,SFRDUFTecnicasRegComponenteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDUFTecnicasRegComponenteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDComponente = Me.Columns("IDComponente")
            Me.columnIDTecnicaRegisto = Me.Columns("IDTecnicaRegisto")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDComponente = New DataColumn("IDComponente", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDComponente)
            Me.columnIDTecnicaRegisto = New DataColumn("IDTecnicaRegisto", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTecnicaRegisto)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDComponente, Me.columnIDTecnicaRegisto}, true))
            Me.columnIDComponente.AllowDBNull = false
            Me.columnIDTecnicaRegisto.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDUFTecnicasRegComponenteRow() As SFRDUFTecnicasRegComponenteRow
            Return CType(Me.NewRow,SFRDUFTecnicasRegComponenteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDUFTecnicasRegComponenteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDUFTecnicasRegComponenteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDUFTecnicasRegComponenteRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDUFTecnicasRegComponenteRowChanged(Me, New SFRDUFTecnicasRegComponenteRowChangeEvent(CType(e.Row,SFRDUFTecnicasRegComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDUFTecnicasRegComponenteRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDUFTecnicasRegComponenteRowChanging(Me, New SFRDUFTecnicasRegComponenteRowChangeEvent(CType(e.Row,SFRDUFTecnicasRegComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDUFTecnicasRegComponenteRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDUFTecnicasRegComponenteRowDeleted(Me, New SFRDUFTecnicasRegComponenteRowChangeEvent(CType(e.Row,SFRDUFTecnicasRegComponenteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDUFTecnicasRegComponenteRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDUFTecnicasRegComponenteRowDeleting(Me, New SFRDUFTecnicasRegComponenteRowChangeEvent(CType(e.Row,SFRDUFTecnicasRegComponenteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDUFTecnicasRegComponenteRow(ByVal row As SFRDUFTecnicasRegComponenteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFTecnicasRegComponenteRow
        Inherits DataRow
        
        Private tableSFRDUFTecnicasRegComponente As SFRDUFTecnicasRegComponenteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDUFTecnicasRegComponente = CType(Me.Table,SFRDUFTecnicasRegComponenteDataTable)
        End Sub
        
        Public Property IDComponente As Long
            Get
                Return CType(Me(Me.tableSFRDUFTecnicasRegComponente.IDComponenteColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFTecnicasRegComponente.IDComponenteColumn) = value
            End Set
        End Property
        
        Public Property IDTecnicaRegisto As Long
            Get
                Return CType(Me(Me.tableSFRDUFTecnicasRegComponente.IDTecnicaRegistoColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFTecnicasRegComponente.IDTecnicaRegistoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFTecnicasRegComponente.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFTecnicasRegComponente.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDUFTecnicasRegComponente.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDUFTecnicasRegComponente.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoTecnicaRegistoRow As TipoTecnicaRegistoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoTecnicaRegistoSFRDUFTecnicasRegComponente")),TipoTecnicaRegistoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoTecnicaRegistoSFRDUFTecnicasRegComponente"))
            End Set
        End Property
        
        Public Property SFRDUFComponenteRow As SFRDUFComponenteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDUFComponenteSFRDUFTecnicasRegComponente")),SFRDUFComponenteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDUFComponenteSFRDUFTecnicasRegComponente"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFTecnicasRegComponente.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDUFTecnicasRegComponente.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFTecnicasRegComponenteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDUFTecnicasRegComponenteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDUFTecnicasRegComponenteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDUFTecnicasRegComponenteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMedidaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoMedida")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoMedidaRow
            Get
                Return CType(Me.Rows(index),TipoMedidaRow)
            End Get
        End Property
        
        Public Event TipoMedidaRowChanged As TipoMedidaRowChangeEventHandler
        
        Public Event TipoMedidaRowChanging As TipoMedidaRowChangeEventHandler
        
        Public Event TipoMedidaRowDeleted As TipoMedidaRowChangeEventHandler
        
        Public Event TipoMedidaRowDeleting As TipoMedidaRowChangeEventHandler
        
        Public Overloads Sub AddTipoMedidaRow(ByVal row As TipoMedidaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoMedidaRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoMedidaRow
            Dim rowTipoMedidaRow As TipoMedidaRow = CType(Me.NewRow,TipoMedidaRow)
            rowTipoMedidaRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoMedidaRow)
            Return rowTipoMedidaRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoMedidaRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoMedidaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoMedidaDataTable = CType(MyBase.Clone,TipoMedidaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoMedidaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnDesignacao}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.Unique = true
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoMedidaRow() As TipoMedidaRow
            Return CType(Me.NewRow,TipoMedidaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoMedidaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoMedidaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoMedidaRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoMedidaRowChanged(Me, New TipoMedidaRowChangeEvent(CType(e.Row,TipoMedidaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoMedidaRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoMedidaRowChanging(Me, New TipoMedidaRowChangeEvent(CType(e.Row,TipoMedidaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoMedidaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoMedidaRowDeleted(Me, New TipoMedidaRowChangeEvent(CType(e.Row,TipoMedidaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoMedidaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoMedidaRowDeleting(Me, New TipoMedidaRowChangeEvent(CType(e.Row,TipoMedidaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoMedidaRow(ByVal row As TipoMedidaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMedidaRow
        Inherits DataRow
        
        Private tableTipoMedida As TipoMedidaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoMedida = CType(Me.Table,TipoMedidaDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoMedida.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoMedida.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoMedida.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoMedida.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoMedida.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoMedida.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoMedida.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoMedida.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoMedida.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoMedida.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFComponenteRows() As SFRDUFComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoMedidaSFRDUFComponente")),SFRDUFComponenteRow())
        End Function
        
        Public Function GetSFRDUFDescricaoFisicaRows() As SFRDUFDescricaoFisicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoMedidaSFRDUFDescricaoFisica")),SFRDUFDescricaoFisicaRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMedidaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoMedidaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoMedidaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoMedidaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDTipoNivel As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnCatCode As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("Nivel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoNivelColumn As DataColumn
            Get
                Return Me.columnIDTipoNivel
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property CatCodeColumn As DataColumn
            Get
                Return Me.columnCatCode
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NivelRow
            Get
                Return CType(Me.Rows(index),NivelRow)
            End Get
        End Property
        
        Public Event NivelRowChanged As NivelRowChangeEventHandler
        
        Public Event NivelRowChanging As NivelRowChangeEventHandler
        
        Public Event NivelRowDeleted As NivelRowChangeEventHandler
        
        Public Event NivelRowDeleting As NivelRowChangeEventHandler
        
        Public Overloads Sub AddNivelRow(ByVal row As NivelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNivelRow(ByVal parentTipoNivelRowByTipoNivelNivel As TipoNivelRow, ByVal Codigo As String, ByVal CatCode As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As NivelRow
            Dim rowNivelRow As NivelRow = CType(Me.NewRow,NivelRow)
            rowNivelRow.ItemArray = New Object() {Nothing, parentTipoNivelRowByTipoNivelNivel(0), Codigo, CatCode, Versao, isDeleted}
            Me.Rows.Add(rowNivelRow)
            Return rowNivelRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As NivelRow
            Return CType(Me.Rows.Find(New Object() {ID}),NivelRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NivelDataTable = CType(MyBase.Clone,NivelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NivelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDTipoNivel = Me.Columns("IDTipoNivel")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnCatCode = Me.Columns("CatCode")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDTipoNivel = New DataColumn("IDTipoNivel", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoNivel)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnCatCode = New DataColumn("CatCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCatCode)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnIDTipoNivel.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.MaxLength = 50
            Me.columnCatCode.AllowDBNull = false
            Me.columnCatCode.MaxLength = 6
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewNivelRow() As NivelRow
            Return CType(Me.NewRow,NivelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NivelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NivelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NivelRowChangedEvent) Is Nothing) Then
                RaiseEvent NivelRowChanged(Me, New NivelRowChangeEvent(CType(e.Row,NivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NivelRowChangingEvent) Is Nothing) Then
                RaiseEvent NivelRowChanging(Me, New NivelRowChangeEvent(CType(e.Row,NivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NivelRowDeletedEvent) Is Nothing) Then
                RaiseEvent NivelRowDeleted(Me, New NivelRowChangeEvent(CType(e.Row,NivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NivelRowDeletingEvent) Is Nothing) Then
                RaiseEvent NivelRowDeleting(Me, New NivelRowChangeEvent(CType(e.Row,NivelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNivelRow(ByVal row As NivelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelRow
        Inherits DataRow
        
        Private tableNivel As NivelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNivel = CType(Me.Table,NivelDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableNivel.IDColumn),Long)
            End Get
            Set
                Me(Me.tableNivel.IDColumn) = value
            End Set
        End Property
        
        Public Property IDTipoNivel As Long
            Get
                Return CType(Me(Me.tableNivel.IDTipoNivelColumn),Long)
            End Get
            Set
                Me(Me.tableNivel.IDTipoNivelColumn) = value
            End Set
        End Property
        
        Public Property Codigo As String
            Get
                Return CType(Me(Me.tableNivel.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableNivel.CodigoColumn) = value
            End Set
        End Property
        
        Public Property CatCode As String
            Get
                Return CType(Me(Me.tableNivel.CatCodeColumn),String)
            End Get
            Set
                Me(Me.tableNivel.CatCodeColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableNivel.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNivel.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableNivel.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableNivel.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoNivelRow As TipoNivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNivelNivel")),TipoNivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNivelNivel"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableNivel.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableNivel.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetRelacaoHierarquicaRowsByNivelRelacaoHierarquicaUpper() As RelacaoHierarquicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelRelacaoHierarquicaUpper")),RelacaoHierarquicaRow())
        End Function
        
        Public Function GetRelacaoHierarquicaRowsByNivelRelacaoHierarquica() As RelacaoHierarquicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelRelacaoHierarquica")),RelacaoHierarquicaRow())
        End Function
        
        Public Function GetSecurableObjectNivelRows() As SecurableObjectNivelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelSecurableObjectNivel")),SecurableObjectNivelRow())
        End Function
        
        Public Function GetSFRDAvaliacaoRelRows() As SFRDAvaliacaoRelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelSFRDAvaliacaoRel")),SFRDAvaliacaoRelRow())
        End Function
        
        Public Function GetSFRDUnidadeFisicaRows() As SFRDUnidadeFisicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelSFRDUnidadeFisica")),SFRDUnidadeFisicaRow())
        End Function
        
        Public Function GetNivelControloAutRows() As NivelControloAutRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelNivelControloAut")),NivelControloAutRow())
        End Function
        
        Public Function GetNivelUnidadeFisicaCodigoRows() As NivelUnidadeFisicaCodigoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelNivelUnidadeFisicaCodigo")),NivelUnidadeFisicaCodigoRow())
        End Function
        
        Public Function GetFRDBaseRows() As FRDBaseRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelFRDBase")),FRDBaseRow())
        End Function
        
        Public Function GetNivelDesignadoRows() As NivelDesignadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NivelNivelDesignado")),NivelDesignadoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NivelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NivelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NivelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NivelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDDocumentacaoAssociadaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnExistenciaDeOriginais As DataColumn
        
        Private columnExistenciaDeCopias As DataColumn
        
        Private columnUnidadesRelacionadas As DataColumn
        
        Private columnNotaDePublicacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDDocumentacaoAssociada")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property ExistenciaDeOriginaisColumn As DataColumn
            Get
                Return Me.columnExistenciaDeOriginais
            End Get
        End Property
        
        Friend ReadOnly Property ExistenciaDeCopiasColumn As DataColumn
            Get
                Return Me.columnExistenciaDeCopias
            End Get
        End Property
        
        Friend ReadOnly Property UnidadesRelacionadasColumn As DataColumn
            Get
                Return Me.columnUnidadesRelacionadas
            End Get
        End Property
        
        Friend ReadOnly Property NotaDePublicacaoColumn As DataColumn
            Get
                Return Me.columnNotaDePublicacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDDocumentacaoAssociadaRow
            Get
                Return CType(Me.Rows(index),SFRDDocumentacaoAssociadaRow)
            End Get
        End Property
        
        Public Event SFRDDocumentacaoAssociadaRowChanged As SFRDDocumentacaoAssociadaRowChangeEventHandler
        
        Public Event SFRDDocumentacaoAssociadaRowChanging As SFRDDocumentacaoAssociadaRowChangeEventHandler
        
        Public Event SFRDDocumentacaoAssociadaRowDeleted As SFRDDocumentacaoAssociadaRowChangeEventHandler
        
        Public Event SFRDDocumentacaoAssociadaRowDeleting As SFRDDocumentacaoAssociadaRowChangeEventHandler
        
        Public Overloads Sub AddSFRDDocumentacaoAssociadaRow(ByVal row As SFRDDocumentacaoAssociadaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDDocumentacaoAssociadaRow(ByVal parentFRDBaseRowByFRDBaseSFRDDocumentacaoAssociada As FRDBaseRow, ByVal ExistenciaDeOriginais As String, ByVal ExistenciaDeCopias As String, ByVal UnidadesRelacionadas As String, ByVal NotaDePublicacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDDocumentacaoAssociadaRow
            Dim rowSFRDDocumentacaoAssociadaRow As SFRDDocumentacaoAssociadaRow = CType(Me.NewRow,SFRDDocumentacaoAssociadaRow)
            rowSFRDDocumentacaoAssociadaRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDDocumentacaoAssociada(0), ExistenciaDeOriginais, ExistenciaDeCopias, UnidadesRelacionadas, NotaDePublicacao, Versao, isDeleted}
            Me.Rows.Add(rowSFRDDocumentacaoAssociadaRow)
            Return rowSFRDDocumentacaoAssociadaRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDDocumentacaoAssociadaRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDDocumentacaoAssociadaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDDocumentacaoAssociadaDataTable = CType(MyBase.Clone,SFRDDocumentacaoAssociadaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDDocumentacaoAssociadaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnExistenciaDeOriginais = Me.Columns("ExistenciaDeOriginais")
            Me.columnExistenciaDeCopias = Me.Columns("ExistenciaDeCopias")
            Me.columnUnidadesRelacionadas = Me.Columns("UnidadesRelacionadas")
            Me.columnNotaDePublicacao = Me.Columns("NotaDePublicacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnExistenciaDeOriginais = New DataColumn("ExistenciaDeOriginais", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExistenciaDeOriginais)
            Me.columnExistenciaDeCopias = New DataColumn("ExistenciaDeCopias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExistenciaDeCopias)
            Me.columnUnidadesRelacionadas = New DataColumn("UnidadesRelacionadas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnidadesRelacionadas)
            Me.columnNotaDePublicacao = New DataColumn("NotaDePublicacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotaDePublicacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnExistenciaDeOriginais.MaxLength = 1073741823
            Me.columnExistenciaDeCopias.MaxLength = 1073741823
            Me.columnUnidadesRelacionadas.MaxLength = 1073741823
            Me.columnNotaDePublicacao.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDDocumentacaoAssociadaRow() As SFRDDocumentacaoAssociadaRow
            Return CType(Me.NewRow,SFRDDocumentacaoAssociadaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDDocumentacaoAssociadaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDDocumentacaoAssociadaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDDocumentacaoAssociadaRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDDocumentacaoAssociadaRowChanged(Me, New SFRDDocumentacaoAssociadaRowChangeEvent(CType(e.Row,SFRDDocumentacaoAssociadaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDDocumentacaoAssociadaRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDDocumentacaoAssociadaRowChanging(Me, New SFRDDocumentacaoAssociadaRowChangeEvent(CType(e.Row,SFRDDocumentacaoAssociadaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDDocumentacaoAssociadaRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDDocumentacaoAssociadaRowDeleted(Me, New SFRDDocumentacaoAssociadaRowChangeEvent(CType(e.Row,SFRDDocumentacaoAssociadaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDDocumentacaoAssociadaRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDDocumentacaoAssociadaRowDeleting(Me, New SFRDDocumentacaoAssociadaRowChangeEvent(CType(e.Row,SFRDDocumentacaoAssociadaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDDocumentacaoAssociadaRow(ByVal row As SFRDDocumentacaoAssociadaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDDocumentacaoAssociadaRow
        Inherits DataRow
        
        Private tableSFRDDocumentacaoAssociada As SFRDDocumentacaoAssociadaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDDocumentacaoAssociada = CType(Me.Table,SFRDDocumentacaoAssociadaDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDDocumentacaoAssociada.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDDocumentacaoAssociada.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property ExistenciaDeOriginais As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeOriginaisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeOriginaisColumn) = value
            End Set
        End Property
        
        Public Property ExistenciaDeCopias As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeCopiasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeCopiasColumn) = value
            End Set
        End Property
        
        Public Property UnidadesRelacionadas As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDocumentacaoAssociada.UnidadesRelacionadasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDocumentacaoAssociada.UnidadesRelacionadasColumn) = value
            End Set
        End Property
        
        Public Property NotaDePublicacao As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDocumentacaoAssociada.NotaDePublicacaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDocumentacaoAssociada.NotaDePublicacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDocumentacaoAssociada.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDocumentacaoAssociada.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDDocumentacaoAssociada.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDDocumentacaoAssociada.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDDocumentacaoAssociada")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDDocumentacaoAssociada"))
            End Set
        End Property
        
        Public Function IsExistenciaDeOriginaisNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeOriginaisColumn)
        End Function
        
        Public Sub SetExistenciaDeOriginaisNull()
            Me(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeOriginaisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExistenciaDeCopiasNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeCopiasColumn)
        End Function
        
        Public Sub SetExistenciaDeCopiasNull()
            Me(Me.tableSFRDDocumentacaoAssociada.ExistenciaDeCopiasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnidadesRelacionadasNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDocumentacaoAssociada.UnidadesRelacionadasColumn)
        End Function
        
        Public Sub SetUnidadesRelacionadasNull()
            Me(Me.tableSFRDDocumentacaoAssociada.UnidadesRelacionadasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotaDePublicacaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDocumentacaoAssociada.NotaDePublicacaoColumn)
        End Function
        
        Public Sub SetNotaDePublicacaoNull()
            Me(Me.tableSFRDDocumentacaoAssociada.NotaDePublicacaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDocumentacaoAssociada.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDDocumentacaoAssociada.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDDocumentacaoAssociadaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDDocumentacaoAssociadaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDDocumentacaoAssociadaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDDocumentacaoAssociadaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDAvaliacaoRelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDNivel As DataColumn
        
        Private columnDensidade As DataColumn
        
        Private columnSubDensidade As DataColumn
        
        Private columnPonderacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDAvaliacaoRel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDNivelColumn As DataColumn
            Get
                Return Me.columnIDNivel
            End Get
        End Property
        
        Friend ReadOnly Property DensidadeColumn As DataColumn
            Get
                Return Me.columnDensidade
            End Get
        End Property
        
        Friend ReadOnly Property SubDensidadeColumn As DataColumn
            Get
                Return Me.columnSubDensidade
            End Get
        End Property
        
        Friend ReadOnly Property PonderacaoColumn As DataColumn
            Get
                Return Me.columnPonderacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDAvaliacaoRelRow
            Get
                Return CType(Me.Rows(index),SFRDAvaliacaoRelRow)
            End Get
        End Property
        
        Public Event SFRDAvaliacaoRelRowChanged As SFRDAvaliacaoRelRowChangeEventHandler
        
        Public Event SFRDAvaliacaoRelRowChanging As SFRDAvaliacaoRelRowChangeEventHandler
        
        Public Event SFRDAvaliacaoRelRowDeleted As SFRDAvaliacaoRelRowChangeEventHandler
        
        Public Event SFRDAvaliacaoRelRowDeleting As SFRDAvaliacaoRelRowChangeEventHandler
        
        Public Overloads Sub AddSFRDAvaliacaoRelRow(ByVal row As SFRDAvaliacaoRelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDAvaliacaoRelRow(ByVal parentSFRDAvaliacaoRowBySFRDAvaliacaoSFRDAvaliacaoRel As SFRDAvaliacaoRow, ByVal parentNivelRowByNivelSFRDAvaliacaoRel As NivelRow, ByVal parentTipoDensidadeRowByTipoDensidadeSFRDAvaliacaoRel As TipoDensidadeRow, ByVal parentTipoSubDensidadeRowByTipoSubDensidadeSFRDAvaliacaoRel As TipoSubDensidadeRow, ByVal Ponderacao As Decimal, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDAvaliacaoRelRow
            Dim rowSFRDAvaliacaoRelRow As SFRDAvaliacaoRelRow = CType(Me.NewRow,SFRDAvaliacaoRelRow)
            rowSFRDAvaliacaoRelRow.ItemArray = New Object() {parentSFRDAvaliacaoRowBySFRDAvaliacaoSFRDAvaliacaoRel(0), parentNivelRowByNivelSFRDAvaliacaoRel(0), parentTipoDensidadeRowByTipoDensidadeSFRDAvaliacaoRel(0), parentTipoSubDensidadeRowByTipoSubDensidadeSFRDAvaliacaoRel(0), Ponderacao, Versao, isDeleted}
            Me.Rows.Add(rowSFRDAvaliacaoRelRow)
            Return rowSFRDAvaliacaoRelRow
        End Function
        
        Public Function FindByIDFRDBaseIDNivel(ByVal IDFRDBase As Long, ByVal IDNivel As Long) As SFRDAvaliacaoRelRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDNivel}),SFRDAvaliacaoRelRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDAvaliacaoRelDataTable = CType(MyBase.Clone,SFRDAvaliacaoRelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDAvaliacaoRelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDNivel = Me.Columns("IDNivel")
            Me.columnDensidade = Me.Columns("Densidade")
            Me.columnSubDensidade = Me.Columns("SubDensidade")
            Me.columnPonderacao = Me.Columns("Ponderacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDNivel = New DataColumn("IDNivel", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDNivel)
            Me.columnDensidade = New DataColumn("Densidade", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDensidade)
            Me.columnSubDensidade = New DataColumn("SubDensidade", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubDensidade)
            Me.columnPonderacao = New DataColumn("Ponderacao", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPonderacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDNivel}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDNivel.AllowDBNull = false
            Me.columnDensidade.AllowDBNull = false
            Me.columnSubDensidade.AllowDBNull = false
            Me.columnPonderacao.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDAvaliacaoRelRow() As SFRDAvaliacaoRelRow
            Return CType(Me.NewRow,SFRDAvaliacaoRelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDAvaliacaoRelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDAvaliacaoRelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDAvaliacaoRelRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRelRowChanged(Me, New SFRDAvaliacaoRelRowChangeEvent(CType(e.Row,SFRDAvaliacaoRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDAvaliacaoRelRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRelRowChanging(Me, New SFRDAvaliacaoRelRowChangeEvent(CType(e.Row,SFRDAvaliacaoRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDAvaliacaoRelRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRelRowDeleted(Me, New SFRDAvaliacaoRelRowChangeEvent(CType(e.Row,SFRDAvaliacaoRelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDAvaliacaoRelRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDAvaliacaoRelRowDeleting(Me, New SFRDAvaliacaoRelRowChangeEvent(CType(e.Row,SFRDAvaliacaoRelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDAvaliacaoRelRow(ByVal row As SFRDAvaliacaoRelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDAvaliacaoRelRow
        Inherits DataRow
        
        Private tableSFRDAvaliacaoRel As SFRDAvaliacaoRelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDAvaliacaoRel = CType(Me.Table,SFRDAvaliacaoRelDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDAvaliacaoRel.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDAvaliacaoRel.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDNivel As Long
            Get
                Return CType(Me(Me.tableSFRDAvaliacaoRel.IDNivelColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDAvaliacaoRel.IDNivelColumn) = value
            End Set
        End Property
        
        Public Property Densidade As Long
            Get
                Return CType(Me(Me.tableSFRDAvaliacaoRel.DensidadeColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDAvaliacaoRel.DensidadeColumn) = value
            End Set
        End Property
        
        Public Property SubDensidade As Long
            Get
                Return CType(Me(Me.tableSFRDAvaliacaoRel.SubDensidadeColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDAvaliacaoRel.SubDensidadeColumn) = value
            End Set
        End Property
        
        Public Property Ponderacao As Decimal
            Get
                Return CType(Me(Me.tableSFRDAvaliacaoRel.PonderacaoColumn),Decimal)
            End Get
            Set
                Me(Me.tableSFRDAvaliacaoRel.PonderacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDAvaliacaoRel.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDAvaliacaoRel.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDAvaliacaoRel.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDAvaliacaoRel.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoSubDensidadeRow As TipoSubDensidadeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoSubDensidadeSFRDAvaliacaoRel")),TipoSubDensidadeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoSubDensidadeSFRDAvaliacaoRel"))
            End Set
        End Property
        
        Public Property NivelRow As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelSFRDAvaliacaoRel")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelSFRDAvaliacaoRel"))
            End Set
        End Property
        
        Public Property TipoDensidadeRow As TipoDensidadeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoDensidadeSFRDAvaliacaoRel")),TipoDensidadeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoDensidadeSFRDAvaliacaoRel"))
            End Set
        End Property
        
        Public Property SFRDAvaliacaoRow As SFRDAvaliacaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDAvaliacaoSFRDAvaliacaoRel")),SFRDAvaliacaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDAvaliacaoSFRDAvaliacaoRel"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDAvaliacaoRel.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDAvaliacaoRel.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDAvaliacaoRelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDAvaliacaoRelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDAvaliacaoRelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDAvaliacaoRelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoAcondicionamentoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoAcondicionamento")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoAcondicionamentoRow
            Get
                Return CType(Me.Rows(index),TipoAcondicionamentoRow)
            End Get
        End Property
        
        Public Event TipoAcondicionamentoRowChanged As TipoAcondicionamentoRowChangeEventHandler
        
        Public Event TipoAcondicionamentoRowChanging As TipoAcondicionamentoRowChangeEventHandler
        
        Public Event TipoAcondicionamentoRowDeleted As TipoAcondicionamentoRowChangeEventHandler
        
        Public Event TipoAcondicionamentoRowDeleting As TipoAcondicionamentoRowChangeEventHandler
        
        Public Overloads Sub AddTipoAcondicionamentoRow(ByVal row As TipoAcondicionamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoAcondicionamentoRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoAcondicionamentoRow
            Dim rowTipoAcondicionamentoRow As TipoAcondicionamentoRow = CType(Me.NewRow,TipoAcondicionamentoRow)
            rowTipoAcondicionamentoRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoAcondicionamentoRow)
            Return rowTipoAcondicionamentoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoAcondicionamentoRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoAcondicionamentoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoAcondicionamentoDataTable = CType(MyBase.Clone,TipoAcondicionamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoAcondicionamentoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnDesignacao}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.Unique = true
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoAcondicionamentoRow() As TipoAcondicionamentoRow
            Return CType(Me.NewRow,TipoAcondicionamentoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoAcondicionamentoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoAcondicionamentoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoAcondicionamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoAcondicionamentoRowChanged(Me, New TipoAcondicionamentoRowChangeEvent(CType(e.Row,TipoAcondicionamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoAcondicionamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoAcondicionamentoRowChanging(Me, New TipoAcondicionamentoRowChangeEvent(CType(e.Row,TipoAcondicionamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoAcondicionamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoAcondicionamentoRowDeleted(Me, New TipoAcondicionamentoRowChangeEvent(CType(e.Row,TipoAcondicionamentoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoAcondicionamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoAcondicionamentoRowDeleting(Me, New TipoAcondicionamentoRowChangeEvent(CType(e.Row,TipoAcondicionamentoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoAcondicionamentoRow(ByVal row As TipoAcondicionamentoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoAcondicionamentoRow
        Inherits DataRow
        
        Private tableTipoAcondicionamento As TipoAcondicionamentoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoAcondicionamento = CType(Me.Table,TipoAcondicionamentoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoAcondicionamento.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoAcondicionamento.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoAcondicionamento.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoAcondicionamento.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoAcondicionamento.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoAcondicionamento.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoAcondicionamento.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoAcondicionamento.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoAcondicionamento.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoAcondicionamento.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFDescricaoFisicaRows() As SFRDUFDescricaoFisicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoAcondicionamentoSFRDUFDescricaoFisica")),SFRDUFDescricaoFisicaRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoAcondicionamentoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoAcondicionamentoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoAcondicionamentoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoAcondicionamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEstadoConservacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoEstadoConservacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoEstadoConservacaoRow
            Get
                Return CType(Me.Rows(index),TipoEstadoConservacaoRow)
            End Get
        End Property
        
        Public Event TipoEstadoConservacaoRowChanged As TipoEstadoConservacaoRowChangeEventHandler
        
        Public Event TipoEstadoConservacaoRowChanging As TipoEstadoConservacaoRowChangeEventHandler
        
        Public Event TipoEstadoConservacaoRowDeleted As TipoEstadoConservacaoRowChangeEventHandler
        
        Public Event TipoEstadoConservacaoRowDeleting As TipoEstadoConservacaoRowChangeEventHandler
        
        Public Overloads Sub AddTipoEstadoConservacaoRow(ByVal row As TipoEstadoConservacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoEstadoConservacaoRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoEstadoConservacaoRow
            Dim rowTipoEstadoConservacaoRow As TipoEstadoConservacaoRow = CType(Me.NewRow,TipoEstadoConservacaoRow)
            rowTipoEstadoConservacaoRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoEstadoConservacaoRow)
            Return rowTipoEstadoConservacaoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoEstadoConservacaoRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoEstadoConservacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoEstadoConservacaoDataTable = CType(MyBase.Clone,TipoEstadoConservacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoEstadoConservacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnDesignacao}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.Unique = true
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoEstadoConservacaoRow() As TipoEstadoConservacaoRow
            Return CType(Me.NewRow,TipoEstadoConservacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoEstadoConservacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoEstadoConservacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoEstadoConservacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoEstadoConservacaoRowChanged(Me, New TipoEstadoConservacaoRowChangeEvent(CType(e.Row,TipoEstadoConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoEstadoConservacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoEstadoConservacaoRowChanging(Me, New TipoEstadoConservacaoRowChangeEvent(CType(e.Row,TipoEstadoConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoEstadoConservacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoEstadoConservacaoRowDeleted(Me, New TipoEstadoConservacaoRowChangeEvent(CType(e.Row,TipoEstadoConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoEstadoConservacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoEstadoConservacaoRowDeleting(Me, New TipoEstadoConservacaoRowChangeEvent(CType(e.Row,TipoEstadoConservacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoEstadoConservacaoRow(ByVal row As TipoEstadoConservacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEstadoConservacaoRow
        Inherits DataRow
        
        Private tableTipoEstadoConservacao As TipoEstadoConservacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoEstadoConservacao = CType(Me.Table,TipoEstadoConservacaoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoEstadoConservacao.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoEstadoConservacao.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoEstadoConservacao.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoEstadoConservacao.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoEstadoConservacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoEstadoConservacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoEstadoConservacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoEstadoConservacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoEstadoConservacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoEstadoConservacao.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFComponenteRows() As SFRDUFComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoEstadoConservacaoSFRDUFComponente")),SFRDUFComponenteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoEstadoConservacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoEstadoConservacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoEstadoConservacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoEstadoConservacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDImagemVolumeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnMount As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDImagemVolume")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property MountColumn As DataColumn
            Get
                Return Me.columnMount
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDImagemVolumeRow
            Get
                Return CType(Me.Rows(index),SFRDImagemVolumeRow)
            End Get
        End Property
        
        Public Event SFRDImagemVolumeRowChanged As SFRDImagemVolumeRowChangeEventHandler
        
        Public Event SFRDImagemVolumeRowChanging As SFRDImagemVolumeRowChangeEventHandler
        
        Public Event SFRDImagemVolumeRowDeleted As SFRDImagemVolumeRowChangeEventHandler
        
        Public Event SFRDImagemVolumeRowDeleting As SFRDImagemVolumeRowChangeEventHandler
        
        Public Overloads Sub AddSFRDImagemVolumeRow(ByVal row As SFRDImagemVolumeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDImagemVolumeRow(ByVal Mount As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDImagemVolumeRow
            Dim rowSFRDImagemVolumeRow As SFRDImagemVolumeRow = CType(Me.NewRow,SFRDImagemVolumeRow)
            rowSFRDImagemVolumeRow.ItemArray = New Object() {Nothing, Mount, Versao, isDeleted}
            Me.Rows.Add(rowSFRDImagemVolumeRow)
            Return rowSFRDImagemVolumeRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As SFRDImagemVolumeRow
            Return CType(Me.Rows.Find(New Object() {ID}),SFRDImagemVolumeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDImagemVolumeDataTable = CType(MyBase.Clone,SFRDImagemVolumeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDImagemVolumeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnMount = Me.Columns("Mount")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnMount = New DataColumn("Mount", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMount)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnMount.AllowDBNull = false
            Me.columnMount.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDImagemVolumeRow() As SFRDImagemVolumeRow
            Return CType(Me.NewRow,SFRDImagemVolumeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDImagemVolumeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDImagemVolumeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDImagemVolumeRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDImagemVolumeRowChanged(Me, New SFRDImagemVolumeRowChangeEvent(CType(e.Row,SFRDImagemVolumeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDImagemVolumeRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDImagemVolumeRowChanging(Me, New SFRDImagemVolumeRowChangeEvent(CType(e.Row,SFRDImagemVolumeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDImagemVolumeRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDImagemVolumeRowDeleted(Me, New SFRDImagemVolumeRowChangeEvent(CType(e.Row,SFRDImagemVolumeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDImagemVolumeRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDImagemVolumeRowDeleting(Me, New SFRDImagemVolumeRowChangeEvent(CType(e.Row,SFRDImagemVolumeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDImagemVolumeRow(ByVal row As SFRDImagemVolumeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDImagemVolumeRow
        Inherits DataRow
        
        Private tableSFRDImagemVolume As SFRDImagemVolumeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDImagemVolume = CType(Me.Table,SFRDImagemVolumeDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableSFRDImagemVolume.IDColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDImagemVolume.IDColumn) = value
            End Set
        End Property
        
        Public Property Mount As String
            Get
                Return CType(Me(Me.tableSFRDImagemVolume.MountColumn),String)
            End Get
            Set
                Me(Me.tableSFRDImagemVolume.MountColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDImagemVolume.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDImagemVolume.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDImagemVolume.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDImagemVolume.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDImagemVolume.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDImagemVolume.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDImagemRows() As SFRDImagemRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SFRDImagemVolumeSFRDImagem")),SFRDImagemRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDImagemVolumeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDImagemVolumeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDImagemVolumeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDImagemVolumeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTecnicaRegistoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoTecnicaRegisto")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoTecnicaRegistoRow
            Get
                Return CType(Me.Rows(index),TipoTecnicaRegistoRow)
            End Get
        End Property
        
        Public Event TipoTecnicaRegistoRowChanged As TipoTecnicaRegistoRowChangeEventHandler
        
        Public Event TipoTecnicaRegistoRowChanging As TipoTecnicaRegistoRowChangeEventHandler
        
        Public Event TipoTecnicaRegistoRowDeleted As TipoTecnicaRegistoRowChangeEventHandler
        
        Public Event TipoTecnicaRegistoRowDeleting As TipoTecnicaRegistoRowChangeEventHandler
        
        Public Overloads Sub AddTipoTecnicaRegistoRow(ByVal row As TipoTecnicaRegistoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoTecnicaRegistoRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoTecnicaRegistoRow
            Dim rowTipoTecnicaRegistoRow As TipoTecnicaRegistoRow = CType(Me.NewRow,TipoTecnicaRegistoRow)
            rowTipoTecnicaRegistoRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoTecnicaRegistoRow)
            Return rowTipoTecnicaRegistoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoTecnicaRegistoRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoTecnicaRegistoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoTecnicaRegistoDataTable = CType(MyBase.Clone,TipoTecnicaRegistoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoTecnicaRegistoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnDesignacao}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.Unique = true
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoTecnicaRegistoRow() As TipoTecnicaRegistoRow
            Return CType(Me.NewRow,TipoTecnicaRegistoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoTecnicaRegistoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoTecnicaRegistoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoTecnicaRegistoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoTecnicaRegistoRowChanged(Me, New TipoTecnicaRegistoRowChangeEvent(CType(e.Row,TipoTecnicaRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoTecnicaRegistoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoTecnicaRegistoRowChanging(Me, New TipoTecnicaRegistoRowChangeEvent(CType(e.Row,TipoTecnicaRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoTecnicaRegistoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoTecnicaRegistoRowDeleted(Me, New TipoTecnicaRegistoRowChangeEvent(CType(e.Row,TipoTecnicaRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoTecnicaRegistoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoTecnicaRegistoRowDeleting(Me, New TipoTecnicaRegistoRowChangeEvent(CType(e.Row,TipoTecnicaRegistoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoTecnicaRegistoRow(ByVal row As TipoTecnicaRegistoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTecnicaRegistoRow
        Inherits DataRow
        
        Private tableTipoTecnicaRegisto As TipoTecnicaRegistoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoTecnicaRegisto = CType(Me.Table,TipoTecnicaRegistoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoTecnicaRegisto.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoTecnicaRegisto.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoTecnicaRegisto.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoTecnicaRegisto.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoTecnicaRegisto.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoTecnicaRegisto.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoTecnicaRegisto.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoTecnicaRegisto.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoTecnicaRegisto.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoTecnicaRegisto.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFTecnicasRegComponenteRows() As SFRDUFTecnicasRegComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoTecnicaRegistoSFRDUFTecnicasRegComponente")),SFRDUFTecnicasRegComponenteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoTecnicaRegistoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoTecnicaRegistoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoTecnicaRegistoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoTecnicaRegistoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServerLicenseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSerialNumber As DataColumn
        
        Private columnIDTipoServer As DataColumn
        
        Private columnDatabaseVersion As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ServerLicense")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SerialNumberColumn As DataColumn
            Get
                Return Me.columnSerialNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoServerColumn As DataColumn
            Get
                Return Me.columnIDTipoServer
            End Get
        End Property
        
        Friend ReadOnly Property DatabaseVersionColumn As DataColumn
            Get
                Return Me.columnDatabaseVersion
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ServerLicenseRow
            Get
                Return CType(Me.Rows(index),ServerLicenseRow)
            End Get
        End Property
        
        Public Event ServerLicenseRowChanged As ServerLicenseRowChangeEventHandler
        
        Public Event ServerLicenseRowChanging As ServerLicenseRowChangeEventHandler
        
        Public Event ServerLicenseRowDeleted As ServerLicenseRowChangeEventHandler
        
        Public Event ServerLicenseRowDeleting As ServerLicenseRowChangeEventHandler
        
        Public Overloads Sub AddServerLicenseRow(ByVal row As ServerLicenseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddServerLicenseRow(ByVal SerialNumber As String, ByVal parentTipoServerRowByTipoServerServerLicense As TipoServerRow, ByVal DatabaseVersion As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ServerLicenseRow
            Dim rowServerLicenseRow As ServerLicenseRow = CType(Me.NewRow,ServerLicenseRow)
            rowServerLicenseRow.ItemArray = New Object() {SerialNumber, parentTipoServerRowByTipoServerServerLicense(0), DatabaseVersion, Versao, isDeleted}
            Me.Rows.Add(rowServerLicenseRow)
            Return rowServerLicenseRow
        End Function
        
        Public Function FindBySerialNumber(ByVal SerialNumber As String) As ServerLicenseRow
            Return CType(Me.Rows.Find(New Object() {SerialNumber}),ServerLicenseRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ServerLicenseDataTable = CType(MyBase.Clone,ServerLicenseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ServerLicenseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSerialNumber = Me.Columns("SerialNumber")
            Me.columnIDTipoServer = Me.Columns("IDTipoServer")
            Me.columnDatabaseVersion = Me.Columns("DatabaseVersion")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnSerialNumber = New DataColumn("SerialNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSerialNumber)
            Me.columnIDTipoServer = New DataColumn("IDTipoServer", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoServer)
            Me.columnDatabaseVersion = New DataColumn("DatabaseVersion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDatabaseVersion)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSerialNumber}, true))
            Me.columnSerialNumber.AllowDBNull = false
            Me.columnSerialNumber.Unique = true
            Me.columnSerialNumber.MaxLength = 19
            Me.columnIDTipoServer.AllowDBNull = false
            Me.columnDatabaseVersion.AllowDBNull = false
            Me.columnDatabaseVersion.MaxLength = 256
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewServerLicenseRow() As ServerLicenseRow
            Return CType(Me.NewRow,ServerLicenseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ServerLicenseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ServerLicenseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ServerLicenseRowChangedEvent) Is Nothing) Then
                RaiseEvent ServerLicenseRowChanged(Me, New ServerLicenseRowChangeEvent(CType(e.Row,ServerLicenseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ServerLicenseRowChangingEvent) Is Nothing) Then
                RaiseEvent ServerLicenseRowChanging(Me, New ServerLicenseRowChangeEvent(CType(e.Row,ServerLicenseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ServerLicenseRowDeletedEvent) Is Nothing) Then
                RaiseEvent ServerLicenseRowDeleted(Me, New ServerLicenseRowChangeEvent(CType(e.Row,ServerLicenseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ServerLicenseRowDeletingEvent) Is Nothing) Then
                RaiseEvent ServerLicenseRowDeleting(Me, New ServerLicenseRowChangeEvent(CType(e.Row,ServerLicenseRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveServerLicenseRow(ByVal row As ServerLicenseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServerLicenseRow
        Inherits DataRow
        
        Private tableServerLicense As ServerLicenseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableServerLicense = CType(Me.Table,ServerLicenseDataTable)
        End Sub
        
        Public Property SerialNumber As String
            Get
                Return CType(Me(Me.tableServerLicense.SerialNumberColumn),String)
            End Get
            Set
                Me(Me.tableServerLicense.SerialNumberColumn) = value
            End Set
        End Property
        
        Public Property IDTipoServer As Long
            Get
                Return CType(Me(Me.tableServerLicense.IDTipoServerColumn),Long)
            End Get
            Set
                Me(Me.tableServerLicense.IDTipoServerColumn) = value
            End Set
        End Property
        
        Public Property DatabaseVersion As String
            Get
                Return CType(Me(Me.tableServerLicense.DatabaseVersionColumn),String)
            End Get
            Set
                Me(Me.tableServerLicense.DatabaseVersionColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableServerLicense.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableServerLicense.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableServerLicense.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableServerLicense.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoServerRow As TipoServerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoServerServerLicense")),TipoServerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoServerServerLicense"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableServerLicense.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableServerLicense.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ServerLicenseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ServerLicenseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ServerLicenseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ServerLicenseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccessControlElementDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDTrustee As DataColumn
        
        Private columnIDSecurableObject As DataColumn
        
        Private columnCanRead As DataColumn
        
        Private columnCanWrite As DataColumn
        
        Private columnCanDelete As DataColumn
        
        Private columnCanExecute As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("AccessControlElement")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDTrusteeColumn As DataColumn
            Get
                Return Me.columnIDTrustee
            End Get
        End Property
        
        Friend ReadOnly Property IDSecurableObjectColumn As DataColumn
            Get
                Return Me.columnIDSecurableObject
            End Get
        End Property
        
        Friend ReadOnly Property CanReadColumn As DataColumn
            Get
                Return Me.columnCanRead
            End Get
        End Property
        
        Friend ReadOnly Property CanWriteColumn As DataColumn
            Get
                Return Me.columnCanWrite
            End Get
        End Property
        
        Friend ReadOnly Property CanDeleteColumn As DataColumn
            Get
                Return Me.columnCanDelete
            End Get
        End Property
        
        Friend ReadOnly Property CanExecuteColumn As DataColumn
            Get
                Return Me.columnCanExecute
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AccessControlElementRow
            Get
                Return CType(Me.Rows(index),AccessControlElementRow)
            End Get
        End Property
        
        Public Event AccessControlElementRowChanged As AccessControlElementRowChangeEventHandler
        
        Public Event AccessControlElementRowChanging As AccessControlElementRowChangeEventHandler
        
        Public Event AccessControlElementRowDeleted As AccessControlElementRowChangeEventHandler
        
        Public Event AccessControlElementRowDeleting As AccessControlElementRowChangeEventHandler
        
        Public Overloads Sub AddAccessControlElementRow(ByVal row As AccessControlElementRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAccessControlElementRow(ByVal parentTrusteeRowByTrusteeAccessControlElement As TrusteeRow, ByVal parentSecurableObjectRowBySecurableObjectAccessControlElement As SecurableObjectRow, ByVal CanRead As Boolean, ByVal CanWrite As Boolean, ByVal CanDelete As Boolean, ByVal CanExecute As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As AccessControlElementRow
            Dim rowAccessControlElementRow As AccessControlElementRow = CType(Me.NewRow,AccessControlElementRow)
            rowAccessControlElementRow.ItemArray = New Object() {parentTrusteeRowByTrusteeAccessControlElement(0), parentSecurableObjectRowBySecurableObjectAccessControlElement(0), CanRead, CanWrite, CanDelete, CanExecute, Versao, isDeleted}
            Me.Rows.Add(rowAccessControlElementRow)
            Return rowAccessControlElementRow
        End Function
        
        Public Function FindByIDTrusteeIDSecurableObject(ByVal IDTrustee As Long, ByVal IDSecurableObject As Long) As AccessControlElementRow
            Return CType(Me.Rows.Find(New Object() {IDTrustee, IDSecurableObject}),AccessControlElementRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AccessControlElementDataTable = CType(MyBase.Clone,AccessControlElementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AccessControlElementDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDTrustee = Me.Columns("IDTrustee")
            Me.columnIDSecurableObject = Me.Columns("IDSecurableObject")
            Me.columnCanRead = Me.Columns("CanRead")
            Me.columnCanWrite = Me.Columns("CanWrite")
            Me.columnCanDelete = Me.Columns("CanDelete")
            Me.columnCanExecute = Me.Columns("CanExecute")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDTrustee = New DataColumn("IDTrustee", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTrustee)
            Me.columnIDSecurableObject = New DataColumn("IDSecurableObject", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDSecurableObject)
            Me.columnCanRead = New DataColumn("CanRead", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCanRead)
            Me.columnCanWrite = New DataColumn("CanWrite", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCanWrite)
            Me.columnCanDelete = New DataColumn("CanDelete", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCanDelete)
            Me.columnCanExecute = New DataColumn("CanExecute", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCanExecute)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDTrustee, Me.columnIDSecurableObject}, true))
            Me.columnIDTrustee.AllowDBNull = false
            Me.columnIDSecurableObject.AllowDBNull = false
            Me.columnCanRead.AllowDBNull = false
            Me.columnCanWrite.AllowDBNull = false
            Me.columnCanDelete.AllowDBNull = false
            Me.columnCanExecute.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewAccessControlElementRow() As AccessControlElementRow
            Return CType(Me.NewRow,AccessControlElementRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AccessControlElementRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AccessControlElementRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AccessControlElementRowChangedEvent) Is Nothing) Then
                RaiseEvent AccessControlElementRowChanged(Me, New AccessControlElementRowChangeEvent(CType(e.Row,AccessControlElementRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AccessControlElementRowChangingEvent) Is Nothing) Then
                RaiseEvent AccessControlElementRowChanging(Me, New AccessControlElementRowChangeEvent(CType(e.Row,AccessControlElementRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AccessControlElementRowDeletedEvent) Is Nothing) Then
                RaiseEvent AccessControlElementRowDeleted(Me, New AccessControlElementRowChangeEvent(CType(e.Row,AccessControlElementRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AccessControlElementRowDeletingEvent) Is Nothing) Then
                RaiseEvent AccessControlElementRowDeleting(Me, New AccessControlElementRowChangeEvent(CType(e.Row,AccessControlElementRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAccessControlElementRow(ByVal row As AccessControlElementRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccessControlElementRow
        Inherits DataRow
        
        Private tableAccessControlElement As AccessControlElementDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAccessControlElement = CType(Me.Table,AccessControlElementDataTable)
        End Sub
        
        Public Property IDTrustee As Long
            Get
                Return CType(Me(Me.tableAccessControlElement.IDTrusteeColumn),Long)
            End Get
            Set
                Me(Me.tableAccessControlElement.IDTrusteeColumn) = value
            End Set
        End Property
        
        Public Property IDSecurableObject As Long
            Get
                Return CType(Me(Me.tableAccessControlElement.IDSecurableObjectColumn),Long)
            End Get
            Set
                Me(Me.tableAccessControlElement.IDSecurableObjectColumn) = value
            End Set
        End Property
        
        Public Property CanRead As Boolean
            Get
                Return CType(Me(Me.tableAccessControlElement.CanReadColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccessControlElement.CanReadColumn) = value
            End Set
        End Property
        
        Public Property CanWrite As Boolean
            Get
                Return CType(Me(Me.tableAccessControlElement.CanWriteColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccessControlElement.CanWriteColumn) = value
            End Set
        End Property
        
        Public Property CanDelete As Boolean
            Get
                Return CType(Me(Me.tableAccessControlElement.CanDeleteColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccessControlElement.CanDeleteColumn) = value
            End Set
        End Property
        
        Public Property CanExecute As Boolean
            Get
                Return CType(Me(Me.tableAccessControlElement.CanExecuteColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccessControlElement.CanExecuteColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableAccessControlElement.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAccessControlElement.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableAccessControlElement.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableAccessControlElement.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property SecurableObjectRow As SecurableObjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SecurableObjectAccessControlElement")),SecurableObjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SecurableObjectAccessControlElement"))
            End Set
        End Property
        
        Public Property TrusteeRow As TrusteeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeAccessControlElement")),TrusteeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeAccessControlElement"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableAccessControlElement.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableAccessControlElement.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AccessControlElementRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AccessControlElementRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AccessControlElementRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AccessControlElementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMaterialDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoMaterial")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoMaterialRow
            Get
                Return CType(Me.Rows(index),TipoMaterialRow)
            End Get
        End Property
        
        Public Event TipoMaterialRowChanged As TipoMaterialRowChangeEventHandler
        
        Public Event TipoMaterialRowChanging As TipoMaterialRowChangeEventHandler
        
        Public Event TipoMaterialRowDeleted As TipoMaterialRowChangeEventHandler
        
        Public Event TipoMaterialRowDeleting As TipoMaterialRowChangeEventHandler
        
        Public Overloads Sub AddTipoMaterialRow(ByVal row As TipoMaterialRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoMaterialRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoMaterialRow
            Dim rowTipoMaterialRow As TipoMaterialRow = CType(Me.NewRow,TipoMaterialRow)
            rowTipoMaterialRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoMaterialRow)
            Return rowTipoMaterialRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoMaterialRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoMaterialRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoMaterialDataTable = CType(MyBase.Clone,TipoMaterialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoMaterialDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnDesignacao}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.Unique = true
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoMaterialRow() As TipoMaterialRow
            Return CType(Me.NewRow,TipoMaterialRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoMaterialRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoMaterialRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoMaterialRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoMaterialRowChanged(Me, New TipoMaterialRowChangeEvent(CType(e.Row,TipoMaterialRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoMaterialRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoMaterialRowChanging(Me, New TipoMaterialRowChangeEvent(CType(e.Row,TipoMaterialRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoMaterialRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoMaterialRowDeleted(Me, New TipoMaterialRowChangeEvent(CType(e.Row,TipoMaterialRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoMaterialRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoMaterialRowDeleting(Me, New TipoMaterialRowChangeEvent(CType(e.Row,TipoMaterialRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoMaterialRow(ByVal row As TipoMaterialRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMaterialRow
        Inherits DataRow
        
        Private tableTipoMaterial As TipoMaterialDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoMaterial = CType(Me.Table,TipoMaterialDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoMaterial.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoMaterial.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoMaterial.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoMaterial.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoMaterial.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoMaterial.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoMaterial.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoMaterial.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoMaterial.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoMaterial.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFMateriaisComponenteRows() As SFRDUFMateriaisComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoMaterialSFRDUFMateriaisComponente")),SFRDUFMateriaisComponenteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoMaterialRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoMaterialRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoMaterialRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoMaterialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnBuiltInName As DataColumn
        
        Private columnIsStructure As DataColumn
        
        Private columnIsDocument As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoNivel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property BuiltInNameColumn As DataColumn
            Get
                Return Me.columnBuiltInName
            End Get
        End Property
        
        Friend ReadOnly Property IsStructureColumn As DataColumn
            Get
                Return Me.columnIsStructure
            End Get
        End Property
        
        Friend ReadOnly Property IsDocumentColumn As DataColumn
            Get
                Return Me.columnIsDocument
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoNivelRow
            Get
                Return CType(Me.Rows(index),TipoNivelRow)
            End Get
        End Property
        
        Public Event TipoNivelRowChanged As TipoNivelRowChangeEventHandler
        
        Public Event TipoNivelRowChanging As TipoNivelRowChangeEventHandler
        
        Public Event TipoNivelRowDeleted As TipoNivelRowChangeEventHandler
        
        Public Event TipoNivelRowDeleting As TipoNivelRowChangeEventHandler
        
        Public Overloads Sub AddTipoNivelRow(ByVal row As TipoNivelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoNivelRow(ByVal BuiltInName As String, ByVal IsStructure As Boolean, ByVal IsDocument As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoNivelRow
            Dim rowTipoNivelRow As TipoNivelRow = CType(Me.NewRow,TipoNivelRow)
            rowTipoNivelRow.ItemArray = New Object() {Nothing, BuiltInName, IsStructure, IsDocument, Versao, isDeleted}
            Me.Rows.Add(rowTipoNivelRow)
            Return rowTipoNivelRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoNivelRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoNivelRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoNivelDataTable = CType(MyBase.Clone,TipoNivelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoNivelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnBuiltInName = Me.Columns("BuiltInName")
            Me.columnIsStructure = Me.Columns("IsStructure")
            Me.columnIsDocument = Me.Columns("IsDocument")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnBuiltInName = New DataColumn("BuiltInName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuiltInName)
            Me.columnIsStructure = New DataColumn("IsStructure", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsStructure)
            Me.columnIsDocument = New DataColumn("IsDocument", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsDocument)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnBuiltInName.AllowDBNull = false
            Me.columnBuiltInName.MaxLength = 50
            Me.columnIsStructure.AllowDBNull = false
            Me.columnIsDocument.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoNivelRow() As TipoNivelRow
            Return CType(Me.NewRow,TipoNivelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoNivelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoNivelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoNivelRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoNivelRowChanged(Me, New TipoNivelRowChangeEvent(CType(e.Row,TipoNivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoNivelRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoNivelRowChanging(Me, New TipoNivelRowChangeEvent(CType(e.Row,TipoNivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoNivelRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoNivelRowDeleted(Me, New TipoNivelRowChangeEvent(CType(e.Row,TipoNivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoNivelRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoNivelRowDeleting(Me, New TipoNivelRowChangeEvent(CType(e.Row,TipoNivelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoNivelRow(ByVal row As TipoNivelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRow
        Inherits DataRow
        
        Private tableTipoNivel As TipoNivelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoNivel = CType(Me.Table,TipoNivelDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoNivel.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoNivel.IDColumn) = value
            End Set
        End Property
        
        Public Property BuiltInName As String
            Get
                Return CType(Me(Me.tableTipoNivel.BuiltInNameColumn),String)
            End Get
            Set
                Me(Me.tableTipoNivel.BuiltInNameColumn) = value
            End Set
        End Property
        
        Public Property IsStructure As Boolean
            Get
                Return CType(Me(Me.tableTipoNivel.IsStructureColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNivel.IsStructureColumn) = value
            End Set
        End Property
        
        Public Property IsDocument As Boolean
            Get
                Return CType(Me(Me.tableTipoNivel.IsDocumentColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNivel.IsDocumentColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoNivel.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoNivel.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoNivel.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNivel.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoNivel.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoNivel.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTipoNivelRelacionadoRows() As TipoNivelRelacionadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNivelTipoNivelRelacionado")),TipoNivelRelacionadoRow())
        End Function
        
        Public Function GetNivelRows() As NivelRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNivelNivel")),NivelRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoNivelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoNivelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoNivelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDNotaGeralDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnNotaGeral As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDNotaGeral")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property NotaGeralColumn As DataColumn
            Get
                Return Me.columnNotaGeral
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDNotaGeralRow
            Get
                Return CType(Me.Rows(index),SFRDNotaGeralRow)
            End Get
        End Property
        
        Public Event SFRDNotaGeralRowChanged As SFRDNotaGeralRowChangeEventHandler
        
        Public Event SFRDNotaGeralRowChanging As SFRDNotaGeralRowChangeEventHandler
        
        Public Event SFRDNotaGeralRowDeleted As SFRDNotaGeralRowChangeEventHandler
        
        Public Event SFRDNotaGeralRowDeleting As SFRDNotaGeralRowChangeEventHandler
        
        Public Overloads Sub AddSFRDNotaGeralRow(ByVal row As SFRDNotaGeralRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDNotaGeralRow(ByVal parentFRDBaseRowByFRDBaseSFRDNotaGeral As FRDBaseRow, ByVal NotaGeral As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDNotaGeralRow
            Dim rowSFRDNotaGeralRow As SFRDNotaGeralRow = CType(Me.NewRow,SFRDNotaGeralRow)
            rowSFRDNotaGeralRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDNotaGeral(0), NotaGeral, Versao, isDeleted}
            Me.Rows.Add(rowSFRDNotaGeralRow)
            Return rowSFRDNotaGeralRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDNotaGeralRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDNotaGeralRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDNotaGeralDataTable = CType(MyBase.Clone,SFRDNotaGeralDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDNotaGeralDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnNotaGeral = Me.Columns("NotaGeral")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnNotaGeral = New DataColumn("NotaGeral", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotaGeral)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnNotaGeral.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDNotaGeralRow() As SFRDNotaGeralRow
            Return CType(Me.NewRow,SFRDNotaGeralRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDNotaGeralRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDNotaGeralRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDNotaGeralRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDNotaGeralRowChanged(Me, New SFRDNotaGeralRowChangeEvent(CType(e.Row,SFRDNotaGeralRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDNotaGeralRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDNotaGeralRowChanging(Me, New SFRDNotaGeralRowChangeEvent(CType(e.Row,SFRDNotaGeralRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDNotaGeralRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDNotaGeralRowDeleted(Me, New SFRDNotaGeralRowChangeEvent(CType(e.Row,SFRDNotaGeralRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDNotaGeralRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDNotaGeralRowDeleting(Me, New SFRDNotaGeralRowChangeEvent(CType(e.Row,SFRDNotaGeralRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDNotaGeralRow(ByVal row As SFRDNotaGeralRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDNotaGeralRow
        Inherits DataRow
        
        Private tableSFRDNotaGeral As SFRDNotaGeralDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDNotaGeral = CType(Me.Table,SFRDNotaGeralDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDNotaGeral.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDNotaGeral.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property NotaGeral As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDNotaGeral.NotaGeralColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDNotaGeral.NotaGeralColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDNotaGeral.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDNotaGeral.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDNotaGeral.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDNotaGeral.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDNotaGeral")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDNotaGeral"))
            End Set
        End Property
        
        Public Function IsNotaGeralNull() As Boolean
            Return Me.IsNull(Me.tableSFRDNotaGeral.NotaGeralColumn)
        End Function
        
        Public Sub SetNotaGeralNull()
            Me(Me.tableSFRDNotaGeral.NotaGeralColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDNotaGeral.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDNotaGeral.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDNotaGeralRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDNotaGeralRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDNotaGeralRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDNotaGeralRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecurableObjectNivelDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDSecurableObject As DataColumn
        
        Private columnIDNivel As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SecurableObjectNivel")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDSecurableObjectColumn As DataColumn
            Get
                Return Me.columnIDSecurableObject
            End Get
        End Property
        
        Friend ReadOnly Property IDNivelColumn As DataColumn
            Get
                Return Me.columnIDNivel
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecurableObjectNivelRow
            Get
                Return CType(Me.Rows(index),SecurableObjectNivelRow)
            End Get
        End Property
        
        Public Event SecurableObjectNivelRowChanged As SecurableObjectNivelRowChangeEventHandler
        
        Public Event SecurableObjectNivelRowChanging As SecurableObjectNivelRowChangeEventHandler
        
        Public Event SecurableObjectNivelRowDeleted As SecurableObjectNivelRowChangeEventHandler
        
        Public Event SecurableObjectNivelRowDeleting As SecurableObjectNivelRowChangeEventHandler
        
        Public Overloads Sub AddSecurableObjectNivelRow(ByVal row As SecurableObjectNivelRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecurableObjectNivelRow(ByVal parentSecurableObjectRowBySecurableObjectSecurableObjectNivel As SecurableObjectRow, ByVal parentNivelRowByNivelSecurableObjectNivel As NivelRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SecurableObjectNivelRow
            Dim rowSecurableObjectNivelRow As SecurableObjectNivelRow = CType(Me.NewRow,SecurableObjectNivelRow)
            rowSecurableObjectNivelRow.ItemArray = New Object() {parentSecurableObjectRowBySecurableObjectSecurableObjectNivel(0), parentNivelRowByNivelSecurableObjectNivel(0), Versao, isDeleted}
            Me.Rows.Add(rowSecurableObjectNivelRow)
            Return rowSecurableObjectNivelRow
        End Function
        
        Public Function FindByIDSecurableObjectIDNivel(ByVal IDSecurableObject As Long, ByVal IDNivel As Long) As SecurableObjectNivelRow
            Return CType(Me.Rows.Find(New Object() {IDSecurableObject, IDNivel}),SecurableObjectNivelRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecurableObjectNivelDataTable = CType(MyBase.Clone,SecurableObjectNivelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecurableObjectNivelDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDSecurableObject = Me.Columns("IDSecurableObject")
            Me.columnIDNivel = Me.Columns("IDNivel")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDSecurableObject = New DataColumn("IDSecurableObject", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDSecurableObject)
            Me.columnIDNivel = New DataColumn("IDNivel", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDNivel)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDSecurableObject, Me.columnIDNivel}, true))
            Me.columnIDSecurableObject.AllowDBNull = false
            Me.columnIDNivel.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSecurableObjectNivelRow() As SecurableObjectNivelRow
            Return CType(Me.NewRow,SecurableObjectNivelRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecurableObjectNivelRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecurableObjectNivelRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecurableObjectNivelRowChangedEvent) Is Nothing) Then
                RaiseEvent SecurableObjectNivelRowChanged(Me, New SecurableObjectNivelRowChangeEvent(CType(e.Row,SecurableObjectNivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecurableObjectNivelRowChangingEvent) Is Nothing) Then
                RaiseEvent SecurableObjectNivelRowChanging(Me, New SecurableObjectNivelRowChangeEvent(CType(e.Row,SecurableObjectNivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecurableObjectNivelRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecurableObjectNivelRowDeleted(Me, New SecurableObjectNivelRowChangeEvent(CType(e.Row,SecurableObjectNivelRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecurableObjectNivelRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecurableObjectNivelRowDeleting(Me, New SecurableObjectNivelRowChangeEvent(CType(e.Row,SecurableObjectNivelRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecurableObjectNivelRow(ByVal row As SecurableObjectNivelRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecurableObjectNivelRow
        Inherits DataRow
        
        Private tableSecurableObjectNivel As SecurableObjectNivelDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecurableObjectNivel = CType(Me.Table,SecurableObjectNivelDataTable)
        End Sub
        
        Public Property IDSecurableObject As Long
            Get
                Return CType(Me(Me.tableSecurableObjectNivel.IDSecurableObjectColumn),Long)
            End Get
            Set
                Me(Me.tableSecurableObjectNivel.IDSecurableObjectColumn) = value
            End Set
        End Property
        
        Public Property IDNivel As Long
            Get
                Return CType(Me(Me.tableSecurableObjectNivel.IDNivelColumn),Long)
            End Get
            Set
                Me(Me.tableSecurableObjectNivel.IDNivelColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSecurableObjectNivel.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecurableObjectNivel.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSecurableObjectNivel.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSecurableObjectNivel.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property NivelRow As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelSecurableObjectNivel")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelSecurableObjectNivel"))
            End Set
        End Property
        
        Public Property SecurableObjectRow As SecurableObjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SecurableObjectSecurableObjectNivel")),SecurableObjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SecurableObjectSecurableObjectNivel"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSecurableObjectNivel.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSecurableObjectNivel.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecurableObjectNivelRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecurableObjectNivelRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecurableObjectNivelRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecurableObjectNivelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoServerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnBuiltInName As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoServer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property BuiltInNameColumn As DataColumn
            Get
                Return Me.columnBuiltInName
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoServerRow
            Get
                Return CType(Me.Rows(index),TipoServerRow)
            End Get
        End Property
        
        Public Event TipoServerRowChanged As TipoServerRowChangeEventHandler
        
        Public Event TipoServerRowChanging As TipoServerRowChangeEventHandler
        
        Public Event TipoServerRowDeleted As TipoServerRowChangeEventHandler
        
        Public Event TipoServerRowDeleting As TipoServerRowChangeEventHandler
        
        Public Overloads Sub AddTipoServerRow(ByVal row As TipoServerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoServerRow(ByVal Name As String, ByVal BuiltInName As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoServerRow
            Dim rowTipoServerRow As TipoServerRow = CType(Me.NewRow,TipoServerRow)
            rowTipoServerRow.ItemArray = New Object() {Nothing, Name, BuiltInName, Versao, isDeleted}
            Me.Rows.Add(rowTipoServerRow)
            Return rowTipoServerRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoServerRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoServerRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoServerDataTable = CType(MyBase.Clone,TipoServerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoServerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnName = Me.Columns("Name")
            Me.columnBuiltInName = Me.Columns("BuiltInName")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnBuiltInName = New DataColumn("BuiltInName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuiltInName)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnBuiltInName.AllowDBNull = false
            Me.columnBuiltInName.MaxLength = 20
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoServerRow() As TipoServerRow
            Return CType(Me.NewRow,TipoServerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoServerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoServerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoServerRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoServerRowChanged(Me, New TipoServerRowChangeEvent(CType(e.Row,TipoServerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoServerRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoServerRowChanging(Me, New TipoServerRowChangeEvent(CType(e.Row,TipoServerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoServerRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoServerRowDeleted(Me, New TipoServerRowChangeEvent(CType(e.Row,TipoServerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoServerRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoServerRowDeleting(Me, New TipoServerRowChangeEvent(CType(e.Row,TipoServerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoServerRow(ByVal row As TipoServerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoServerRow
        Inherits DataRow
        
        Private tableTipoServer As TipoServerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoServer = CType(Me.Table,TipoServerDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoServer.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoServer.IDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Return CType(Me(Me.tableTipoServer.NameColumn),String)
            End Get
            Set
                Me(Me.tableTipoServer.NameColumn) = value
            End Set
        End Property
        
        Public Property BuiltInName As String
            Get
                Return CType(Me(Me.tableTipoServer.BuiltInNameColumn),String)
            End Get
            Set
                Me(Me.tableTipoServer.BuiltInNameColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoServer.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoServer.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoServer.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoServer.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoServer.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoServer.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetProductFunctionRows() As ProductFunctionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoServerProductFunction")),ProductFunctionRow())
        End Function
        
        Public Function GetServerLicenseRows() As ServerLicenseRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoServerServerLicense")),ServerLicenseRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoServerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoServerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoServerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoServerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRelacionadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDTipoNivel As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnRecursivo As DataColumn
        
        Private columnGUIOrder As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoNivelRelacionado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoNivelColumn As DataColumn
            Get
                Return Me.columnIDTipoNivel
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property RecursivoColumn As DataColumn
            Get
                Return Me.columnRecursivo
            End Get
        End Property
        
        Friend ReadOnly Property GUIOrderColumn As DataColumn
            Get
                Return Me.columnGUIOrder
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoNivelRelacionadoRow
            Get
                Return CType(Me.Rows(index),TipoNivelRelacionadoRow)
            End Get
        End Property
        
        Public Event TipoNivelRelacionadoRowChanged As TipoNivelRelacionadoRowChangeEventHandler
        
        Public Event TipoNivelRelacionadoRowChanging As TipoNivelRelacionadoRowChangeEventHandler
        
        Public Event TipoNivelRelacionadoRowDeleted As TipoNivelRelacionadoRowChangeEventHandler
        
        Public Event TipoNivelRelacionadoRowDeleting As TipoNivelRelacionadoRowChangeEventHandler
        
        Public Overloads Sub AddTipoNivelRelacionadoRow(ByVal row As TipoNivelRelacionadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoNivelRelacionadoRow(ByVal parentTipoNivelRowByTipoNivelTipoNivelRelacionado As TipoNivelRow, ByVal Codigo As String, ByVal Designacao As String, ByVal Recursivo As Decimal, ByVal GUIOrder As Decimal, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoNivelRelacionadoRow
            Dim rowTipoNivelRelacionadoRow As TipoNivelRelacionadoRow = CType(Me.NewRow,TipoNivelRelacionadoRow)
            rowTipoNivelRelacionadoRow.ItemArray = New Object() {Nothing, parentTipoNivelRowByTipoNivelTipoNivelRelacionado(0), Codigo, Designacao, Recursivo, GUIOrder, Versao, isDeleted}
            Me.Rows.Add(rowTipoNivelRelacionadoRow)
            Return rowTipoNivelRelacionadoRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoNivelRelacionadoRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoNivelRelacionadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoNivelRelacionadoDataTable = CType(MyBase.Clone,TipoNivelRelacionadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoNivelRelacionadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDTipoNivel = Me.Columns("IDTipoNivel")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnRecursivo = Me.Columns("Recursivo")
            Me.columnGUIOrder = Me.Columns("GUIOrder")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDTipoNivel = New DataColumn("IDTipoNivel", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoNivel)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnRecursivo = New DataColumn("Recursivo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecursivo)
            Me.columnGUIOrder = New DataColumn("GUIOrder", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUIOrder)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnIDTipoNivel.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.MaxLength = 50
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 256
            Me.columnGUIOrder.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoNivelRelacionadoRow() As TipoNivelRelacionadoRow
            Return CType(Me.NewRow,TipoNivelRelacionadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoNivelRelacionadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoNivelRelacionadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoNivelRelacionadoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoRowChanged(Me, New TipoNivelRelacionadoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoNivelRelacionadoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoRowChanging(Me, New TipoNivelRelacionadoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoNivelRelacionadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoRowDeleted(Me, New TipoNivelRelacionadoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoNivelRelacionadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoNivelRelacionadoRowDeleting(Me, New TipoNivelRelacionadoRowChangeEvent(CType(e.Row,TipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoNivelRelacionadoRow(ByVal row As TipoNivelRelacionadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRelacionadoRow
        Inherits DataRow
        
        Private tableTipoNivelRelacionado As TipoNivelRelacionadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoNivelRelacionado = CType(Me.Table,TipoNivelRelacionadoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoNivelRelacionado.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.IDColumn) = value
            End Set
        End Property
        
        Public Property IDTipoNivel As Long
            Get
                Return CType(Me(Me.tableTipoNivelRelacionado.IDTipoNivelColumn),Long)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.IDTipoNivelColumn) = value
            End Set
        End Property
        
        Public Property Codigo As String
            Get
                Return CType(Me(Me.tableTipoNivelRelacionado.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoNivelRelacionado.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Recursivo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTipoNivelRelacionado.RecursivoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.RecursivoColumn) = value
            End Set
        End Property
        
        Public Property GUIOrder As Decimal
            Get
                Return CType(Me(Me.tableTipoNivelRelacionado.GUIOrderColumn),Decimal)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.GUIOrderColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoNivelRelacionado.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoNivelRelacionado.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoNivelRelacionado.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoNivelRow As TipoNivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNivelTipoNivelRelacionado")),TipoNivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNivelTipoNivelRelacionado"))
            End Set
        End Property
        
        Public Function IsRecursivoNull() As Boolean
            Return Me.IsNull(Me.tableTipoNivelRelacionado.RecursivoColumn)
        End Function
        
        Public Sub SetRecursivoNull()
            Me(Me.tableTipoNivelRelacionado.RecursivoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoNivelRelacionado.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoNivelRelacionado.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetRelacaoHierarquicaRows() As RelacaoHierarquicaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNivelRelacionadoRelacaoHierarquica")),RelacaoHierarquicaRow())
        End Function
        
        Public Function GetRelacaoTipoNivelRelacionadoRowsByTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper() As RelacaoTipoNivelRelacionadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper")),RelacaoTipoNivelRelacionadoRow())
        End Function
        
        Public Function GetRelacaoTipoNivelRelacionadoRowsByTipoNivelRelacionadoRelacaoTipoNivelRelacionado() As RelacaoTipoNivelRelacionadoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNivelRelacionadoRelacaoTipoNivelRelacionado")),RelacaoTipoNivelRelacionadoRow())
        End Function
        
        Public Function GetTipoNivelRelacionadoCodigoRows() As TipoNivelRelacionadoCodigoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoNivelRelacionadoTipoNivelRelacionadoCodigo")),TipoNivelRelacionadoCodigoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoNivelRelacionadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoNivelRelacionadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoNivelRelacionadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoNivelRelacionadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFCotaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnCota As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDUFCota")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property CotaColumn As DataColumn
            Get
                Return Me.columnCota
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDUFCotaRow
            Get
                Return CType(Me.Rows(index),SFRDUFCotaRow)
            End Get
        End Property
        
        Public Event SFRDUFCotaRowChanged As SFRDUFCotaRowChangeEventHandler
        
        Public Event SFRDUFCotaRowChanging As SFRDUFCotaRowChangeEventHandler
        
        Public Event SFRDUFCotaRowDeleted As SFRDUFCotaRowChangeEventHandler
        
        Public Event SFRDUFCotaRowDeleting As SFRDUFCotaRowChangeEventHandler
        
        Public Overloads Sub AddSFRDUFCotaRow(ByVal row As SFRDUFCotaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDUFCotaRow(ByVal parentFRDBaseRowByFRDBaseSFRDUFCota As FRDBaseRow, ByVal Cota As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDUFCotaRow
            Dim rowSFRDUFCotaRow As SFRDUFCotaRow = CType(Me.NewRow,SFRDUFCotaRow)
            rowSFRDUFCotaRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDUFCota(0), Cota, Versao, isDeleted}
            Me.Rows.Add(rowSFRDUFCotaRow)
            Return rowSFRDUFCotaRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDUFCotaRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDUFCotaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDUFCotaDataTable = CType(MyBase.Clone,SFRDUFCotaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDUFCotaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnCota = Me.Columns("Cota")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnCota = New DataColumn("Cota", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCota)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnCota.MaxLength = 300
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDUFCotaRow() As SFRDUFCotaRow
            Return CType(Me.NewRow,SFRDUFCotaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDUFCotaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDUFCotaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDUFCotaRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDUFCotaRowChanged(Me, New SFRDUFCotaRowChangeEvent(CType(e.Row,SFRDUFCotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDUFCotaRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDUFCotaRowChanging(Me, New SFRDUFCotaRowChangeEvent(CType(e.Row,SFRDUFCotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDUFCotaRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDUFCotaRowDeleted(Me, New SFRDUFCotaRowChangeEvent(CType(e.Row,SFRDUFCotaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDUFCotaRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDUFCotaRowDeleting(Me, New SFRDUFCotaRowChangeEvent(CType(e.Row,SFRDUFCotaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDUFCotaRow(ByVal row As SFRDUFCotaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFCotaRow
        Inherits DataRow
        
        Private tableSFRDUFCota As SFRDUFCotaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDUFCota = CType(Me.Table,SFRDUFCotaDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDUFCota.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFCota.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property Cota As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFCota.CotaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFCota.CotaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFCota.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFCota.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDUFCota.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDUFCota.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDUFCota")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDUFCota"))
            End Set
        End Property
        
        Public Function IsCotaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFCota.CotaColumn)
        End Function
        
        Public Sub SetCotaNull()
            Me(Me.tableSFRDUFCota.CotaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFCota.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDUFCota.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFCotaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDUFCotaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDUFCotaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDUFCotaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoClientDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnName As DataColumn
        
        Private columnBuiltInName As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoClient")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property BuiltInNameColumn As DataColumn
            Get
                Return Me.columnBuiltInName
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoClientRow
            Get
                Return CType(Me.Rows(index),TipoClientRow)
            End Get
        End Property
        
        Public Event TipoClientRowChanged As TipoClientRowChangeEventHandler
        
        Public Event TipoClientRowChanging As TipoClientRowChangeEventHandler
        
        Public Event TipoClientRowDeleted As TipoClientRowChangeEventHandler
        
        Public Event TipoClientRowDeleting As TipoClientRowChangeEventHandler
        
        Public Overloads Sub AddTipoClientRow(ByVal row As TipoClientRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoClientRow(ByVal ID As Long, ByVal Name As String, ByVal BuiltInName As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoClientRow
            Dim rowTipoClientRow As TipoClientRow = CType(Me.NewRow,TipoClientRow)
            rowTipoClientRow.ItemArray = New Object() {ID, Name, BuiltInName, Versao, isDeleted}
            Me.Rows.Add(rowTipoClientRow)
            Return rowTipoClientRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoClientRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoClientRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoClientDataTable = CType(MyBase.Clone,TipoClientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoClientDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnName = Me.Columns("Name")
            Me.columnBuiltInName = Me.Columns("BuiltInName")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnBuiltInName = New DataColumn("BuiltInName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuiltInName)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnBuiltInName.AllowDBNull = false
            Me.columnBuiltInName.MaxLength = 20
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoClientRow() As TipoClientRow
            Return CType(Me.NewRow,TipoClientRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoClientRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoClientRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoClientRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoClientRowChanged(Me, New TipoClientRowChangeEvent(CType(e.Row,TipoClientRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoClientRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoClientRowChanging(Me, New TipoClientRowChangeEvent(CType(e.Row,TipoClientRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoClientRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoClientRowDeleted(Me, New TipoClientRowChangeEvent(CType(e.Row,TipoClientRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoClientRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoClientRowDeleting(Me, New TipoClientRowChangeEvent(CType(e.Row,TipoClientRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoClientRow(ByVal row As TipoClientRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoClientRow
        Inherits DataRow
        
        Private tableTipoClient As TipoClientDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoClient = CType(Me.Table,TipoClientDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoClient.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoClient.IDColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Return CType(Me(Me.tableTipoClient.NameColumn),String)
            End Get
            Set
                Me(Me.tableTipoClient.NameColumn) = value
            End Set
        End Property
        
        Public Property BuiltInName As String
            Get
                Return CType(Me(Me.tableTipoClient.BuiltInNameColumn),String)
            End Get
            Set
                Me(Me.tableTipoClient.BuiltInNameColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoClient.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoClient.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoClient.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoClient.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoClient.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoClient.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetProductFunctionRows() As ProductFunctionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoClientProductFunction")),ProductFunctionRow())
        End Function
        
        Public Function GetClientLicenseRows() As ClientLicenseRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoClientClientLicense")),ClientLicenseRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoClientRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoClientRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoClientRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoClientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeGroupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TrusteeGroup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TrusteeGroupRow
            Get
                Return CType(Me.Rows(index),TrusteeGroupRow)
            End Get
        End Property
        
        Public Event TrusteeGroupRowChanged As TrusteeGroupRowChangeEventHandler
        
        Public Event TrusteeGroupRowChanging As TrusteeGroupRowChangeEventHandler
        
        Public Event TrusteeGroupRowDeleted As TrusteeGroupRowChangeEventHandler
        
        Public Event TrusteeGroupRowDeleting As TrusteeGroupRowChangeEventHandler
        
        Public Overloads Sub AddTrusteeGroupRow(ByVal row As TrusteeGroupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTrusteeGroupRow(ByVal parentTrusteeRowByTrusteeTrusteeGroup As TrusteeRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TrusteeGroupRow
            Dim rowTrusteeGroupRow As TrusteeGroupRow = CType(Me.NewRow,TrusteeGroupRow)
            rowTrusteeGroupRow.ItemArray = New Object() {parentTrusteeRowByTrusteeTrusteeGroup(0), Versao, isDeleted}
            Me.Rows.Add(rowTrusteeGroupRow)
            Return rowTrusteeGroupRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TrusteeGroupRow
            Return CType(Me.Rows.Find(New Object() {ID}),TrusteeGroupRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TrusteeGroupDataTable = CType(MyBase.Clone,TrusteeGroupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TrusteeGroupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTrusteeGroupRow() As TrusteeGroupRow
            Return CType(Me.NewRow,TrusteeGroupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TrusteeGroupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TrusteeGroupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TrusteeGroupRowChangedEvent) Is Nothing) Then
                RaiseEvent TrusteeGroupRowChanged(Me, New TrusteeGroupRowChangeEvent(CType(e.Row,TrusteeGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TrusteeGroupRowChangingEvent) Is Nothing) Then
                RaiseEvent TrusteeGroupRowChanging(Me, New TrusteeGroupRowChangeEvent(CType(e.Row,TrusteeGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TrusteeGroupRowDeletedEvent) Is Nothing) Then
                RaiseEvent TrusteeGroupRowDeleted(Me, New TrusteeGroupRowChangeEvent(CType(e.Row,TrusteeGroupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TrusteeGroupRowDeletingEvent) Is Nothing) Then
                RaiseEvent TrusteeGroupRowDeleting(Me, New TrusteeGroupRowChangeEvent(CType(e.Row,TrusteeGroupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTrusteeGroupRow(ByVal row As TrusteeGroupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeGroupRow
        Inherits DataRow
        
        Private tableTrusteeGroup As TrusteeGroupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrusteeGroup = CType(Me.Table,TrusteeGroupDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTrusteeGroup.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTrusteeGroup.IDColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTrusteeGroup.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrusteeGroup.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTrusteeGroup.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrusteeGroup.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TrusteeRow As TrusteeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeTrusteeGroup")),TrusteeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeTrusteeGroup"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTrusteeGroup.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTrusteeGroup.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetUserGroupsRows() As UserGroupsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeGroupUserGroups")),UserGroupsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeGroupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TrusteeGroupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TrusteeGroupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TrusteeGroupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteePrivilegeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDTrustee As DataColumn
        
        Private columnIDTipoFunctionGroup As DataColumn
        
        Private columnIdxTipoFunction As DataColumn
        
        Private columnIDTipoOperation As DataColumn
        
        Private columnIsGrant As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TrusteePrivilege")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDTrusteeColumn As DataColumn
            Get
                Return Me.columnIDTrustee
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoFunctionGroupColumn As DataColumn
            Get
                Return Me.columnIDTipoFunctionGroup
            End Get
        End Property
        
        Friend ReadOnly Property IdxTipoFunctionColumn As DataColumn
            Get
                Return Me.columnIdxTipoFunction
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoOperationColumn As DataColumn
            Get
                Return Me.columnIDTipoOperation
            End Get
        End Property
        
        Friend ReadOnly Property IsGrantColumn As DataColumn
            Get
                Return Me.columnIsGrant
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TrusteePrivilegeRow
            Get
                Return CType(Me.Rows(index),TrusteePrivilegeRow)
            End Get
        End Property
        
        Public Event TrusteePrivilegeRowChanged As TrusteePrivilegeRowChangeEventHandler
        
        Public Event TrusteePrivilegeRowChanging As TrusteePrivilegeRowChangeEventHandler
        
        Public Event TrusteePrivilegeRowDeleted As TrusteePrivilegeRowChangeEventHandler
        
        Public Event TrusteePrivilegeRowDeleting As TrusteePrivilegeRowChangeEventHandler
        
        Public Overloads Sub AddTrusteePrivilegeRow(ByVal row As TrusteePrivilegeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTrusteePrivilegeRow(ByVal parentTrusteeRowByTrusteeTrusteePrivilege As TrusteeRow, ByVal IDTipoFunctionGroup As Byte, ByVal IdxTipoFunction As Byte, ByVal IDTipoOperation As Byte, ByVal IsGrant As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TrusteePrivilegeRow
            Dim rowTrusteePrivilegeRow As TrusteePrivilegeRow = CType(Me.NewRow,TrusteePrivilegeRow)
            rowTrusteePrivilegeRow.ItemArray = New Object() {parentTrusteeRowByTrusteeTrusteePrivilege(0), IDTipoFunctionGroup, IdxTipoFunction, IDTipoOperation, IsGrant, Versao, isDeleted}
            Me.Rows.Add(rowTrusteePrivilegeRow)
            Return rowTrusteePrivilegeRow
        End Function
        
        Public Function FindByIDTrusteeIDTipoFunctionGroupIdxTipoFunctionIDTipoOperation(ByVal IDTrustee As Long, ByVal IDTipoFunctionGroup As Byte, ByVal IdxTipoFunction As Byte, ByVal IDTipoOperation As Byte) As TrusteePrivilegeRow
            Return CType(Me.Rows.Find(New Object() {IDTrustee, IDTipoFunctionGroup, IdxTipoFunction, IDTipoOperation}),TrusteePrivilegeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TrusteePrivilegeDataTable = CType(MyBase.Clone,TrusteePrivilegeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TrusteePrivilegeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDTrustee = Me.Columns("IDTrustee")
            Me.columnIDTipoFunctionGroup = Me.Columns("IDTipoFunctionGroup")
            Me.columnIdxTipoFunction = Me.Columns("IdxTipoFunction")
            Me.columnIDTipoOperation = Me.Columns("IDTipoOperation")
            Me.columnIsGrant = Me.Columns("IsGrant")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDTrustee = New DataColumn("IDTrustee", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTrustee)
            Me.columnIDTipoFunctionGroup = New DataColumn("IDTipoFunctionGroup", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoFunctionGroup)
            Me.columnIdxTipoFunction = New DataColumn("IdxTipoFunction", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdxTipoFunction)
            Me.columnIDTipoOperation = New DataColumn("IDTipoOperation", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoOperation)
            Me.columnIsGrant = New DataColumn("IsGrant", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsGrant)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDTrustee, Me.columnIDTipoFunctionGroup, Me.columnIdxTipoFunction, Me.columnIDTipoOperation}, true))
            Me.columnIDTrustee.AllowDBNull = false
            Me.columnIDTipoFunctionGroup.AllowDBNull = false
            Me.columnIdxTipoFunction.AllowDBNull = false
            Me.columnIDTipoOperation.AllowDBNull = false
            Me.columnIsGrant.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTrusteePrivilegeRow() As TrusteePrivilegeRow
            Return CType(Me.NewRow,TrusteePrivilegeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TrusteePrivilegeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TrusteePrivilegeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TrusteePrivilegeRowChangedEvent) Is Nothing) Then
                RaiseEvent TrusteePrivilegeRowChanged(Me, New TrusteePrivilegeRowChangeEvent(CType(e.Row,TrusteePrivilegeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TrusteePrivilegeRowChangingEvent) Is Nothing) Then
                RaiseEvent TrusteePrivilegeRowChanging(Me, New TrusteePrivilegeRowChangeEvent(CType(e.Row,TrusteePrivilegeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TrusteePrivilegeRowDeletedEvent) Is Nothing) Then
                RaiseEvent TrusteePrivilegeRowDeleted(Me, New TrusteePrivilegeRowChangeEvent(CType(e.Row,TrusteePrivilegeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TrusteePrivilegeRowDeletingEvent) Is Nothing) Then
                RaiseEvent TrusteePrivilegeRowDeleting(Me, New TrusteePrivilegeRowChangeEvent(CType(e.Row,TrusteePrivilegeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTrusteePrivilegeRow(ByVal row As TrusteePrivilegeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteePrivilegeRow
        Inherits DataRow
        
        Private tableTrusteePrivilege As TrusteePrivilegeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrusteePrivilege = CType(Me.Table,TrusteePrivilegeDataTable)
        End Sub
        
        Public Property IDTrustee As Long
            Get
                Return CType(Me(Me.tableTrusteePrivilege.IDTrusteeColumn),Long)
            End Get
            Set
                Me(Me.tableTrusteePrivilege.IDTrusteeColumn) = value
            End Set
        End Property
        
        Public Property IDTipoFunctionGroup As Byte
            Get
                Return CType(Me(Me.tableTrusteePrivilege.IDTipoFunctionGroupColumn),Byte)
            End Get
            Set
                Me(Me.tableTrusteePrivilege.IDTipoFunctionGroupColumn) = value
            End Set
        End Property
        
        Public Property IdxTipoFunction As Byte
            Get
                Return CType(Me(Me.tableTrusteePrivilege.IdxTipoFunctionColumn),Byte)
            End Get
            Set
                Me(Me.tableTrusteePrivilege.IdxTipoFunctionColumn) = value
            End Set
        End Property
        
        Public Property IDTipoOperation As Byte
            Get
                Return CType(Me(Me.tableTrusteePrivilege.IDTipoOperationColumn),Byte)
            End Get
            Set
                Me(Me.tableTrusteePrivilege.IDTipoOperationColumn) = value
            End Set
        End Property
        
        Public Property IsGrant As Boolean
            Get
                Return CType(Me(Me.tableTrusteePrivilege.IsGrantColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrusteePrivilege.IsGrantColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTrusteePrivilege.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrusteePrivilege.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTrusteePrivilege.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrusteePrivilege.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TrusteeRow As TrusteeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeTrusteePrivilege")),TrusteeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeTrusteePrivilege"))
            End Set
        End Property
        
        Public Property FunctionOperationRowParent As FunctionOperationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FunctionOperationTrusteePrivilege")),FunctionOperationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FunctionOperationTrusteePrivilege"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTrusteePrivilege.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTrusteePrivilege.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteePrivilegeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TrusteePrivilegeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TrusteePrivilegeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TrusteePrivilegeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoSuporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoSuporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoSuporteRow
            Get
                Return CType(Me.Rows(index),TipoSuporteRow)
            End Get
        End Property
        
        Public Event TipoSuporteRowChanged As TipoSuporteRowChangeEventHandler
        
        Public Event TipoSuporteRowChanging As TipoSuporteRowChangeEventHandler
        
        Public Event TipoSuporteRowDeleted As TipoSuporteRowChangeEventHandler
        
        Public Event TipoSuporteRowDeleting As TipoSuporteRowChangeEventHandler
        
        Public Overloads Sub AddTipoSuporteRow(ByVal row As TipoSuporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoSuporteRow(ByVal Designacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoSuporteRow
            Dim rowTipoSuporteRow As TipoSuporteRow = CType(Me.NewRow,TipoSuporteRow)
            rowTipoSuporteRow.ItemArray = New Object() {Nothing, Designacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoSuporteRow)
            Return rowTipoSuporteRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoSuporteRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoSuporteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoSuporteDataTable = CType(MyBase.Clone,TipoSuporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoSuporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnDesignacao}, false))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.Unique = true
            Me.columnDesignacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoSuporteRow() As TipoSuporteRow
            Return CType(Me.NewRow,TipoSuporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoSuporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoSuporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoSuporteRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoSuporteRowChanged(Me, New TipoSuporteRowChangeEvent(CType(e.Row,TipoSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoSuporteRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoSuporteRowChanging(Me, New TipoSuporteRowChangeEvent(CType(e.Row,TipoSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoSuporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoSuporteRowDeleted(Me, New TipoSuporteRowChangeEvent(CType(e.Row,TipoSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoSuporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoSuporteRowDeleting(Me, New TipoSuporteRowChangeEvent(CType(e.Row,TipoSuporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoSuporteRow(ByVal row As TipoSuporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoSuporteRow
        Inherits DataRow
        
        Private tableTipoSuporte As TipoSuporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoSuporte = CType(Me.Table,TipoSuporteDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoSuporte.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoSuporte.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoSuporte.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoSuporte.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoSuporte.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoSuporte.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoSuporte.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoSuporte.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoSuporte.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoSuporte.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDUFComponenteRows() As SFRDUFComponenteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoSuporteSFRDUFComponente")),SFRDUFComponenteRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoSuporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoSuporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoSuporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoSuporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDTradicaoDocumentalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTipoTradicaoDocumental As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDTradicaoDocumental")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoTradicaoDocumentalColumn As DataColumn
            Get
                Return Me.columnIDTipoTradicaoDocumental
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDTradicaoDocumentalRow
            Get
                Return CType(Me.Rows(index),SFRDTradicaoDocumentalRow)
            End Get
        End Property
        
        Public Event SFRDTradicaoDocumentalRowChanged As SFRDTradicaoDocumentalRowChangeEventHandler
        
        Public Event SFRDTradicaoDocumentalRowChanging As SFRDTradicaoDocumentalRowChangeEventHandler
        
        Public Event SFRDTradicaoDocumentalRowDeleted As SFRDTradicaoDocumentalRowChangeEventHandler
        
        Public Event SFRDTradicaoDocumentalRowDeleting As SFRDTradicaoDocumentalRowChangeEventHandler
        
        Public Overloads Sub AddSFRDTradicaoDocumentalRow(ByVal row As SFRDTradicaoDocumentalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDTradicaoDocumentalRow(ByVal parentFRDBaseRowByFRDBaseSFRDTradicaoDocumental As FRDBaseRow, ByVal parentTipoTradicaoDocumentalRowByTipoTradicaoDocumentalSFRDTradicaoDocumental As TipoTradicaoDocumentalRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDTradicaoDocumentalRow
            Dim rowSFRDTradicaoDocumentalRow As SFRDTradicaoDocumentalRow = CType(Me.NewRow,SFRDTradicaoDocumentalRow)
            rowSFRDTradicaoDocumentalRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDTradicaoDocumental(0), parentTipoTradicaoDocumentalRowByTipoTradicaoDocumentalSFRDTradicaoDocumental(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDTradicaoDocumentalRow)
            Return rowSFRDTradicaoDocumentalRow
        End Function
        
        Public Function FindByIDFRDBaseIDTipoTradicaoDocumental(ByVal IDFRDBase As Long, ByVal IDTipoTradicaoDocumental As Long) As SFRDTradicaoDocumentalRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDTipoTradicaoDocumental}),SFRDTradicaoDocumentalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDTradicaoDocumentalDataTable = CType(MyBase.Clone,SFRDTradicaoDocumentalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDTradicaoDocumentalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTipoTradicaoDocumental = Me.Columns("IDTipoTradicaoDocumental")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTipoTradicaoDocumental = New DataColumn("IDTipoTradicaoDocumental", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoTradicaoDocumental)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDTipoTradicaoDocumental}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDTipoTradicaoDocumental.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDTradicaoDocumentalRow() As SFRDTradicaoDocumentalRow
            Return CType(Me.NewRow,SFRDTradicaoDocumentalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDTradicaoDocumentalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDTradicaoDocumentalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDTradicaoDocumentalRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDTradicaoDocumentalRowChanged(Me, New SFRDTradicaoDocumentalRowChangeEvent(CType(e.Row,SFRDTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDTradicaoDocumentalRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDTradicaoDocumentalRowChanging(Me, New SFRDTradicaoDocumentalRowChangeEvent(CType(e.Row,SFRDTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDTradicaoDocumentalRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDTradicaoDocumentalRowDeleted(Me, New SFRDTradicaoDocumentalRowChangeEvent(CType(e.Row,SFRDTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDTradicaoDocumentalRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDTradicaoDocumentalRowDeleting(Me, New SFRDTradicaoDocumentalRowChangeEvent(CType(e.Row,SFRDTradicaoDocumentalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDTradicaoDocumentalRow(ByVal row As SFRDTradicaoDocumentalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDTradicaoDocumentalRow
        Inherits DataRow
        
        Private tableSFRDTradicaoDocumental As SFRDTradicaoDocumentalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDTradicaoDocumental = CType(Me.Table,SFRDTradicaoDocumentalDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDTradicaoDocumental.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDTradicaoDocumental.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTipoTradicaoDocumental As Long
            Get
                Return CType(Me(Me.tableSFRDTradicaoDocumental.IDTipoTradicaoDocumentalColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDTradicaoDocumental.IDTipoTradicaoDocumentalColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDTradicaoDocumental.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDTradicaoDocumental.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDTradicaoDocumental.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDTradicaoDocumental.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoTradicaoDocumentalRow As TipoTradicaoDocumentalRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoTradicaoDocumentalSFRDTradicaoDocumental")),TipoTradicaoDocumentalRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoTradicaoDocumentalSFRDTradicaoDocumental"))
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDTradicaoDocumental")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDTradicaoDocumental"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDTradicaoDocumental.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDTradicaoDocumental.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDTradicaoDocumentalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDTradicaoDocumentalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDTradicaoDocumentalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDTradicaoDocumentalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeUserDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnFullName As DataColumn
        
        Private columnIsAuthority As DataColumn
        
        Private columnIDTrusteeUserDefaultAuthority As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TrusteeUser")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property FullNameColumn As DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        Friend ReadOnly Property IsAuthorityColumn As DataColumn
            Get
                Return Me.columnIsAuthority
            End Get
        End Property
        
        Friend ReadOnly Property IDTrusteeUserDefaultAuthorityColumn As DataColumn
            Get
                Return Me.columnIDTrusteeUserDefaultAuthority
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TrusteeUserRow
            Get
                Return CType(Me.Rows(index),TrusteeUserRow)
            End Get
        End Property
        
        Public Event TrusteeUserRowChanged As TrusteeUserRowChangeEventHandler
        
        Public Event TrusteeUserRowChanging As TrusteeUserRowChangeEventHandler
        
        Public Event TrusteeUserRowDeleted As TrusteeUserRowChangeEventHandler
        
        Public Event TrusteeUserRowDeleting As TrusteeUserRowChangeEventHandler
        
        Public Overloads Sub AddTrusteeUserRow(ByVal row As TrusteeUserRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTrusteeUserRow(ByVal parentTrusteeRowByTrusteeTrusteeUser As TrusteeRow, ByVal Password As String, ByVal FullName As String, ByVal IsAuthority As Boolean, ByVal parentTrusteeUserRowByTrusteeUserTrusteeUserAuthority As TrusteeUserRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TrusteeUserRow
            Dim rowTrusteeUserRow As TrusteeUserRow = CType(Me.NewRow,TrusteeUserRow)
            rowTrusteeUserRow.ItemArray = New Object() {parentTrusteeRowByTrusteeTrusteeUser(0), Password, FullName, IsAuthority, parentTrusteeUserRowByTrusteeUserTrusteeUserAuthority(0), Versao, isDeleted}
            Me.Rows.Add(rowTrusteeUserRow)
            Return rowTrusteeUserRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TrusteeUserRow
            Return CType(Me.Rows.Find(New Object() {ID}),TrusteeUserRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TrusteeUserDataTable = CType(MyBase.Clone,TrusteeUserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TrusteeUserDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnPassword = Me.Columns("Password")
            Me.columnFullName = Me.Columns("FullName")
            Me.columnIsAuthority = Me.Columns("IsAuthority")
            Me.columnIDTrusteeUserDefaultAuthority = Me.Columns("IDTrusteeUserDefaultAuthority")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullName)
            Me.columnIsAuthority = New DataColumn("IsAuthority", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAuthority)
            Me.columnIDTrusteeUserDefaultAuthority = New DataColumn("IDTrusteeUserDefaultAuthority", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTrusteeUserDefaultAuthority)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnPassword.MaxLength = 50
            Me.columnFullName.MaxLength = 2000
            Me.columnIsAuthority.AllowDBNull = false
            Me.columnIsAuthority.DefaultValue = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTrusteeUserRow() As TrusteeUserRow
            Return CType(Me.NewRow,TrusteeUserRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TrusteeUserRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TrusteeUserRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TrusteeUserRowChangedEvent) Is Nothing) Then
                RaiseEvent TrusteeUserRowChanged(Me, New TrusteeUserRowChangeEvent(CType(e.Row,TrusteeUserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TrusteeUserRowChangingEvent) Is Nothing) Then
                RaiseEvent TrusteeUserRowChanging(Me, New TrusteeUserRowChangeEvent(CType(e.Row,TrusteeUserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TrusteeUserRowDeletedEvent) Is Nothing) Then
                RaiseEvent TrusteeUserRowDeleted(Me, New TrusteeUserRowChangeEvent(CType(e.Row,TrusteeUserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TrusteeUserRowDeletingEvent) Is Nothing) Then
                RaiseEvent TrusteeUserRowDeleting(Me, New TrusteeUserRowChangeEvent(CType(e.Row,TrusteeUserRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTrusteeUserRow(ByVal row As TrusteeUserRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeUserRow
        Inherits DataRow
        
        Private tableTrusteeUser As TrusteeUserDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrusteeUser = CType(Me.Table,TrusteeUserDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTrusteeUser.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTrusteeUser.IDColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                Try 
                    Return CType(Me(Me.tableTrusteeUser.PasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrusteeUser.PasswordColumn) = value
            End Set
        End Property
        
        Public Property FullName As String
            Get
                Try 
                    Return CType(Me(Me.tableTrusteeUser.FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrusteeUser.FullNameColumn) = value
            End Set
        End Property
        
        Public Property IsAuthority As Boolean
            Get
                Return CType(Me(Me.tableTrusteeUser.IsAuthorityColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrusteeUser.IsAuthorityColumn) = value
            End Set
        End Property
        
        Public Property IDTrusteeUserDefaultAuthority As Long
            Get
                Try 
                    Return CType(Me(Me.tableTrusteeUser.IDTrusteeUserDefaultAuthorityColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrusteeUser.IDTrusteeUserDefaultAuthorityColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTrusteeUser.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrusteeUser.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTrusteeUser.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTrusteeUser.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TrusteeRow As TrusteeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeTrusteeUser")),TrusteeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeTrusteeUser"))
            End Set
        End Property
        
        Public Property TrusteeUserRowParent As TrusteeUserRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeUserTrusteeUserAuthority")),TrusteeUserRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeUserTrusteeUserAuthority"))
            End Set
        End Property
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableTrusteeUser.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tableTrusteeUser.PasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableTrusteeUser.FullNameColumn)
        End Function
        
        Public Sub SetFullNameNull()
            Me(Me.tableTrusteeUser.FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDTrusteeUserDefaultAuthorityNull() As Boolean
            Return Me.IsNull(Me.tableTrusteeUser.IDTrusteeUserDefaultAuthorityColumn)
        End Function
        
        Public Sub SetIDTrusteeUserDefaultAuthorityNull()
            Me(Me.tableTrusteeUser.IDTrusteeUserDefaultAuthorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTrusteeUser.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTrusteeUser.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetFRDBaseDataDeDescricaoRowsByTrusteeUserFRDBaseDataDeDescricaoAuthority() As FRDBaseDataDeDescricaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeUserFRDBaseDataDeDescricaoAuthority")),FRDBaseDataDeDescricaoRow())
        End Function
        
        Public Function GetFRDBaseDataDeDescricaoRowsByTrusteeUserFRDBaseDataDeDescricao() As FRDBaseDataDeDescricaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeUserFRDBaseDataDeDescricao")),FRDBaseDataDeDescricaoRow())
        End Function
        
        Public Function GetControloAutDataDeDescricaoRowsByTrusteeUserControloAutDataDeDescricaoAuthority() As ControloAutDataDeDescricaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeUserControloAutDataDeDescricaoAuthority")),ControloAutDataDeDescricaoRow())
        End Function
        
        Public Function GetControloAutDataDeDescricaoRowsByTrusteeUserControloAutDataDeDescricao() As ControloAutDataDeDescricaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeUserControloAutDataDeDescricao")),ControloAutDataDeDescricaoRow())
        End Function
        
        Public Function GetUserGroupsRows() As UserGroupsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeUserUserGroups")),UserGroupsRow())
        End Function
        
        Public Function GetTrusteeUserRows() As TrusteeUserRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TrusteeUserTrusteeUserAuthority")),TrusteeUserRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TrusteeUserRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TrusteeUserRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TrusteeUserRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TrusteeUserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserGroupsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDUser As DataColumn
        
        Private columnIDGroup As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("UserGroups")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDUserColumn As DataColumn
            Get
                Return Me.columnIDUser
            End Get
        End Property
        
        Friend ReadOnly Property IDGroupColumn As DataColumn
            Get
                Return Me.columnIDGroup
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserGroupsRow
            Get
                Return CType(Me.Rows(index),UserGroupsRow)
            End Get
        End Property
        
        Public Event UserGroupsRowChanged As UserGroupsRowChangeEventHandler
        
        Public Event UserGroupsRowChanging As UserGroupsRowChangeEventHandler
        
        Public Event UserGroupsRowDeleted As UserGroupsRowChangeEventHandler
        
        Public Event UserGroupsRowDeleting As UserGroupsRowChangeEventHandler
        
        Public Overloads Sub AddUserGroupsRow(ByVal row As UserGroupsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserGroupsRow(ByVal parentTrusteeUserRowByTrusteeUserUserGroups As TrusteeUserRow, ByVal parentTrusteeGroupRowByTrusteeGroupUserGroups As TrusteeGroupRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As UserGroupsRow
            Dim rowUserGroupsRow As UserGroupsRow = CType(Me.NewRow,UserGroupsRow)
            rowUserGroupsRow.ItemArray = New Object() {parentTrusteeUserRowByTrusteeUserUserGroups(0), parentTrusteeGroupRowByTrusteeGroupUserGroups(0), Versao, isDeleted}
            Me.Rows.Add(rowUserGroupsRow)
            Return rowUserGroupsRow
        End Function
        
        Public Function FindByIDUserIDGroup(ByVal IDUser As Long, ByVal IDGroup As Long) As UserGroupsRow
            Return CType(Me.Rows.Find(New Object() {IDUser, IDGroup}),UserGroupsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserGroupsDataTable = CType(MyBase.Clone,UserGroupsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserGroupsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDUser = Me.Columns("IDUser")
            Me.columnIDGroup = Me.Columns("IDGroup")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDUser = New DataColumn("IDUser", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDUser)
            Me.columnIDGroup = New DataColumn("IDGroup", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDGroup)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDUser, Me.columnIDGroup}, true))
            Me.columnIDUser.AllowDBNull = false
            Me.columnIDGroup.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewUserGroupsRow() As UserGroupsRow
            Return CType(Me.NewRow,UserGroupsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserGroupsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserGroupsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserGroupsRowChangedEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowChanged(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserGroupsRowChangingEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowChanging(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserGroupsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowDeleted(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserGroupsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowDeleting(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserGroupsRow(ByVal row As UserGroupsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserGroupsRow
        Inherits DataRow
        
        Private tableUserGroups As UserGroupsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserGroups = CType(Me.Table,UserGroupsDataTable)
        End Sub
        
        Public Property IDUser As Long
            Get
                Return CType(Me(Me.tableUserGroups.IDUserColumn),Long)
            End Get
            Set
                Me(Me.tableUserGroups.IDUserColumn) = value
            End Set
        End Property
        
        Public Property IDGroup As Long
            Get
                Return CType(Me(Me.tableUserGroups.IDGroupColumn),Long)
            End Get
            Set
                Me(Me.tableUserGroups.IDGroupColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableUserGroups.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserGroups.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableUserGroups.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableUserGroups.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TrusteeUserRow As TrusteeUserRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeUserUserGroups")),TrusteeUserRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeUserUserGroups"))
            End Set
        End Property
        
        Public Property TrusteeGroupRow As TrusteeGroupRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeGroupUserGroups")),TrusteeGroupRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeGroupUserGroups"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableUserGroups.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableUserGroups.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserGroupsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserGroupsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserGroupsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserGroupsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDMaterialDeSuporteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTipoMaterialDeSuporte As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDMaterialDeSuporte")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoMaterialDeSuporteColumn As DataColumn
            Get
                Return Me.columnIDTipoMaterialDeSuporte
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDMaterialDeSuporteRow
            Get
                Return CType(Me.Rows(index),SFRDMaterialDeSuporteRow)
            End Get
        End Property
        
        Public Event SFRDMaterialDeSuporteRowChanged As SFRDMaterialDeSuporteRowChangeEventHandler
        
        Public Event SFRDMaterialDeSuporteRowChanging As SFRDMaterialDeSuporteRowChangeEventHandler
        
        Public Event SFRDMaterialDeSuporteRowDeleted As SFRDMaterialDeSuporteRowChangeEventHandler
        
        Public Event SFRDMaterialDeSuporteRowDeleting As SFRDMaterialDeSuporteRowChangeEventHandler
        
        Public Overloads Sub AddSFRDMaterialDeSuporteRow(ByVal row As SFRDMaterialDeSuporteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDMaterialDeSuporteRow(ByVal parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDMaterialDeSuporte As SFRDCondicaoDeAcessoRow, ByVal parentTipoMaterialDeSuporteRowByTipoMaterialDeSuporteSFRDMaterialDeSuporte As TipoMaterialDeSuporteRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDMaterialDeSuporteRow
            Dim rowSFRDMaterialDeSuporteRow As SFRDMaterialDeSuporteRow = CType(Me.NewRow,SFRDMaterialDeSuporteRow)
            rowSFRDMaterialDeSuporteRow.ItemArray = New Object() {parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDMaterialDeSuporte(0), parentTipoMaterialDeSuporteRowByTipoMaterialDeSuporteSFRDMaterialDeSuporte(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDMaterialDeSuporteRow)
            Return rowSFRDMaterialDeSuporteRow
        End Function
        
        Public Function FindByIDFRDBaseIDTipoMaterialDeSuporte(ByVal IDFRDBase As Long, ByVal IDTipoMaterialDeSuporte As Long) As SFRDMaterialDeSuporteRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDTipoMaterialDeSuporte}),SFRDMaterialDeSuporteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDMaterialDeSuporteDataTable = CType(MyBase.Clone,SFRDMaterialDeSuporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDMaterialDeSuporteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTipoMaterialDeSuporte = Me.Columns("IDTipoMaterialDeSuporte")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTipoMaterialDeSuporte = New DataColumn("IDTipoMaterialDeSuporte", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoMaterialDeSuporte)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDTipoMaterialDeSuporte}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDTipoMaterialDeSuporte.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDMaterialDeSuporteRow() As SFRDMaterialDeSuporteRow
            Return CType(Me.NewRow,SFRDMaterialDeSuporteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDMaterialDeSuporteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDMaterialDeSuporteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDMaterialDeSuporteRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDMaterialDeSuporteRowChanged(Me, New SFRDMaterialDeSuporteRowChangeEvent(CType(e.Row,SFRDMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDMaterialDeSuporteRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDMaterialDeSuporteRowChanging(Me, New SFRDMaterialDeSuporteRowChangeEvent(CType(e.Row,SFRDMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDMaterialDeSuporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDMaterialDeSuporteRowDeleted(Me, New SFRDMaterialDeSuporteRowChangeEvent(CType(e.Row,SFRDMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDMaterialDeSuporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDMaterialDeSuporteRowDeleting(Me, New SFRDMaterialDeSuporteRowChangeEvent(CType(e.Row,SFRDMaterialDeSuporteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDMaterialDeSuporteRow(ByVal row As SFRDMaterialDeSuporteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDMaterialDeSuporteRow
        Inherits DataRow
        
        Private tableSFRDMaterialDeSuporte As SFRDMaterialDeSuporteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDMaterialDeSuporte = CType(Me.Table,SFRDMaterialDeSuporteDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDMaterialDeSuporte.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDMaterialDeSuporte.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTipoMaterialDeSuporte As Long
            Get
                Return CType(Me(Me.tableSFRDMaterialDeSuporte.IDTipoMaterialDeSuporteColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDMaterialDeSuporte.IDTipoMaterialDeSuporteColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDMaterialDeSuporte.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDMaterialDeSuporte.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDMaterialDeSuporte.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDMaterialDeSuporte.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoMaterialDeSuporteRow As TipoMaterialDeSuporteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoMaterialDeSuporteSFRDMaterialDeSuporte")),TipoMaterialDeSuporteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoMaterialDeSuporteSFRDMaterialDeSuporte"))
            End Set
        End Property
        
        Public Property SFRDCondicaoDeAcessoRow As SFRDCondicaoDeAcessoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDMaterialDeSuporte")),SFRDCondicaoDeAcessoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDMaterialDeSuporte"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDMaterialDeSuporte.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDMaterialDeSuporte.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDMaterialDeSuporteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDMaterialDeSuporteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDMaterialDeSuporteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDMaterialDeSuporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductFunctionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDTipoServer As DataColumn
        
        Private columnIDTipoClient As DataColumn
        
        Private columnIDTipoFunctionGroup As DataColumn
        
        Private columnIdxTipoFunction As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ProductFunction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoServerColumn As DataColumn
            Get
                Return Me.columnIDTipoServer
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoClientColumn As DataColumn
            Get
                Return Me.columnIDTipoClient
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoFunctionGroupColumn As DataColumn
            Get
                Return Me.columnIDTipoFunctionGroup
            End Get
        End Property
        
        Friend ReadOnly Property IdxTipoFunctionColumn As DataColumn
            Get
                Return Me.columnIdxTipoFunction
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductFunctionRow
            Get
                Return CType(Me.Rows(index),ProductFunctionRow)
            End Get
        End Property
        
        Public Event ProductFunctionRowChanged As ProductFunctionRowChangeEventHandler
        
        Public Event ProductFunctionRowChanging As ProductFunctionRowChangeEventHandler
        
        Public Event ProductFunctionRowDeleted As ProductFunctionRowChangeEventHandler
        
        Public Event ProductFunctionRowDeleting As ProductFunctionRowChangeEventHandler
        
        Public Overloads Sub AddProductFunctionRow(ByVal row As ProductFunctionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProductFunctionRow(ByVal parentTipoServerRowByTipoServerProductFunction As TipoServerRow, ByVal parentTipoClientRowByTipoClientProductFunction As TipoClientRow, ByVal IDTipoFunctionGroup As Byte, ByVal IdxTipoFunction As Byte, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ProductFunctionRow
            Dim rowProductFunctionRow As ProductFunctionRow = CType(Me.NewRow,ProductFunctionRow)
            rowProductFunctionRow.ItemArray = New Object() {parentTipoServerRowByTipoServerProductFunction(0), parentTipoClientRowByTipoClientProductFunction(0), IDTipoFunctionGroup, IdxTipoFunction, Versao, isDeleted}
            Me.Rows.Add(rowProductFunctionRow)
            Return rowProductFunctionRow
        End Function
        
        Public Function FindByIDTipoServerIDTipoClientIDTipoFunctionGroupIdxTipoFunction(ByVal IDTipoServer As Long, ByVal IDTipoClient As Long, ByVal IDTipoFunctionGroup As Byte, ByVal IdxTipoFunction As Byte) As ProductFunctionRow
            Return CType(Me.Rows.Find(New Object() {IDTipoServer, IDTipoClient, IDTipoFunctionGroup, IdxTipoFunction}),ProductFunctionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProductFunctionDataTable = CType(MyBase.Clone,ProductFunctionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProductFunctionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDTipoServer = Me.Columns("IDTipoServer")
            Me.columnIDTipoClient = Me.Columns("IDTipoClient")
            Me.columnIDTipoFunctionGroup = Me.Columns("IDTipoFunctionGroup")
            Me.columnIdxTipoFunction = Me.Columns("IdxTipoFunction")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDTipoServer = New DataColumn("IDTipoServer", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoServer)
            Me.columnIDTipoClient = New DataColumn("IDTipoClient", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoClient)
            Me.columnIDTipoFunctionGroup = New DataColumn("IDTipoFunctionGroup", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoFunctionGroup)
            Me.columnIdxTipoFunction = New DataColumn("IdxTipoFunction", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdxTipoFunction)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDTipoServer, Me.columnIDTipoClient, Me.columnIDTipoFunctionGroup, Me.columnIdxTipoFunction}, true))
            Me.columnIDTipoServer.AllowDBNull = false
            Me.columnIDTipoClient.AllowDBNull = false
            Me.columnIDTipoFunctionGroup.AllowDBNull = false
            Me.columnIdxTipoFunction.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewProductFunctionRow() As ProductFunctionRow
            Return CType(Me.NewRow,ProductFunctionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProductFunctionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductFunctionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductFunctionRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductFunctionRowChanged(Me, New ProductFunctionRowChangeEvent(CType(e.Row,ProductFunctionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductFunctionRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductFunctionRowChanging(Me, New ProductFunctionRowChangeEvent(CType(e.Row,ProductFunctionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductFunctionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductFunctionRowDeleted(Me, New ProductFunctionRowChangeEvent(CType(e.Row,ProductFunctionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductFunctionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductFunctionRowDeleting(Me, New ProductFunctionRowChangeEvent(CType(e.Row,ProductFunctionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProductFunctionRow(ByVal row As ProductFunctionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductFunctionRow
        Inherits DataRow
        
        Private tableProductFunction As ProductFunctionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductFunction = CType(Me.Table,ProductFunctionDataTable)
        End Sub
        
        Public Property IDTipoServer As Long
            Get
                Return CType(Me(Me.tableProductFunction.IDTipoServerColumn),Long)
            End Get
            Set
                Me(Me.tableProductFunction.IDTipoServerColumn) = value
            End Set
        End Property
        
        Public Property IDTipoClient As Long
            Get
                Return CType(Me(Me.tableProductFunction.IDTipoClientColumn),Long)
            End Get
            Set
                Me(Me.tableProductFunction.IDTipoClientColumn) = value
            End Set
        End Property
        
        Public Property IDTipoFunctionGroup As Byte
            Get
                Return CType(Me(Me.tableProductFunction.IDTipoFunctionGroupColumn),Byte)
            End Get
            Set
                Me(Me.tableProductFunction.IDTipoFunctionGroupColumn) = value
            End Set
        End Property
        
        Public Property IdxTipoFunction As Byte
            Get
                Return CType(Me(Me.tableProductFunction.IdxTipoFunctionColumn),Byte)
            End Get
            Set
                Me(Me.tableProductFunction.IdxTipoFunctionColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableProductFunction.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductFunction.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableProductFunction.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableProductFunction.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoServerRow As TipoServerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoServerProductFunction")),TipoServerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoServerProductFunction"))
            End Set
        End Property
        
        Public Property TipoClientRow As TipoClientRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoClientProductFunction")),TipoClientRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoClientProductFunction"))
            End Set
        End Property
        
        Public Property TipoFunctionRowParent As TipoFunctionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoFunctionProductFunction")),TipoFunctionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoFunctionProductFunction"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableProductFunction.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableProductFunction.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProductFunctionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProductFunctionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProductFunctionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProductFunctionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDOrdenacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTipoOrdenacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDOrdenacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoOrdenacaoColumn As DataColumn
            Get
                Return Me.columnIDTipoOrdenacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDOrdenacaoRow
            Get
                Return CType(Me.Rows(index),SFRDOrdenacaoRow)
            End Get
        End Property
        
        Public Event SFRDOrdenacaoRowChanged As SFRDOrdenacaoRowChangeEventHandler
        
        Public Event SFRDOrdenacaoRowChanging As SFRDOrdenacaoRowChangeEventHandler
        
        Public Event SFRDOrdenacaoRowDeleted As SFRDOrdenacaoRowChangeEventHandler
        
        Public Event SFRDOrdenacaoRowDeleting As SFRDOrdenacaoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDOrdenacaoRow(ByVal row As SFRDOrdenacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDOrdenacaoRow(ByVal parentFRDBaseRowByFRDBaseSFRDOrdenacao As FRDBaseRow, ByVal parentTipoOrdenacaoRowByTipoOrdenacaoSFRDOrdenacao As TipoOrdenacaoRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDOrdenacaoRow
            Dim rowSFRDOrdenacaoRow As SFRDOrdenacaoRow = CType(Me.NewRow,SFRDOrdenacaoRow)
            rowSFRDOrdenacaoRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDOrdenacao(0), parentTipoOrdenacaoRowByTipoOrdenacaoSFRDOrdenacao(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDOrdenacaoRow)
            Return rowSFRDOrdenacaoRow
        End Function
        
        Public Function FindByIDFRDBaseIDTipoOrdenacao(ByVal IDFRDBase As Long, ByVal IDTipoOrdenacao As Long) As SFRDOrdenacaoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDTipoOrdenacao}),SFRDOrdenacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDOrdenacaoDataTable = CType(MyBase.Clone,SFRDOrdenacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDOrdenacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTipoOrdenacao = Me.Columns("IDTipoOrdenacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTipoOrdenacao = New DataColumn("IDTipoOrdenacao", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoOrdenacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDTipoOrdenacao}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDTipoOrdenacao.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDOrdenacaoRow() As SFRDOrdenacaoRow
            Return CType(Me.NewRow,SFRDOrdenacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDOrdenacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDOrdenacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDOrdenacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDOrdenacaoRowChanged(Me, New SFRDOrdenacaoRowChangeEvent(CType(e.Row,SFRDOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDOrdenacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDOrdenacaoRowChanging(Me, New SFRDOrdenacaoRowChangeEvent(CType(e.Row,SFRDOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDOrdenacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDOrdenacaoRowDeleted(Me, New SFRDOrdenacaoRowChangeEvent(CType(e.Row,SFRDOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDOrdenacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDOrdenacaoRowDeleting(Me, New SFRDOrdenacaoRowChangeEvent(CType(e.Row,SFRDOrdenacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDOrdenacaoRow(ByVal row As SFRDOrdenacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDOrdenacaoRow
        Inherits DataRow
        
        Private tableSFRDOrdenacao As SFRDOrdenacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDOrdenacao = CType(Me.Table,SFRDOrdenacaoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDOrdenacao.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDOrdenacao.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTipoOrdenacao As Long
            Get
                Return CType(Me(Me.tableSFRDOrdenacao.IDTipoOrdenacaoColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDOrdenacao.IDTipoOrdenacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDOrdenacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDOrdenacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDOrdenacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDOrdenacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoOrdenacaoRow As TipoOrdenacaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoOrdenacaoSFRDOrdenacao")),TipoOrdenacaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoOrdenacaoSFRDOrdenacao"))
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDOrdenacao")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDOrdenacao"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDOrdenacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDOrdenacao.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDOrdenacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDOrdenacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDOrdenacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDOrdenacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFunctionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDTipoFunctionGroup As DataColumn
        
        Private columnidx As DataColumn
        
        Private columnName As DataColumn
        
        Private columnModuleName As DataColumn
        
        Private columnClassName As DataColumn
        
        Private columnGUIOrder As DataColumn
        
        Private columnIDTipoFunctionGroupContext As DataColumn
        
        Private columnIdxTipoFunctionGroupContext As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoFunction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoFunctionGroupColumn As DataColumn
            Get
                Return Me.columnIDTipoFunctionGroup
            End Get
        End Property
        
        Friend ReadOnly Property idxColumn As DataColumn
            Get
                Return Me.columnidx
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property ModuleNameColumn As DataColumn
            Get
                Return Me.columnModuleName
            End Get
        End Property
        
        Friend ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Friend ReadOnly Property GUIOrderColumn As DataColumn
            Get
                Return Me.columnGUIOrder
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoFunctionGroupContextColumn As DataColumn
            Get
                Return Me.columnIDTipoFunctionGroupContext
            End Get
        End Property
        
        Friend ReadOnly Property IdxTipoFunctionGroupContextColumn As DataColumn
            Get
                Return Me.columnIdxTipoFunctionGroupContext
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoFunctionRow
            Get
                Return CType(Me.Rows(index),TipoFunctionRow)
            End Get
        End Property
        
        Public Event TipoFunctionRowChanged As TipoFunctionRowChangeEventHandler
        
        Public Event TipoFunctionRowChanging As TipoFunctionRowChangeEventHandler
        
        Public Event TipoFunctionRowDeleted As TipoFunctionRowChangeEventHandler
        
        Public Event TipoFunctionRowDeleting As TipoFunctionRowChangeEventHandler
        
        Public Overloads Sub AddTipoFunctionRow(ByVal row As TipoFunctionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoFunctionRow(ByVal parentTipoFunctionGroupRowByTipoFunctionGroupTipoFunction As TipoFunctionGroupRow, ByVal idx As Byte, ByVal Name As String, ByVal ModuleName As String, ByVal ClassName As String, ByVal GUIOrder As Byte, ByVal IDTipoFunctionGroupContext As Byte, ByVal IdxTipoFunctionGroupContext As Byte, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoFunctionRow
            Dim rowTipoFunctionRow As TipoFunctionRow = CType(Me.NewRow,TipoFunctionRow)
            rowTipoFunctionRow.ItemArray = New Object() {parentTipoFunctionGroupRowByTipoFunctionGroupTipoFunction(0), idx, Name, ModuleName, ClassName, GUIOrder, IDTipoFunctionGroupContext, IdxTipoFunctionGroupContext, Versao, isDeleted}
            Me.Rows.Add(rowTipoFunctionRow)
            Return rowTipoFunctionRow
        End Function
        
        Public Function FindByIDTipoFunctionGroupidx(ByVal IDTipoFunctionGroup As Byte, ByVal idx As Byte) As TipoFunctionRow
            Return CType(Me.Rows.Find(New Object() {IDTipoFunctionGroup, idx}),TipoFunctionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoFunctionDataTable = CType(MyBase.Clone,TipoFunctionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoFunctionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDTipoFunctionGroup = Me.Columns("IDTipoFunctionGroup")
            Me.columnidx = Me.Columns("idx")
            Me.columnName = Me.Columns("Name")
            Me.columnModuleName = Me.Columns("ModuleName")
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnGUIOrder = Me.Columns("GUIOrder")
            Me.columnIDTipoFunctionGroupContext = Me.Columns("IDTipoFunctionGroupContext")
            Me.columnIdxTipoFunctionGroupContext = Me.Columns("IdxTipoFunctionGroupContext")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDTipoFunctionGroup = New DataColumn("IDTipoFunctionGroup", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoFunctionGroup)
            Me.columnidx = New DataColumn("idx", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidx)
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnModuleName = New DataColumn("ModuleName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModuleName)
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnGUIOrder = New DataColumn("GUIOrder", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUIOrder)
            Me.columnIDTipoFunctionGroupContext = New DataColumn("IDTipoFunctionGroupContext", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoFunctionGroupContext)
            Me.columnIdxTipoFunctionGroupContext = New DataColumn("IdxTipoFunctionGroupContext", GetType(System.Byte), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdxTipoFunctionGroupContext)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDTipoFunctionGroup, Me.columnidx}, true))
            Me.columnIDTipoFunctionGroup.AllowDBNull = false
            Me.columnidx.AllowDBNull = false
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnModuleName.AllowDBNull = false
            Me.columnModuleName.MaxLength = 50
            Me.columnClassName.AllowDBNull = false
            Me.columnClassName.MaxLength = 50
            Me.columnGUIOrder.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoFunctionRow() As TipoFunctionRow
            Return CType(Me.NewRow,TipoFunctionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoFunctionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoFunctionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoFunctionRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoFunctionRowChanged(Me, New TipoFunctionRowChangeEvent(CType(e.Row,TipoFunctionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoFunctionRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoFunctionRowChanging(Me, New TipoFunctionRowChangeEvent(CType(e.Row,TipoFunctionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoFunctionRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoFunctionRowDeleted(Me, New TipoFunctionRowChangeEvent(CType(e.Row,TipoFunctionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoFunctionRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoFunctionRowDeleting(Me, New TipoFunctionRowChangeEvent(CType(e.Row,TipoFunctionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoFunctionRow(ByVal row As TipoFunctionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFunctionRow
        Inherits DataRow
        
        Private tableTipoFunction As TipoFunctionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoFunction = CType(Me.Table,TipoFunctionDataTable)
        End Sub
        
        Public Property IDTipoFunctionGroup As Byte
            Get
                Return CType(Me(Me.tableTipoFunction.IDTipoFunctionGroupColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoFunction.IDTipoFunctionGroupColumn) = value
            End Set
        End Property
        
        Public Property idx As Byte
            Get
                Return CType(Me(Me.tableTipoFunction.idxColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoFunction.idxColumn) = value
            End Set
        End Property
        
        Public Property Name As String
            Get
                Return CType(Me(Me.tableTipoFunction.NameColumn),String)
            End Get
            Set
                Me(Me.tableTipoFunction.NameColumn) = value
            End Set
        End Property
        
        Public Property ModuleName As String
            Get
                Return CType(Me(Me.tableTipoFunction.ModuleNameColumn),String)
            End Get
            Set
                Me(Me.tableTipoFunction.ModuleNameColumn) = value
            End Set
        End Property
        
        Public Property ClassName As String
            Get
                Return CType(Me(Me.tableTipoFunction.ClassNameColumn),String)
            End Get
            Set
                Me(Me.tableTipoFunction.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property GUIOrder As Byte
            Get
                Return CType(Me(Me.tableTipoFunction.GUIOrderColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoFunction.GUIOrderColumn) = value
            End Set
        End Property
        
        Public Property IDTipoFunctionGroupContext As Byte
            Get
                Try 
                    Return CType(Me(Me.tableTipoFunction.IDTipoFunctionGroupContextColumn),Byte)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoFunction.IDTipoFunctionGroupContextColumn) = value
            End Set
        End Property
        
        Public Property IdxTipoFunctionGroupContext As Byte
            Get
                Try 
                    Return CType(Me(Me.tableTipoFunction.IdxTipoFunctionGroupContextColumn),Byte)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoFunction.IdxTipoFunctionGroupContextColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoFunction.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoFunction.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoFunction.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoFunction.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoFunctionRowParent As TipoFunctionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoFunctionTipoFunction")),TipoFunctionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoFunctionTipoFunction"))
            End Set
        End Property
        
        Public Property TipoFunctionGroupRow As TipoFunctionGroupRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoFunctionGroupTipoFunction")),TipoFunctionGroupRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoFunctionGroupTipoFunction"))
            End Set
        End Property
        
        Public Function IsIDTipoFunctionGroupContextNull() As Boolean
            Return Me.IsNull(Me.tableTipoFunction.IDTipoFunctionGroupContextColumn)
        End Function
        
        Public Sub SetIDTipoFunctionGroupContextNull()
            Me(Me.tableTipoFunction.IDTipoFunctionGroupContextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdxTipoFunctionGroupContextNull() As Boolean
            Return Me.IsNull(Me.tableTipoFunction.IdxTipoFunctionGroupContextColumn)
        End Function
        
        Public Sub SetIdxTipoFunctionGroupContextNull()
            Me(Me.tableTipoFunction.IdxTipoFunctionGroupContextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoFunction.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoFunction.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetTipoFunctionRows() As TipoFunctionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoFunctionTipoFunction")),TipoFunctionRow())
        End Function
        
        Public Function GetProductFunctionRows() As ProductFunctionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoFunctionProductFunction")),ProductFunctionRow())
        End Function
        
        Public Function GetFunctionOperationRows() As FunctionOperationRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoFunctionFunctionOperation")),FunctionOperationRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoFunctionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoFunctionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoFunctionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoFunctionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDataDeDescricaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDControloAut As DataColumn
        
        Private columnIDTrusteeOperator As DataColumn
        
        Private columnIDTrusteeAuthority As DataColumn
        
        Private columnDataEdicao As DataColumn
        
        Private columnDataAutoria As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ControloAutDataDeDescricao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutColumn As DataColumn
            Get
                Return Me.columnIDControloAut
            End Get
        End Property
        
        Friend ReadOnly Property IDTrusteeOperatorColumn As DataColumn
            Get
                Return Me.columnIDTrusteeOperator
            End Get
        End Property
        
        Friend ReadOnly Property IDTrusteeAuthorityColumn As DataColumn
            Get
                Return Me.columnIDTrusteeAuthority
            End Get
        End Property
        
        Friend ReadOnly Property DataEdicaoColumn As DataColumn
            Get
                Return Me.columnDataEdicao
            End Get
        End Property
        
        Friend ReadOnly Property DataAutoriaColumn As DataColumn
            Get
                Return Me.columnDataAutoria
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ControloAutDataDeDescricaoRow
            Get
                Return CType(Me.Rows(index),ControloAutDataDeDescricaoRow)
            End Get
        End Property
        
        Public Event ControloAutDataDeDescricaoRowChanged As ControloAutDataDeDescricaoRowChangeEventHandler
        
        Public Event ControloAutDataDeDescricaoRowChanging As ControloAutDataDeDescricaoRowChangeEventHandler
        
        Public Event ControloAutDataDeDescricaoRowDeleted As ControloAutDataDeDescricaoRowChangeEventHandler
        
        Public Event ControloAutDataDeDescricaoRowDeleting As ControloAutDataDeDescricaoRowChangeEventHandler
        
        Public Overloads Sub AddControloAutDataDeDescricaoRow(ByVal row As ControloAutDataDeDescricaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddControloAutDataDeDescricaoRow(ByVal parentControloAutRowByControloAutControloAutDataDeDescricao As ControloAutRow, ByVal parentTrusteeUserRowByTrusteeUserControloAutDataDeDescricao As TrusteeUserRow, ByVal parentTrusteeUserRowByTrusteeUserControloAutDataDeDescricaoAuthority As TrusteeUserRow, ByVal DataEdicao As Date, ByVal DataAutoria As Date, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ControloAutDataDeDescricaoRow
            Dim rowControloAutDataDeDescricaoRow As ControloAutDataDeDescricaoRow = CType(Me.NewRow,ControloAutDataDeDescricaoRow)
            rowControloAutDataDeDescricaoRow.ItemArray = New Object() {parentControloAutRowByControloAutControloAutDataDeDescricao(0), parentTrusteeUserRowByTrusteeUserControloAutDataDeDescricao(0), parentTrusteeUserRowByTrusteeUserControloAutDataDeDescricaoAuthority(0), DataEdicao, DataAutoria, Versao, isDeleted}
            Me.Rows.Add(rowControloAutDataDeDescricaoRow)
            Return rowControloAutDataDeDescricaoRow
        End Function
        
        Public Function FindByIDControloAutIDTrusteeOperatorDataEdicao(ByVal IDControloAut As Long, ByVal IDTrusteeOperator As Long, ByVal DataEdicao As Date) As ControloAutDataDeDescricaoRow
            Return CType(Me.Rows.Find(New Object() {IDControloAut, IDTrusteeOperator, DataEdicao}),ControloAutDataDeDescricaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ControloAutDataDeDescricaoDataTable = CType(MyBase.Clone,ControloAutDataDeDescricaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ControloAutDataDeDescricaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDControloAut = Me.Columns("IDControloAut")
            Me.columnIDTrusteeOperator = Me.Columns("IDTrusteeOperator")
            Me.columnIDTrusteeAuthority = Me.Columns("IDTrusteeAuthority")
            Me.columnDataEdicao = Me.Columns("DataEdicao")
            Me.columnDataAutoria = Me.Columns("DataAutoria")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDControloAut = New DataColumn("IDControloAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAut)
            Me.columnIDTrusteeOperator = New DataColumn("IDTrusteeOperator", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTrusteeOperator)
            Me.columnIDTrusteeAuthority = New DataColumn("IDTrusteeAuthority", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTrusteeAuthority)
            Me.columnDataEdicao = New DataColumn("DataEdicao", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataEdicao)
            Me.columnDataAutoria = New DataColumn("DataAutoria", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataAutoria)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDControloAut, Me.columnIDTrusteeOperator, Me.columnDataEdicao}, true))
            Me.columnIDControloAut.AllowDBNull = false
            Me.columnIDTrusteeOperator.AllowDBNull = false
            Me.columnDataEdicao.AllowDBNull = false
            Me.columnDataAutoria.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewControloAutDataDeDescricaoRow() As ControloAutDataDeDescricaoRow
            Return CType(Me.NewRow,ControloAutDataDeDescricaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ControloAutDataDeDescricaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ControloAutDataDeDescricaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ControloAutDataDeDescricaoRowChangedEvent) Is Nothing) Then
                RaiseEvent ControloAutDataDeDescricaoRowChanged(Me, New ControloAutDataDeDescricaoRowChangeEvent(CType(e.Row,ControloAutDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ControloAutDataDeDescricaoRowChangingEvent) Is Nothing) Then
                RaiseEvent ControloAutDataDeDescricaoRowChanging(Me, New ControloAutDataDeDescricaoRowChangeEvent(CType(e.Row,ControloAutDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ControloAutDataDeDescricaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ControloAutDataDeDescricaoRowDeleted(Me, New ControloAutDataDeDescricaoRowChangeEvent(CType(e.Row,ControloAutDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ControloAutDataDeDescricaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ControloAutDataDeDescricaoRowDeleting(Me, New ControloAutDataDeDescricaoRowChangeEvent(CType(e.Row,ControloAutDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveControloAutDataDeDescricaoRow(ByVal row As ControloAutDataDeDescricaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDataDeDescricaoRow
        Inherits DataRow
        
        Private tableControloAutDataDeDescricao As ControloAutDataDeDescricaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableControloAutDataDeDescricao = CType(Me.Table,ControloAutDataDeDescricaoDataTable)
        End Sub
        
        Public Property IDControloAut As Long
            Get
                Return CType(Me(Me.tableControloAutDataDeDescricao.IDControloAutColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutDataDeDescricao.IDControloAutColumn) = value
            End Set
        End Property
        
        Public Property IDTrusteeOperator As Long
            Get
                Return CType(Me(Me.tableControloAutDataDeDescricao.IDTrusteeOperatorColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutDataDeDescricao.IDTrusteeOperatorColumn) = value
            End Set
        End Property
        
        Public Property IDTrusteeAuthority As Long
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDataDeDescricao.IDTrusteeAuthorityColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDataDeDescricao.IDTrusteeAuthorityColumn) = value
            End Set
        End Property
        
        Public Property DataEdicao As Date
            Get
                Return CType(Me(Me.tableControloAutDataDeDescricao.DataEdicaoColumn),Date)
            End Get
            Set
                Me(Me.tableControloAutDataDeDescricao.DataEdicaoColumn) = value
            End Set
        End Property
        
        Public Property DataAutoria As Date
            Get
                Return CType(Me(Me.tableControloAutDataDeDescricao.DataAutoriaColumn),Date)
            End Get
            Set
                Me(Me.tableControloAutDataDeDescricao.DataAutoriaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDataDeDescricao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDataDeDescricao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableControloAutDataDeDescricao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAutDataDeDescricao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TrusteeUserRowByTrusteeUserControloAutDataDeDescricaoAuthority As TrusteeUserRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeUserControloAutDataDeDescricaoAuthority")),TrusteeUserRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeUserControloAutDataDeDescricaoAuthority"))
            End Set
        End Property
        
        Public Property TrusteeUserRowByTrusteeUserControloAutDataDeDescricao As TrusteeUserRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeUserControloAutDataDeDescricao")),TrusteeUserRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeUserControloAutDataDeDescricao"))
            End Set
        End Property
        
        Public Property ControloAutRow As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutControloAutDataDeDescricao")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutControloAutDataDeDescricao"))
            End Set
        End Property
        
        Public Function IsIDTrusteeAuthorityNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDataDeDescricao.IDTrusteeAuthorityColumn)
        End Function
        
        Public Sub SetIDTrusteeAuthorityNull()
            Me(Me.tableControloAutDataDeDescricao.IDTrusteeAuthorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDataDeDescricao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableControloAutDataDeDescricao.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDataDeDescricaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ControloAutDataDeDescricaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ControloAutDataDeDescricaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ControloAutDataDeDescricaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDEstadoDeConservacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTipoEstadoDeConservacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDEstadoDeConservacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoEstadoDeConservacaoColumn As DataColumn
            Get
                Return Me.columnIDTipoEstadoDeConservacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDEstadoDeConservacaoRow
            Get
                Return CType(Me.Rows(index),SFRDEstadoDeConservacaoRow)
            End Get
        End Property
        
        Public Event SFRDEstadoDeConservacaoRowChanged As SFRDEstadoDeConservacaoRowChangeEventHandler
        
        Public Event SFRDEstadoDeConservacaoRowChanging As SFRDEstadoDeConservacaoRowChangeEventHandler
        
        Public Event SFRDEstadoDeConservacaoRowDeleted As SFRDEstadoDeConservacaoRowChangeEventHandler
        
        Public Event SFRDEstadoDeConservacaoRowDeleting As SFRDEstadoDeConservacaoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDEstadoDeConservacaoRow(ByVal row As SFRDEstadoDeConservacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDEstadoDeConservacaoRow(ByVal parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDEstadoDeConservacao As SFRDCondicaoDeAcessoRow, ByVal parentTipoEstadoDeConservacaoRowByTipoEstadoDeConservacaoSFRDEstadoDeConservacao As TipoEstadoDeConservacaoRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDEstadoDeConservacaoRow
            Dim rowSFRDEstadoDeConservacaoRow As SFRDEstadoDeConservacaoRow = CType(Me.NewRow,SFRDEstadoDeConservacaoRow)
            rowSFRDEstadoDeConservacaoRow.ItemArray = New Object() {parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDEstadoDeConservacao(0), parentTipoEstadoDeConservacaoRowByTipoEstadoDeConservacaoSFRDEstadoDeConservacao(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDEstadoDeConservacaoRow)
            Return rowSFRDEstadoDeConservacaoRow
        End Function
        
        Public Function FindByIDFRDBaseIDTipoEstadoDeConservacao(ByVal IDFRDBase As Long, ByVal IDTipoEstadoDeConservacao As Long) As SFRDEstadoDeConservacaoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDTipoEstadoDeConservacao}),SFRDEstadoDeConservacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDEstadoDeConservacaoDataTable = CType(MyBase.Clone,SFRDEstadoDeConservacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDEstadoDeConservacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTipoEstadoDeConservacao = Me.Columns("IDTipoEstadoDeConservacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTipoEstadoDeConservacao = New DataColumn("IDTipoEstadoDeConservacao", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoEstadoDeConservacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDTipoEstadoDeConservacao}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDTipoEstadoDeConservacao.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDEstadoDeConservacaoRow() As SFRDEstadoDeConservacaoRow
            Return CType(Me.NewRow,SFRDEstadoDeConservacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDEstadoDeConservacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDEstadoDeConservacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDEstadoDeConservacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDEstadoDeConservacaoRowChanged(Me, New SFRDEstadoDeConservacaoRowChangeEvent(CType(e.Row,SFRDEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDEstadoDeConservacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDEstadoDeConservacaoRowChanging(Me, New SFRDEstadoDeConservacaoRowChangeEvent(CType(e.Row,SFRDEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDEstadoDeConservacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDEstadoDeConservacaoRowDeleted(Me, New SFRDEstadoDeConservacaoRowChangeEvent(CType(e.Row,SFRDEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDEstadoDeConservacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDEstadoDeConservacaoRowDeleting(Me, New SFRDEstadoDeConservacaoRowChangeEvent(CType(e.Row,SFRDEstadoDeConservacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDEstadoDeConservacaoRow(ByVal row As SFRDEstadoDeConservacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDEstadoDeConservacaoRow
        Inherits DataRow
        
        Private tableSFRDEstadoDeConservacao As SFRDEstadoDeConservacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDEstadoDeConservacao = CType(Me.Table,SFRDEstadoDeConservacaoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDEstadoDeConservacao.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDEstadoDeConservacao.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTipoEstadoDeConservacao As Long
            Get
                Return CType(Me(Me.tableSFRDEstadoDeConservacao.IDTipoEstadoDeConservacaoColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDEstadoDeConservacao.IDTipoEstadoDeConservacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDEstadoDeConservacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDEstadoDeConservacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDEstadoDeConservacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDEstadoDeConservacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoEstadoDeConservacaoRow As TipoEstadoDeConservacaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoEstadoDeConservacaoSFRDEstadoDeConservacao")),TipoEstadoDeConservacaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoEstadoDeConservacaoSFRDEstadoDeConservacao"))
            End Set
        End Property
        
        Public Property SFRDCondicaoDeAcessoRow As SFRDCondicaoDeAcessoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDEstadoDeConservacao")),SFRDCondicaoDeAcessoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDEstadoDeConservacao"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDEstadoDeConservacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDEstadoDeConservacao.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDEstadoDeConservacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDEstadoDeConservacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDEstadoDeConservacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDEstadoDeConservacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RelacaoTipoNivelRelacionadoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDUpper As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("RelacaoTipoNivelRelacionado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDUpperColumn As DataColumn
            Get
                Return Me.columnIDUpper
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RelacaoTipoNivelRelacionadoRow
            Get
                Return CType(Me.Rows(index),RelacaoTipoNivelRelacionadoRow)
            End Get
        End Property
        
        Public Event RelacaoTipoNivelRelacionadoRowChanged As RelacaoTipoNivelRelacionadoRowChangeEventHandler
        
        Public Event RelacaoTipoNivelRelacionadoRowChanging As RelacaoTipoNivelRelacionadoRowChangeEventHandler
        
        Public Event RelacaoTipoNivelRelacionadoRowDeleted As RelacaoTipoNivelRelacionadoRowChangeEventHandler
        
        Public Event RelacaoTipoNivelRelacionadoRowDeleting As RelacaoTipoNivelRelacionadoRowChangeEventHandler
        
        Public Overloads Sub AddRelacaoTipoNivelRelacionadoRow(ByVal row As RelacaoTipoNivelRelacionadoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRelacaoTipoNivelRelacionadoRow(ByVal parentTipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoTipoNivelRelacionado As TipoNivelRelacionadoRow, ByVal parentTipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper As TipoNivelRelacionadoRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As RelacaoTipoNivelRelacionadoRow
            Dim rowRelacaoTipoNivelRelacionadoRow As RelacaoTipoNivelRelacionadoRow = CType(Me.NewRow,RelacaoTipoNivelRelacionadoRow)
            rowRelacaoTipoNivelRelacionadoRow.ItemArray = New Object() {parentTipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoTipoNivelRelacionado(0), parentTipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper(0), Versao, isDeleted}
            Me.Rows.Add(rowRelacaoTipoNivelRelacionadoRow)
            Return rowRelacaoTipoNivelRelacionadoRow
        End Function
        
        Public Function FindByIDIDUpper(ByVal ID As Long, ByVal IDUpper As Long) As RelacaoTipoNivelRelacionadoRow
            Return CType(Me.Rows.Find(New Object() {ID, IDUpper}),RelacaoTipoNivelRelacionadoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RelacaoTipoNivelRelacionadoDataTable = CType(MyBase.Clone,RelacaoTipoNivelRelacionadoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RelacaoTipoNivelRelacionadoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDUpper = Me.Columns("IDUpper")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDUpper = New DataColumn("IDUpper", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDUpper)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID, Me.columnIDUpper}, true))
            Me.columnID.AllowDBNull = false
            Me.columnIDUpper.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewRelacaoTipoNivelRelacionadoRow() As RelacaoTipoNivelRelacionadoRow
            Return CType(Me.NewRow,RelacaoTipoNivelRelacionadoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RelacaoTipoNivelRelacionadoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RelacaoTipoNivelRelacionadoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RelacaoTipoNivelRelacionadoRowChangedEvent) Is Nothing) Then
                RaiseEvent RelacaoTipoNivelRelacionadoRowChanged(Me, New RelacaoTipoNivelRelacionadoRowChangeEvent(CType(e.Row,RelacaoTipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RelacaoTipoNivelRelacionadoRowChangingEvent) Is Nothing) Then
                RaiseEvent RelacaoTipoNivelRelacionadoRowChanging(Me, New RelacaoTipoNivelRelacionadoRowChangeEvent(CType(e.Row,RelacaoTipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RelacaoTipoNivelRelacionadoRowDeletedEvent) Is Nothing) Then
                RaiseEvent RelacaoTipoNivelRelacionadoRowDeleted(Me, New RelacaoTipoNivelRelacionadoRowChangeEvent(CType(e.Row,RelacaoTipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RelacaoTipoNivelRelacionadoRowDeletingEvent) Is Nothing) Then
                RaiseEvent RelacaoTipoNivelRelacionadoRowDeleting(Me, New RelacaoTipoNivelRelacionadoRowChangeEvent(CType(e.Row,RelacaoTipoNivelRelacionadoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRelacaoTipoNivelRelacionadoRow(ByVal row As RelacaoTipoNivelRelacionadoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RelacaoTipoNivelRelacionadoRow
        Inherits DataRow
        
        Private tableRelacaoTipoNivelRelacionado As RelacaoTipoNivelRelacionadoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRelacaoTipoNivelRelacionado = CType(Me.Table,RelacaoTipoNivelRelacionadoDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableRelacaoTipoNivelRelacionado.IDColumn),Long)
            End Get
            Set
                Me(Me.tableRelacaoTipoNivelRelacionado.IDColumn) = value
            End Set
        End Property
        
        Public Property IDUpper As Long
            Get
                Return CType(Me(Me.tableRelacaoTipoNivelRelacionado.IDUpperColumn),Long)
            End Get
            Set
                Me(Me.tableRelacaoTipoNivelRelacionado.IDUpperColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoTipoNivelRelacionado.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoTipoNivelRelacionado.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableRelacaoTipoNivelRelacionado.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableRelacaoTipoNivelRelacionado.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper As TipoNivelRelacionadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper")),TipoNivelRelacionadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNivelRelacionadoRelacaoTipoNivelRelacionadoUpper"))
            End Set
        End Property
        
        Public Property TipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoTipoNivelRelacionado As TipoNivelRelacionadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNivelRelacionadoRelacaoTipoNivelRelacionado")),TipoNivelRelacionadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNivelRelacionadoRelacaoTipoNivelRelacionado"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoTipoNivelRelacionado.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableRelacaoTipoNivelRelacionado.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RelacaoTipoNivelRelacionadoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RelacaoTipoNivelRelacionadoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RelacaoTipoNivelRelacionadoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RelacaoTipoNivelRelacionadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDFormaSuporteAcondDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTipoFormaSuporteAcond As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDFormaSuporteAcond")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoFormaSuporteAcondColumn As DataColumn
            Get
                Return Me.columnIDTipoFormaSuporteAcond
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDFormaSuporteAcondRow
            Get
                Return CType(Me.Rows(index),SFRDFormaSuporteAcondRow)
            End Get
        End Property
        
        Public Event SFRDFormaSuporteAcondRowChanged As SFRDFormaSuporteAcondRowChangeEventHandler
        
        Public Event SFRDFormaSuporteAcondRowChanging As SFRDFormaSuporteAcondRowChangeEventHandler
        
        Public Event SFRDFormaSuporteAcondRowDeleted As SFRDFormaSuporteAcondRowChangeEventHandler
        
        Public Event SFRDFormaSuporteAcondRowDeleting As SFRDFormaSuporteAcondRowChangeEventHandler
        
        Public Overloads Sub AddSFRDFormaSuporteAcondRow(ByVal row As SFRDFormaSuporteAcondRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDFormaSuporteAcondRow(ByVal parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDFormaSuporteAcond As SFRDCondicaoDeAcessoRow, ByVal parentTipoFormaSuporteAcondRowByTipoFormaSuporteAcondSFRDFormaSuporteAcond As TipoFormaSuporteAcondRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDFormaSuporteAcondRow
            Dim rowSFRDFormaSuporteAcondRow As SFRDFormaSuporteAcondRow = CType(Me.NewRow,SFRDFormaSuporteAcondRow)
            rowSFRDFormaSuporteAcondRow.ItemArray = New Object() {parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDFormaSuporteAcond(0), parentTipoFormaSuporteAcondRowByTipoFormaSuporteAcondSFRDFormaSuporteAcond(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDFormaSuporteAcondRow)
            Return rowSFRDFormaSuporteAcondRow
        End Function
        
        Public Function FindByIDFRDBaseIDTipoFormaSuporteAcond(ByVal IDFRDBase As Long, ByVal IDTipoFormaSuporteAcond As Long) As SFRDFormaSuporteAcondRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDTipoFormaSuporteAcond}),SFRDFormaSuporteAcondRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDFormaSuporteAcondDataTable = CType(MyBase.Clone,SFRDFormaSuporteAcondDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDFormaSuporteAcondDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTipoFormaSuporteAcond = Me.Columns("IDTipoFormaSuporteAcond")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTipoFormaSuporteAcond = New DataColumn("IDTipoFormaSuporteAcond", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoFormaSuporteAcond)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDTipoFormaSuporteAcond}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDTipoFormaSuporteAcond.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDFormaSuporteAcondRow() As SFRDFormaSuporteAcondRow
            Return CType(Me.NewRow,SFRDFormaSuporteAcondRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDFormaSuporteAcondRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDFormaSuporteAcondRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDFormaSuporteAcondRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDFormaSuporteAcondRowChanged(Me, New SFRDFormaSuporteAcondRowChangeEvent(CType(e.Row,SFRDFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDFormaSuporteAcondRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDFormaSuporteAcondRowChanging(Me, New SFRDFormaSuporteAcondRowChangeEvent(CType(e.Row,SFRDFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDFormaSuporteAcondRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDFormaSuporteAcondRowDeleted(Me, New SFRDFormaSuporteAcondRowChangeEvent(CType(e.Row,SFRDFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDFormaSuporteAcondRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDFormaSuporteAcondRowDeleting(Me, New SFRDFormaSuporteAcondRowChangeEvent(CType(e.Row,SFRDFormaSuporteAcondRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDFormaSuporteAcondRow(ByVal row As SFRDFormaSuporteAcondRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDFormaSuporteAcondRow
        Inherits DataRow
        
        Private tableSFRDFormaSuporteAcond As SFRDFormaSuporteAcondDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDFormaSuporteAcond = CType(Me.Table,SFRDFormaSuporteAcondDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDFormaSuporteAcond.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDFormaSuporteAcond.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTipoFormaSuporteAcond As Long
            Get
                Return CType(Me(Me.tableSFRDFormaSuporteAcond.IDTipoFormaSuporteAcondColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDFormaSuporteAcond.IDTipoFormaSuporteAcondColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDFormaSuporteAcond.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDFormaSuporteAcond.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDFormaSuporteAcond.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDFormaSuporteAcond.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property SFRDCondicaoDeAcessoRow As SFRDCondicaoDeAcessoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDFormaSuporteAcond")),SFRDCondicaoDeAcessoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDFormaSuporteAcond"))
            End Set
        End Property
        
        Public Property TipoFormaSuporteAcondRow As TipoFormaSuporteAcondRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoFormaSuporteAcondSFRDFormaSuporteAcond")),TipoFormaSuporteAcondRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoFormaSuporteAcondSFRDFormaSuporteAcond"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDFormaSuporteAcond.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDFormaSuporteAcond.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDFormaSuporteAcondRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDFormaSuporteAcondRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDFormaSuporteAcondRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDFormaSuporteAcondRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoPertinenciaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnDesignacao As DataColumn
        
        Private columnPonderacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("TipoPertinencia")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property DesignacaoColumn As DataColumn
            Get
                Return Me.columnDesignacao
            End Get
        End Property
        
        Friend ReadOnly Property PonderacaoColumn As DataColumn
            Get
                Return Me.columnPonderacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoPertinenciaRow
            Get
                Return CType(Me.Rows(index),TipoPertinenciaRow)
            End Get
        End Property
        
        Public Event TipoPertinenciaRowChanged As TipoPertinenciaRowChangeEventHandler
        
        Public Event TipoPertinenciaRowChanging As TipoPertinenciaRowChangeEventHandler
        
        Public Event TipoPertinenciaRowDeleted As TipoPertinenciaRowChangeEventHandler
        
        Public Event TipoPertinenciaRowDeleting As TipoPertinenciaRowChangeEventHandler
        
        Public Overloads Sub AddTipoPertinenciaRow(ByVal row As TipoPertinenciaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTipoPertinenciaRow(ByVal Designacao As String, ByVal Ponderacao As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As TipoPertinenciaRow
            Dim rowTipoPertinenciaRow As TipoPertinenciaRow = CType(Me.NewRow,TipoPertinenciaRow)
            rowTipoPertinenciaRow.ItemArray = New Object() {Nothing, Designacao, Ponderacao, Versao, isDeleted}
            Me.Rows.Add(rowTipoPertinenciaRow)
            Return rowTipoPertinenciaRow
        End Function
        
        Public Function FindByID(ByVal ID As Long) As TipoPertinenciaRow
            Return CType(Me.Rows.Find(New Object() {ID}),TipoPertinenciaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TipoPertinenciaDataTable = CType(MyBase.Clone,TipoPertinenciaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TipoPertinenciaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnDesignacao = Me.Columns("Designacao")
            Me.columnPonderacao = Me.Columns("Ponderacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnDesignacao = New DataColumn("Designacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignacao)
            Me.columnPonderacao = New DataColumn("Ponderacao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPonderacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnDesignacao.AllowDBNull = false
            Me.columnDesignacao.MaxLength = 50
            Me.columnPonderacao.AllowDBNull = false
            Me.columnPonderacao.MaxLength = 50
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewTipoPertinenciaRow() As TipoPertinenciaRow
            Return CType(Me.NewRow,TipoPertinenciaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TipoPertinenciaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoPertinenciaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoPertinenciaRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoPertinenciaRowChanged(Me, New TipoPertinenciaRowChangeEvent(CType(e.Row,TipoPertinenciaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoPertinenciaRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoPertinenciaRowChanging(Me, New TipoPertinenciaRowChangeEvent(CType(e.Row,TipoPertinenciaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoPertinenciaRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoPertinenciaRowDeleted(Me, New TipoPertinenciaRowChangeEvent(CType(e.Row,TipoPertinenciaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoPertinenciaRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoPertinenciaRowDeleting(Me, New TipoPertinenciaRowChangeEvent(CType(e.Row,TipoPertinenciaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTipoPertinenciaRow(ByVal row As TipoPertinenciaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoPertinenciaRow
        Inherits DataRow
        
        Private tableTipoPertinencia As TipoPertinenciaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoPertinencia = CType(Me.Table,TipoPertinenciaDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableTipoPertinencia.IDColumn),Long)
            End Get
            Set
                Me(Me.tableTipoPertinencia.IDColumn) = value
            End Set
        End Property
        
        Public Property Designacao As String
            Get
                Return CType(Me(Me.tableTipoPertinencia.DesignacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoPertinencia.DesignacaoColumn) = value
            End Set
        End Property
        
        Public Property Ponderacao As String
            Get
                Return CType(Me(Me.tableTipoPertinencia.PonderacaoColumn),String)
            End Get
            Set
                Me(Me.tableTipoPertinencia.PonderacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTipoPertinencia.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTipoPertinencia.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableTipoPertinencia.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTipoPertinencia.isDeletedColumn) = value
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableTipoPertinencia.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableTipoPertinencia.VersaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSFRDAvaliacaoRows() As SFRDAvaliacaoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("TipoPertinenciaSFRDAvaliacao")),SFRDAvaliacaoRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TipoPertinenciaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TipoPertinenciaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TipoPertinenciaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TipoPertinenciaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDTecnicasDeRegistoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTipoTecnicasDeRegisto As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDTecnicasDeRegisto")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoTecnicasDeRegistoColumn As DataColumn
            Get
                Return Me.columnIDTipoTecnicasDeRegisto
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDTecnicasDeRegistoRow
            Get
                Return CType(Me.Rows(index),SFRDTecnicasDeRegistoRow)
            End Get
        End Property
        
        Public Event SFRDTecnicasDeRegistoRowChanged As SFRDTecnicasDeRegistoRowChangeEventHandler
        
        Public Event SFRDTecnicasDeRegistoRowChanging As SFRDTecnicasDeRegistoRowChangeEventHandler
        
        Public Event SFRDTecnicasDeRegistoRowDeleted As SFRDTecnicasDeRegistoRowChangeEventHandler
        
        Public Event SFRDTecnicasDeRegistoRowDeleting As SFRDTecnicasDeRegistoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDTecnicasDeRegistoRow(ByVal row As SFRDTecnicasDeRegistoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDTecnicasDeRegistoRow(ByVal parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDTecnicasDeRegisto As SFRDCondicaoDeAcessoRow, ByVal parentTipoTecnicasDeRegistoRowByTipoTecnicasDeRegistoSFRDTecnicasDeRegisto As TipoTecnicasDeRegistoRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDTecnicasDeRegistoRow
            Dim rowSFRDTecnicasDeRegistoRow As SFRDTecnicasDeRegistoRow = CType(Me.NewRow,SFRDTecnicasDeRegistoRow)
            rowSFRDTecnicasDeRegistoRow.ItemArray = New Object() {parentSFRDCondicaoDeAcessoRowBySFRDCondicaoDeAcessoSFRDTecnicasDeRegisto(0), parentTipoTecnicasDeRegistoRowByTipoTecnicasDeRegistoSFRDTecnicasDeRegisto(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDTecnicasDeRegistoRow)
            Return rowSFRDTecnicasDeRegistoRow
        End Function
        
        Public Function FindByIDFRDBaseIDTipoTecnicasDeRegisto(ByVal IDFRDBase As Long, ByVal IDTipoTecnicasDeRegisto As Long) As SFRDTecnicasDeRegistoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDTipoTecnicasDeRegisto}),SFRDTecnicasDeRegistoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDTecnicasDeRegistoDataTable = CType(MyBase.Clone,SFRDTecnicasDeRegistoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDTecnicasDeRegistoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTipoTecnicasDeRegisto = Me.Columns("IDTipoTecnicasDeRegisto")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTipoTecnicasDeRegisto = New DataColumn("IDTipoTecnicasDeRegisto", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoTecnicasDeRegisto)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDTipoTecnicasDeRegisto}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDTipoTecnicasDeRegisto.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDTecnicasDeRegistoRow() As SFRDTecnicasDeRegistoRow
            Return CType(Me.NewRow,SFRDTecnicasDeRegistoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDTecnicasDeRegistoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDTecnicasDeRegistoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDTecnicasDeRegistoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDTecnicasDeRegistoRowChanged(Me, New SFRDTecnicasDeRegistoRowChangeEvent(CType(e.Row,SFRDTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDTecnicasDeRegistoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDTecnicasDeRegistoRowChanging(Me, New SFRDTecnicasDeRegistoRowChangeEvent(CType(e.Row,SFRDTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDTecnicasDeRegistoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDTecnicasDeRegistoRowDeleted(Me, New SFRDTecnicasDeRegistoRowChangeEvent(CType(e.Row,SFRDTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDTecnicasDeRegistoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDTecnicasDeRegistoRowDeleting(Me, New SFRDTecnicasDeRegistoRowChangeEvent(CType(e.Row,SFRDTecnicasDeRegistoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDTecnicasDeRegistoRow(ByVal row As SFRDTecnicasDeRegistoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDTecnicasDeRegistoRow
        Inherits DataRow
        
        Private tableSFRDTecnicasDeRegisto As SFRDTecnicasDeRegistoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDTecnicasDeRegisto = CType(Me.Table,SFRDTecnicasDeRegistoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDTecnicasDeRegisto.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDTecnicasDeRegisto.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTipoTecnicasDeRegisto As Long
            Get
                Return CType(Me(Me.tableSFRDTecnicasDeRegisto.IDTipoTecnicasDeRegistoColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDTecnicasDeRegisto.IDTipoTecnicasDeRegistoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDTecnicasDeRegisto.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDTecnicasDeRegisto.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDTecnicasDeRegisto.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDTecnicasDeRegisto.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoTecnicasDeRegistoRow As TipoTecnicasDeRegistoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoTecnicasDeRegistoSFRDTecnicasDeRegisto")),TipoTecnicasDeRegistoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoTecnicasDeRegistoSFRDTecnicasDeRegisto"))
            End Set
        End Property
        
        Public Property SFRDCondicaoDeAcessoRow As SFRDCondicaoDeAcessoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDTecnicasDeRegisto")),SFRDCondicaoDeAcessoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDCondicaoDeAcessoSFRDTecnicasDeRegisto"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDTecnicasDeRegisto.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDTecnicasDeRegisto.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDTecnicasDeRegistoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDTecnicasDeRegistoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDTecnicasDeRegistoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDTecnicasDeRegistoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFAutoEliminacaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDAutoEliminacao As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDUFAutoEliminacao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDAutoEliminacaoColumn As DataColumn
            Get
                Return Me.columnIDAutoEliminacao
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDUFAutoEliminacaoRow
            Get
                Return CType(Me.Rows(index),SFRDUFAutoEliminacaoRow)
            End Get
        End Property
        
        Public Event SFRDUFAutoEliminacaoRowChanged As SFRDUFAutoEliminacaoRowChangeEventHandler
        
        Public Event SFRDUFAutoEliminacaoRowChanging As SFRDUFAutoEliminacaoRowChangeEventHandler
        
        Public Event SFRDUFAutoEliminacaoRowDeleted As SFRDUFAutoEliminacaoRowChangeEventHandler
        
        Public Event SFRDUFAutoEliminacaoRowDeleting As SFRDUFAutoEliminacaoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDUFAutoEliminacaoRow(ByVal row As SFRDUFAutoEliminacaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDUFAutoEliminacaoRow(ByVal parentFRDBaseRowByFRDBaseSFRDUFAutoEliminacao As FRDBaseRow, ByVal parentAutoEliminacaoRowByAutoEliminacaoSFRDUFAutoEliminacao As AutoEliminacaoRow, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDUFAutoEliminacaoRow
            Dim rowSFRDUFAutoEliminacaoRow As SFRDUFAutoEliminacaoRow = CType(Me.NewRow,SFRDUFAutoEliminacaoRow)
            rowSFRDUFAutoEliminacaoRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDUFAutoEliminacao(0), parentAutoEliminacaoRowByAutoEliminacaoSFRDUFAutoEliminacao(0), Versao, isDeleted}
            Me.Rows.Add(rowSFRDUFAutoEliminacaoRow)
            Return rowSFRDUFAutoEliminacaoRow
        End Function
        
        Public Function FindByIDFRDBaseIDAutoEliminacao(ByVal IDFRDBase As Long, ByVal IDAutoEliminacao As Long) As SFRDUFAutoEliminacaoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDAutoEliminacao}),SFRDUFAutoEliminacaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDUFAutoEliminacaoDataTable = CType(MyBase.Clone,SFRDUFAutoEliminacaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDUFAutoEliminacaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDAutoEliminacao = Me.Columns("IDAutoEliminacao")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDAutoEliminacao = New DataColumn("IDAutoEliminacao", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDAutoEliminacao)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDAutoEliminacao}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDAutoEliminacao.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDUFAutoEliminacaoRow() As SFRDUFAutoEliminacaoRow
            Return CType(Me.NewRow,SFRDUFAutoEliminacaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDUFAutoEliminacaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDUFAutoEliminacaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDUFAutoEliminacaoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDUFAutoEliminacaoRowChanged(Me, New SFRDUFAutoEliminacaoRowChangeEvent(CType(e.Row,SFRDUFAutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDUFAutoEliminacaoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDUFAutoEliminacaoRowChanging(Me, New SFRDUFAutoEliminacaoRowChangeEvent(CType(e.Row,SFRDUFAutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDUFAutoEliminacaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDUFAutoEliminacaoRowDeleted(Me, New SFRDUFAutoEliminacaoRowChangeEvent(CType(e.Row,SFRDUFAutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDUFAutoEliminacaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDUFAutoEliminacaoRowDeleting(Me, New SFRDUFAutoEliminacaoRowChangeEvent(CType(e.Row,SFRDUFAutoEliminacaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDUFAutoEliminacaoRow(ByVal row As SFRDUFAutoEliminacaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFAutoEliminacaoRow
        Inherits DataRow
        
        Private tableSFRDUFAutoEliminacao As SFRDUFAutoEliminacaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDUFAutoEliminacao = CType(Me.Table,SFRDUFAutoEliminacaoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDUFAutoEliminacao.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFAutoEliminacao.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDAutoEliminacao As Long
            Get
                Return CType(Me(Me.tableSFRDUFAutoEliminacao.IDAutoEliminacaoColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDUFAutoEliminacao.IDAutoEliminacaoColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDUFAutoEliminacao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDUFAutoEliminacao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDUFAutoEliminacao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDUFAutoEliminacao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property AutoEliminacaoRow As AutoEliminacaoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AutoEliminacaoSFRDUFAutoEliminacao")),AutoEliminacaoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AutoEliminacaoSFRDUFAutoEliminacao"))
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDUFAutoEliminacao")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDUFAutoEliminacao"))
            End Set
        End Property
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDUFAutoEliminacao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDUFAutoEliminacao.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDUFAutoEliminacaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDUFAutoEliminacaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDUFAutoEliminacaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDUFAutoEliminacaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDImagemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnidx As DataColumn
        
        Private columnGUIOrder As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnDescricao As DataColumn
        
        Private columnIDSFDImagemVolume As DataColumn
        
        Private columnIdentificador As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDImagem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property idxColumn As DataColumn
            Get
                Return Me.columnidx
            End Get
        End Property
        
        Friend ReadOnly Property GUIOrderColumn As DataColumn
            Get
                Return Me.columnGUIOrder
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property DescricaoColumn As DataColumn
            Get
                Return Me.columnDescricao
            End Get
        End Property
        
        Friend ReadOnly Property IDSFDImagemVolumeColumn As DataColumn
            Get
                Return Me.columnIDSFDImagemVolume
            End Get
        End Property
        
        Friend ReadOnly Property IdentificadorColumn As DataColumn
            Get
                Return Me.columnIdentificador
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDImagemRow
            Get
                Return CType(Me.Rows(index),SFRDImagemRow)
            End Get
        End Property
        
        Public Event SFRDImagemRowChanged As SFRDImagemRowChangeEventHandler
        
        Public Event SFRDImagemRowChanging As SFRDImagemRowChangeEventHandler
        
        Public Event SFRDImagemRowDeleted As SFRDImagemRowChangeEventHandler
        
        Public Event SFRDImagemRowDeleting As SFRDImagemRowChangeEventHandler
        
        Public Overloads Sub AddSFRDImagemRow(ByVal row As SFRDImagemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDImagemRow(ByVal parentFRDBaseRowByFRDBaseSFRDImagem As FRDBaseRow, ByVal GUIOrder As Long, ByVal Tipo As String, ByVal Descricao As String, ByVal parentSFRDImagemVolumeRowBySFRDImagemVolumeSFRDImagem As SFRDImagemVolumeRow, ByVal Identificador As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDImagemRow
            Dim rowSFRDImagemRow As SFRDImagemRow = CType(Me.NewRow,SFRDImagemRow)
            rowSFRDImagemRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDImagem(0), Nothing, GUIOrder, Tipo, Descricao, parentSFRDImagemVolumeRowBySFRDImagemVolumeSFRDImagem(0), Identificador, Versao, isDeleted}
            Me.Rows.Add(rowSFRDImagemRow)
            Return rowSFRDImagemRow
        End Function
        
        Public Function FindByIDFRDBaseidx(ByVal IDFRDBase As Long, ByVal idx As Long) As SFRDImagemRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, idx}),SFRDImagemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDImagemDataTable = CType(MyBase.Clone,SFRDImagemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDImagemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnidx = Me.Columns("idx")
            Me.columnGUIOrder = Me.Columns("GUIOrder")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnDescricao = Me.Columns("Descricao")
            Me.columnIDSFDImagemVolume = Me.Columns("IDSFDImagemVolume")
            Me.columnIdentificador = Me.Columns("Identificador")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnidx = New DataColumn("idx", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnidx)
            Me.columnGUIOrder = New DataColumn("GUIOrder", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUIOrder)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnDescricao = New DataColumn("Descricao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescricao)
            Me.columnIDSFDImagemVolume = New DataColumn("IDSFDImagemVolume", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDSFDImagemVolume)
            Me.columnIdentificador = New DataColumn("Identificador", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdentificador)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnidx}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnidx.AutoIncrement = true
            Me.columnidx.AllowDBNull = false
            Me.columnidx.ReadOnly = true
            Me.columnGUIOrder.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnTipo.MaxLength = 10
            Me.columnDescricao.MaxLength = 1073741823
            Me.columnIDSFDImagemVolume.AllowDBNull = false
            Me.columnIdentificador.AllowDBNull = false
            Me.columnIdentificador.MaxLength = 1073741823
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDImagemRow() As SFRDImagemRow
            Return CType(Me.NewRow,SFRDImagemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDImagemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDImagemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDImagemRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDImagemRowChanged(Me, New SFRDImagemRowChangeEvent(CType(e.Row,SFRDImagemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDImagemRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDImagemRowChanging(Me, New SFRDImagemRowChangeEvent(CType(e.Row,SFRDImagemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDImagemRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDImagemRowDeleted(Me, New SFRDImagemRowChangeEvent(CType(e.Row,SFRDImagemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDImagemRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDImagemRowDeleting(Me, New SFRDImagemRowChangeEvent(CType(e.Row,SFRDImagemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDImagemRow(ByVal row As SFRDImagemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDImagemRow
        Inherits DataRow
        
        Private tableSFRDImagem As SFRDImagemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDImagem = CType(Me.Table,SFRDImagemDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDImagem.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDImagem.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property idx As Long
            Get
                Return CType(Me(Me.tableSFRDImagem.idxColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDImagem.idxColumn) = value
            End Set
        End Property
        
        Public Property GUIOrder As Long
            Get
                Return CType(Me(Me.tableSFRDImagem.GUIOrderColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDImagem.GUIOrderColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableSFRDImagem.TipoColumn),String)
            End Get
            Set
                Me(Me.tableSFRDImagem.TipoColumn) = value
            End Set
        End Property
        
        Public Property Descricao As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDImagem.DescricaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDImagem.DescricaoColumn) = value
            End Set
        End Property
        
        Public Property IDSFDImagemVolume As Long
            Get
                Return CType(Me(Me.tableSFRDImagem.IDSFDImagemVolumeColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDImagem.IDSFDImagemVolumeColumn) = value
            End Set
        End Property
        
        Public Property Identificador As String
            Get
                Return CType(Me(Me.tableSFRDImagem.IdentificadorColumn),String)
            End Get
            Set
                Me(Me.tableSFRDImagem.IdentificadorColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDImagem.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDImagem.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDImagem.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDImagem.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDImagem")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDImagem"))
            End Set
        End Property
        
        Public Property SFRDImagemVolumeRow As SFRDImagemVolumeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SFRDImagemVolumeSFRDImagem")),SFRDImagemVolumeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SFRDImagemVolumeSFRDImagem"))
            End Set
        End Property
        
        Public Function IsDescricaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDImagem.DescricaoColumn)
        End Function
        
        Public Sub SetDescricaoNull()
            Me(Me.tableSFRDImagem.DescricaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDImagem.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDImagem.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDImagemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDImagemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDImagemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDImagemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDatasExistenciaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDControloAut As DataColumn
        
        Private columnDescDatasExistencia As DataColumn
        
        Private columnInicioAno As DataColumn
        
        Private columnInicioMes As DataColumn
        
        Private columnInicioDia As DataColumn
        
        Private columnInicioAtribuida As DataColumn
        
        Private columnFimAno As DataColumn
        
        Private columnFimMes As DataColumn
        
        Private columnFimDia As DataColumn
        
        Private columnFimAtribuida As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("ControloAutDatasExistencia")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDControloAutColumn As DataColumn
            Get
                Return Me.columnIDControloAut
            End Get
        End Property
        
        Friend ReadOnly Property DescDatasExistenciaColumn As DataColumn
            Get
                Return Me.columnDescDatasExistencia
            End Get
        End Property
        
        Friend ReadOnly Property InicioAnoColumn As DataColumn
            Get
                Return Me.columnInicioAno
            End Get
        End Property
        
        Friend ReadOnly Property InicioMesColumn As DataColumn
            Get
                Return Me.columnInicioMes
            End Get
        End Property
        
        Friend ReadOnly Property InicioDiaColumn As DataColumn
            Get
                Return Me.columnInicioDia
            End Get
        End Property
        
        Friend ReadOnly Property InicioAtribuidaColumn As DataColumn
            Get
                Return Me.columnInicioAtribuida
            End Get
        End Property
        
        Friend ReadOnly Property FimAnoColumn As DataColumn
            Get
                Return Me.columnFimAno
            End Get
        End Property
        
        Friend ReadOnly Property FimMesColumn As DataColumn
            Get
                Return Me.columnFimMes
            End Get
        End Property
        
        Friend ReadOnly Property FimDiaColumn As DataColumn
            Get
                Return Me.columnFimDia
            End Get
        End Property
        
        Friend ReadOnly Property FimAtribuidaColumn As DataColumn
            Get
                Return Me.columnFimAtribuida
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ControloAutDatasExistenciaRow
            Get
                Return CType(Me.Rows(index),ControloAutDatasExistenciaRow)
            End Get
        End Property
        
        Public Event ControloAutDatasExistenciaRowChanged As ControloAutDatasExistenciaRowChangeEventHandler
        
        Public Event ControloAutDatasExistenciaRowChanging As ControloAutDatasExistenciaRowChangeEventHandler
        
        Public Event ControloAutDatasExistenciaRowDeleted As ControloAutDatasExistenciaRowChangeEventHandler
        
        Public Event ControloAutDatasExistenciaRowDeleting As ControloAutDatasExistenciaRowChangeEventHandler
        
        Public Overloads Sub AddControloAutDatasExistenciaRow(ByVal row As ControloAutDatasExistenciaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddControloAutDatasExistenciaRow(ByVal parentControloAutRowByControloAutControloAutDatasExistencia As ControloAutRow, ByVal DescDatasExistencia As String, ByVal InicioAno As String, ByVal InicioMes As String, ByVal InicioDia As String, ByVal InicioAtribuida As Boolean, ByVal FimAno As String, ByVal FimMes As String, ByVal FimDia As String, ByVal FimAtribuida As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As ControloAutDatasExistenciaRow
            Dim rowControloAutDatasExistenciaRow As ControloAutDatasExistenciaRow = CType(Me.NewRow,ControloAutDatasExistenciaRow)
            rowControloAutDatasExistenciaRow.ItemArray = New Object() {parentControloAutRowByControloAutControloAutDatasExistencia(0), DescDatasExistencia, InicioAno, InicioMes, InicioDia, InicioAtribuida, FimAno, FimMes, FimDia, FimAtribuida, Versao, isDeleted}
            Me.Rows.Add(rowControloAutDatasExistenciaRow)
            Return rowControloAutDatasExistenciaRow
        End Function
        
        Public Function FindByIDControloAut(ByVal IDControloAut As Long) As ControloAutDatasExistenciaRow
            Return CType(Me.Rows.Find(New Object() {IDControloAut}),ControloAutDatasExistenciaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ControloAutDatasExistenciaDataTable = CType(MyBase.Clone,ControloAutDatasExistenciaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ControloAutDatasExistenciaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDControloAut = Me.Columns("IDControloAut")
            Me.columnDescDatasExistencia = Me.Columns("DescDatasExistencia")
            Me.columnInicioAno = Me.Columns("InicioAno")
            Me.columnInicioMes = Me.Columns("InicioMes")
            Me.columnInicioDia = Me.Columns("InicioDia")
            Me.columnInicioAtribuida = Me.Columns("InicioAtribuida")
            Me.columnFimAno = Me.Columns("FimAno")
            Me.columnFimMes = Me.Columns("FimMes")
            Me.columnFimDia = Me.Columns("FimDia")
            Me.columnFimAtribuida = Me.Columns("FimAtribuida")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDControloAut = New DataColumn("IDControloAut", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDControloAut)
            Me.columnDescDatasExistencia = New DataColumn("DescDatasExistencia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescDatasExistencia)
            Me.columnInicioAno = New DataColumn("InicioAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioAno)
            Me.columnInicioMes = New DataColumn("InicioMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioMes)
            Me.columnInicioDia = New DataColumn("InicioDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioDia)
            Me.columnInicioAtribuida = New DataColumn("InicioAtribuida", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioAtribuida)
            Me.columnFimAno = New DataColumn("FimAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimAno)
            Me.columnFimMes = New DataColumn("FimMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimMes)
            Me.columnFimDia = New DataColumn("FimDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimDia)
            Me.columnFimAtribuida = New DataColumn("FimAtribuida", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimAtribuida)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDControloAut}, true))
            Me.columnIDControloAut.AllowDBNull = false
            Me.columnIDControloAut.Unique = true
            Me.columnDescDatasExistencia.MaxLength = 1073741823
            Me.columnInicioAno.MaxLength = 4
            Me.columnInicioMes.MaxLength = 2
            Me.columnInicioDia.MaxLength = 2
            Me.columnInicioAtribuida.AllowDBNull = false
            Me.columnFimAno.MaxLength = 4
            Me.columnFimMes.MaxLength = 2
            Me.columnFimDia.MaxLength = 2
            Me.columnFimAtribuida.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewControloAutDatasExistenciaRow() As ControloAutDatasExistenciaRow
            Return CType(Me.NewRow,ControloAutDatasExistenciaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ControloAutDatasExistenciaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ControloAutDatasExistenciaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ControloAutDatasExistenciaRowChangedEvent) Is Nothing) Then
                RaiseEvent ControloAutDatasExistenciaRowChanged(Me, New ControloAutDatasExistenciaRowChangeEvent(CType(e.Row,ControloAutDatasExistenciaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ControloAutDatasExistenciaRowChangingEvent) Is Nothing) Then
                RaiseEvent ControloAutDatasExistenciaRowChanging(Me, New ControloAutDatasExistenciaRowChangeEvent(CType(e.Row,ControloAutDatasExistenciaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ControloAutDatasExistenciaRowDeletedEvent) Is Nothing) Then
                RaiseEvent ControloAutDatasExistenciaRowDeleted(Me, New ControloAutDatasExistenciaRowChangeEvent(CType(e.Row,ControloAutDatasExistenciaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ControloAutDatasExistenciaRowDeletingEvent) Is Nothing) Then
                RaiseEvent ControloAutDatasExistenciaRowDeleting(Me, New ControloAutDatasExistenciaRowChangeEvent(CType(e.Row,ControloAutDatasExistenciaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveControloAutDatasExistenciaRow(ByVal row As ControloAutDatasExistenciaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDatasExistenciaRow
        Inherits DataRow
        
        Private tableControloAutDatasExistencia As ControloAutDatasExistenciaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableControloAutDatasExistencia = CType(Me.Table,ControloAutDatasExistenciaDataTable)
        End Sub
        
        Public Property IDControloAut As Long
            Get
                Return CType(Me(Me.tableControloAutDatasExistencia.IDControloAutColumn),Long)
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.IDControloAutColumn) = value
            End Set
        End Property
        
        Public Property DescDatasExistencia As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.DescDatasExistenciaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.DescDatasExistenciaColumn) = value
            End Set
        End Property
        
        Public Property InicioAno As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.InicioAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.InicioAnoColumn) = value
            End Set
        End Property
        
        Public Property InicioMes As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.InicioMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.InicioMesColumn) = value
            End Set
        End Property
        
        Public Property InicioDia As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.InicioDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.InicioDiaColumn) = value
            End Set
        End Property
        
        Public Property InicioAtribuida As Boolean
            Get
                Return CType(Me(Me.tableControloAutDatasExistencia.InicioAtribuidaColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.InicioAtribuidaColumn) = value
            End Set
        End Property
        
        Public Property FimAno As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.FimAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.FimAnoColumn) = value
            End Set
        End Property
        
        Public Property FimMes As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.FimMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.FimMesColumn) = value
            End Set
        End Property
        
        Public Property FimDia As String
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.FimDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.FimDiaColumn) = value
            End Set
        End Property
        
        Public Property FimAtribuida As Boolean
            Get
                Return CType(Me(Me.tableControloAutDatasExistencia.FimAtribuidaColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.FimAtribuidaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableControloAutDatasExistencia.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableControloAutDatasExistencia.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableControloAutDatasExistencia.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property ControloAutRow As ControloAutRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControloAutControloAutDatasExistencia")),ControloAutRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControloAutControloAutDatasExistencia"))
            End Set
        End Property
        
        Public Function IsDescDatasExistenciaNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.DescDatasExistenciaColumn)
        End Function
        
        Public Sub SetDescDatasExistenciaNull()
            Me(Me.tableControloAutDatasExistencia.DescDatasExistenciaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioAnoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.InicioAnoColumn)
        End Function
        
        Public Sub SetInicioAnoNull()
            Me(Me.tableControloAutDatasExistencia.InicioAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioMesNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.InicioMesColumn)
        End Function
        
        Public Sub SetInicioMesNull()
            Me(Me.tableControloAutDatasExistencia.InicioMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioDiaNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.InicioDiaColumn)
        End Function
        
        Public Sub SetInicioDiaNull()
            Me(Me.tableControloAutDatasExistencia.InicioDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimAnoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.FimAnoColumn)
        End Function
        
        Public Sub SetFimAnoNull()
            Me(Me.tableControloAutDatasExistencia.FimAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimMesNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.FimMesColumn)
        End Function
        
        Public Sub SetFimMesNull()
            Me(Me.tableControloAutDatasExistencia.FimMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimDiaNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.FimDiaColumn)
        End Function
        
        Public Sub SetFimDiaNull()
            Me(Me.tableControloAutDatasExistencia.FimDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableControloAutDatasExistencia.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableControloAutDatasExistencia.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ControloAutDatasExistenciaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ControloAutDatasExistenciaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ControloAutDatasExistenciaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ControloAutDatasExistenciaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FRDBaseDataDeDescricaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnIDTrusteeOperator As DataColumn
        
        Private columnIDTrusteeAuthority As DataColumn
        
        Private columnDataEdicao As DataColumn
        
        Private columnDataAutoria As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("FRDBaseDataDeDescricao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property IDTrusteeOperatorColumn As DataColumn
            Get
                Return Me.columnIDTrusteeOperator
            End Get
        End Property
        
        Friend ReadOnly Property IDTrusteeAuthorityColumn As DataColumn
            Get
                Return Me.columnIDTrusteeAuthority
            End Get
        End Property
        
        Friend ReadOnly Property DataEdicaoColumn As DataColumn
            Get
                Return Me.columnDataEdicao
            End Get
        End Property
        
        Friend ReadOnly Property DataAutoriaColumn As DataColumn
            Get
                Return Me.columnDataAutoria
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FRDBaseDataDeDescricaoRow
            Get
                Return CType(Me.Rows(index),FRDBaseDataDeDescricaoRow)
            End Get
        End Property
        
        Public Event FRDBaseDataDeDescricaoRowChanged As FRDBaseDataDeDescricaoRowChangeEventHandler
        
        Public Event FRDBaseDataDeDescricaoRowChanging As FRDBaseDataDeDescricaoRowChangeEventHandler
        
        Public Event FRDBaseDataDeDescricaoRowDeleted As FRDBaseDataDeDescricaoRowChangeEventHandler
        
        Public Event FRDBaseDataDeDescricaoRowDeleting As FRDBaseDataDeDescricaoRowChangeEventHandler
        
        Public Overloads Sub AddFRDBaseDataDeDescricaoRow(ByVal row As FRDBaseDataDeDescricaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFRDBaseDataDeDescricaoRow(ByVal parentFRDBaseRowByFRDBaseFRDBaseDataDeDescricao As FRDBaseRow, ByVal parentTrusteeUserRowByTrusteeUserFRDBaseDataDeDescricao As TrusteeUserRow, ByVal parentTrusteeUserRowByTrusteeUserFRDBaseDataDeDescricaoAuthority As TrusteeUserRow, ByVal DataEdicao As Date, ByVal DataAutoria As Date, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As FRDBaseDataDeDescricaoRow
            Dim rowFRDBaseDataDeDescricaoRow As FRDBaseDataDeDescricaoRow = CType(Me.NewRow,FRDBaseDataDeDescricaoRow)
            rowFRDBaseDataDeDescricaoRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseFRDBaseDataDeDescricao(0), parentTrusteeUserRowByTrusteeUserFRDBaseDataDeDescricao(0), parentTrusteeUserRowByTrusteeUserFRDBaseDataDeDescricaoAuthority(0), DataEdicao, DataAutoria, Versao, isDeleted}
            Me.Rows.Add(rowFRDBaseDataDeDescricaoRow)
            Return rowFRDBaseDataDeDescricaoRow
        End Function
        
        Public Function FindByIDFRDBaseIDTrusteeOperatorDataEdicao(ByVal IDFRDBase As Long, ByVal IDTrusteeOperator As Long, ByVal DataEdicao As Date) As FRDBaseDataDeDescricaoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase, IDTrusteeOperator, DataEdicao}),FRDBaseDataDeDescricaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FRDBaseDataDeDescricaoDataTable = CType(MyBase.Clone,FRDBaseDataDeDescricaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FRDBaseDataDeDescricaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnIDTrusteeOperator = Me.Columns("IDTrusteeOperator")
            Me.columnIDTrusteeAuthority = Me.Columns("IDTrusteeAuthority")
            Me.columnDataEdicao = Me.Columns("DataEdicao")
            Me.columnDataAutoria = Me.Columns("DataAutoria")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnIDTrusteeOperator = New DataColumn("IDTrusteeOperator", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTrusteeOperator)
            Me.columnIDTrusteeAuthority = New DataColumn("IDTrusteeAuthority", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTrusteeAuthority)
            Me.columnDataEdicao = New DataColumn("DataEdicao", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataEdicao)
            Me.columnDataAutoria = New DataColumn("DataAutoria", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataAutoria)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase, Me.columnIDTrusteeOperator, Me.columnDataEdicao}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDTrusteeOperator.AllowDBNull = false
            Me.columnDataEdicao.AllowDBNull = false
            Me.columnDataAutoria.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewFRDBaseDataDeDescricaoRow() As FRDBaseDataDeDescricaoRow
            Return CType(Me.NewRow,FRDBaseDataDeDescricaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FRDBaseDataDeDescricaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FRDBaseDataDeDescricaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FRDBaseDataDeDescricaoRowChangedEvent) Is Nothing) Then
                RaiseEvent FRDBaseDataDeDescricaoRowChanged(Me, New FRDBaseDataDeDescricaoRowChangeEvent(CType(e.Row,FRDBaseDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FRDBaseDataDeDescricaoRowChangingEvent) Is Nothing) Then
                RaiseEvent FRDBaseDataDeDescricaoRowChanging(Me, New FRDBaseDataDeDescricaoRowChangeEvent(CType(e.Row,FRDBaseDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FRDBaseDataDeDescricaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent FRDBaseDataDeDescricaoRowDeleted(Me, New FRDBaseDataDeDescricaoRowChangeEvent(CType(e.Row,FRDBaseDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FRDBaseDataDeDescricaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent FRDBaseDataDeDescricaoRowDeleting(Me, New FRDBaseDataDeDescricaoRowChangeEvent(CType(e.Row,FRDBaseDataDeDescricaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFRDBaseDataDeDescricaoRow(ByVal row As FRDBaseDataDeDescricaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FRDBaseDataDeDescricaoRow
        Inherits DataRow
        
        Private tableFRDBaseDataDeDescricao As FRDBaseDataDeDescricaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFRDBaseDataDeDescricao = CType(Me.Table,FRDBaseDataDeDescricaoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableFRDBaseDataDeDescricao.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableFRDBaseDataDeDescricao.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property IDTrusteeOperator As Long
            Get
                Return CType(Me(Me.tableFRDBaseDataDeDescricao.IDTrusteeOperatorColumn),Long)
            End Get
            Set
                Me(Me.tableFRDBaseDataDeDescricao.IDTrusteeOperatorColumn) = value
            End Set
        End Property
        
        Public Property IDTrusteeAuthority As Long
            Get
                Try 
                    Return CType(Me(Me.tableFRDBaseDataDeDescricao.IDTrusteeAuthorityColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRDBaseDataDeDescricao.IDTrusteeAuthorityColumn) = value
            End Set
        End Property
        
        Public Property DataEdicao As Date
            Get
                Return CType(Me(Me.tableFRDBaseDataDeDescricao.DataEdicaoColumn),Date)
            End Get
            Set
                Me(Me.tableFRDBaseDataDeDescricao.DataEdicaoColumn) = value
            End Set
        End Property
        
        Public Property DataAutoria As Date
            Get
                Return CType(Me(Me.tableFRDBaseDataDeDescricao.DataAutoriaColumn),Date)
            End Get
            Set
                Me(Me.tableFRDBaseDataDeDescricao.DataAutoriaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableFRDBaseDataDeDescricao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFRDBaseDataDeDescricao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableFRDBaseDataDeDescricao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableFRDBaseDataDeDescricao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TrusteeUserRowByTrusteeUserFRDBaseDataDeDescricaoAuthority As TrusteeUserRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeUserFRDBaseDataDeDescricaoAuthority")),TrusteeUserRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeUserFRDBaseDataDeDescricaoAuthority"))
            End Set
        End Property
        
        Public Property TrusteeUserRowByTrusteeUserFRDBaseDataDeDescricao As TrusteeUserRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TrusteeUserFRDBaseDataDeDescricao")),TrusteeUserRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TrusteeUserFRDBaseDataDeDescricao"))
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseFRDBaseDataDeDescricao")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseFRDBaseDataDeDescricao"))
            End Set
        End Property
        
        Public Function IsIDTrusteeAuthorityNull() As Boolean
            Return Me.IsNull(Me.tableFRDBaseDataDeDescricao.IDTrusteeAuthorityColumn)
        End Function
        
        Public Sub SetIDTrusteeAuthorityNull()
            Me(Me.tableFRDBaseDataDeDescricao.IDTrusteeAuthorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableFRDBaseDataDeDescricao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableFRDBaseDataDeDescricao.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FRDBaseDataDeDescricaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FRDBaseDataDeDescricaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FRDBaseDataDeDescricaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FRDBaseDataDeDescricaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDDatasProducaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDFRDBase As DataColumn
        
        Private columnInicioTexto As DataColumn
        
        Private columnInicioAno As DataColumn
        
        Private columnInicioMes As DataColumn
        
        Private columnInicioDia As DataColumn
        
        Private columnInicioAtribuida As DataColumn
        
        Private columnFimTexto As DataColumn
        
        Private columnFimAno As DataColumn
        
        Private columnFimMes As DataColumn
        
        Private columnFimDia As DataColumn
        
        Private columnFimAtribuida As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("SFRDDatasProducao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDFRDBaseColumn As DataColumn
            Get
                Return Me.columnIDFRDBase
            End Get
        End Property
        
        Friend ReadOnly Property InicioTextoColumn As DataColumn
            Get
                Return Me.columnInicioTexto
            End Get
        End Property
        
        Friend ReadOnly Property InicioAnoColumn As DataColumn
            Get
                Return Me.columnInicioAno
            End Get
        End Property
        
        Friend ReadOnly Property InicioMesColumn As DataColumn
            Get
                Return Me.columnInicioMes
            End Get
        End Property
        
        Friend ReadOnly Property InicioDiaColumn As DataColumn
            Get
                Return Me.columnInicioDia
            End Get
        End Property
        
        Friend ReadOnly Property InicioAtribuidaColumn As DataColumn
            Get
                Return Me.columnInicioAtribuida
            End Get
        End Property
        
        Friend ReadOnly Property FimTextoColumn As DataColumn
            Get
                Return Me.columnFimTexto
            End Get
        End Property
        
        Friend ReadOnly Property FimAnoColumn As DataColumn
            Get
                Return Me.columnFimAno
            End Get
        End Property
        
        Friend ReadOnly Property FimMesColumn As DataColumn
            Get
                Return Me.columnFimMes
            End Get
        End Property
        
        Friend ReadOnly Property FimDiaColumn As DataColumn
            Get
                Return Me.columnFimDia
            End Get
        End Property
        
        Friend ReadOnly Property FimAtribuidaColumn As DataColumn
            Get
                Return Me.columnFimAtribuida
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SFRDDatasProducaoRow
            Get
                Return CType(Me.Rows(index),SFRDDatasProducaoRow)
            End Get
        End Property
        
        Public Event SFRDDatasProducaoRowChanged As SFRDDatasProducaoRowChangeEventHandler
        
        Public Event SFRDDatasProducaoRowChanging As SFRDDatasProducaoRowChangeEventHandler
        
        Public Event SFRDDatasProducaoRowDeleted As SFRDDatasProducaoRowChangeEventHandler
        
        Public Event SFRDDatasProducaoRowDeleting As SFRDDatasProducaoRowChangeEventHandler
        
        Public Overloads Sub AddSFRDDatasProducaoRow(ByVal row As SFRDDatasProducaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSFRDDatasProducaoRow(ByVal parentFRDBaseRowByFRDBaseSFRDDatasProducao As FRDBaseRow, ByVal InicioTexto As String, ByVal InicioAno As String, ByVal InicioMes As String, ByVal InicioDia As String, ByVal InicioAtribuida As Boolean, ByVal FimTexto As String, ByVal FimAno As String, ByVal FimMes As String, ByVal FimDia As String, ByVal FimAtribuida As Boolean, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As SFRDDatasProducaoRow
            Dim rowSFRDDatasProducaoRow As SFRDDatasProducaoRow = CType(Me.NewRow,SFRDDatasProducaoRow)
            rowSFRDDatasProducaoRow.ItemArray = New Object() {parentFRDBaseRowByFRDBaseSFRDDatasProducao(0), InicioTexto, InicioAno, InicioMes, InicioDia, InicioAtribuida, FimTexto, FimAno, FimMes, FimDia, FimAtribuida, Versao, isDeleted}
            Me.Rows.Add(rowSFRDDatasProducaoRow)
            Return rowSFRDDatasProducaoRow
        End Function
        
        Public Function FindByIDFRDBase(ByVal IDFRDBase As Long) As SFRDDatasProducaoRow
            Return CType(Me.Rows.Find(New Object() {IDFRDBase}),SFRDDatasProducaoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SFRDDatasProducaoDataTable = CType(MyBase.Clone,SFRDDatasProducaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SFRDDatasProducaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDFRDBase = Me.Columns("IDFRDBase")
            Me.columnInicioTexto = Me.Columns("InicioTexto")
            Me.columnInicioAno = Me.Columns("InicioAno")
            Me.columnInicioMes = Me.Columns("InicioMes")
            Me.columnInicioDia = Me.Columns("InicioDia")
            Me.columnInicioAtribuida = Me.Columns("InicioAtribuida")
            Me.columnFimTexto = Me.Columns("FimTexto")
            Me.columnFimAno = Me.Columns("FimAno")
            Me.columnFimMes = Me.Columns("FimMes")
            Me.columnFimDia = Me.Columns("FimDia")
            Me.columnFimAtribuida = Me.Columns("FimAtribuida")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDFRDBase = New DataColumn("IDFRDBase", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDFRDBase)
            Me.columnInicioTexto = New DataColumn("InicioTexto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioTexto)
            Me.columnInicioAno = New DataColumn("InicioAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioAno)
            Me.columnInicioMes = New DataColumn("InicioMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioMes)
            Me.columnInicioDia = New DataColumn("InicioDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioDia)
            Me.columnInicioAtribuida = New DataColumn("InicioAtribuida", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioAtribuida)
            Me.columnFimTexto = New DataColumn("FimTexto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimTexto)
            Me.columnFimAno = New DataColumn("FimAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimAno)
            Me.columnFimMes = New DataColumn("FimMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimMes)
            Me.columnFimDia = New DataColumn("FimDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimDia)
            Me.columnFimAtribuida = New DataColumn("FimAtribuida", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimAtribuida)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIDFRDBase}, true))
            Me.columnIDFRDBase.AllowDBNull = false
            Me.columnIDFRDBase.Unique = true
            Me.columnInicioTexto.MaxLength = 50
            Me.columnInicioAno.MaxLength = 4
            Me.columnInicioMes.MaxLength = 2
            Me.columnInicioDia.MaxLength = 2
            Me.columnInicioAtribuida.AllowDBNull = false
            Me.columnFimTexto.MaxLength = 50
            Me.columnFimAno.MaxLength = 4
            Me.columnFimMes.MaxLength = 2
            Me.columnFimDia.MaxLength = 2
            Me.columnFimAtribuida.AllowDBNull = false
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewSFRDDatasProducaoRow() As SFRDDatasProducaoRow
            Return CType(Me.NewRow,SFRDDatasProducaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SFRDDatasProducaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SFRDDatasProducaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SFRDDatasProducaoRowChangedEvent) Is Nothing) Then
                RaiseEvent SFRDDatasProducaoRowChanged(Me, New SFRDDatasProducaoRowChangeEvent(CType(e.Row,SFRDDatasProducaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SFRDDatasProducaoRowChangingEvent) Is Nothing) Then
                RaiseEvent SFRDDatasProducaoRowChanging(Me, New SFRDDatasProducaoRowChangeEvent(CType(e.Row,SFRDDatasProducaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SFRDDatasProducaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SFRDDatasProducaoRowDeleted(Me, New SFRDDatasProducaoRowChangeEvent(CType(e.Row,SFRDDatasProducaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SFRDDatasProducaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SFRDDatasProducaoRowDeleting(Me, New SFRDDatasProducaoRowChangeEvent(CType(e.Row,SFRDDatasProducaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSFRDDatasProducaoRow(ByVal row As SFRDDatasProducaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDDatasProducaoRow
        Inherits DataRow
        
        Private tableSFRDDatasProducao As SFRDDatasProducaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSFRDDatasProducao = CType(Me.Table,SFRDDatasProducaoDataTable)
        End Sub
        
        Public Property IDFRDBase As Long
            Get
                Return CType(Me(Me.tableSFRDDatasProducao.IDFRDBaseColumn),Long)
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.IDFRDBaseColumn) = value
            End Set
        End Property
        
        Public Property InicioTexto As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.InicioTextoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.InicioTextoColumn) = value
            End Set
        End Property
        
        Public Property InicioAno As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.InicioAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.InicioAnoColumn) = value
            End Set
        End Property
        
        Public Property InicioMes As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.InicioMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.InicioMesColumn) = value
            End Set
        End Property
        
        Public Property InicioDia As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.InicioDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.InicioDiaColumn) = value
            End Set
        End Property
        
        Public Property InicioAtribuida As Boolean
            Get
                Return CType(Me(Me.tableSFRDDatasProducao.InicioAtribuidaColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.InicioAtribuidaColumn) = value
            End Set
        End Property
        
        Public Property FimTexto As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.FimTextoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.FimTextoColumn) = value
            End Set
        End Property
        
        Public Property FimAno As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.FimAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.FimAnoColumn) = value
            End Set
        End Property
        
        Public Property FimMes As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.FimMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.FimMesColumn) = value
            End Set
        End Property
        
        Public Property FimDia As String
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.FimDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.FimDiaColumn) = value
            End Set
        End Property
        
        Public Property FimAtribuida As Boolean
            Get
                Return CType(Me(Me.tableSFRDDatasProducao.FimAtribuidaColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.FimAtribuidaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableSFRDDatasProducao.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableSFRDDatasProducao.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableSFRDDatasProducao.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property FRDBaseRow As FRDBaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FRDBaseSFRDDatasProducao")),FRDBaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FRDBaseSFRDDatasProducao"))
            End Set
        End Property
        
        Public Function IsInicioTextoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.InicioTextoColumn)
        End Function
        
        Public Sub SetInicioTextoNull()
            Me(Me.tableSFRDDatasProducao.InicioTextoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioAnoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.InicioAnoColumn)
        End Function
        
        Public Sub SetInicioAnoNull()
            Me(Me.tableSFRDDatasProducao.InicioAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioMesNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.InicioMesColumn)
        End Function
        
        Public Sub SetInicioMesNull()
            Me(Me.tableSFRDDatasProducao.InicioMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioDiaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.InicioDiaColumn)
        End Function
        
        Public Sub SetInicioDiaNull()
            Me(Me.tableSFRDDatasProducao.InicioDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimTextoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.FimTextoColumn)
        End Function
        
        Public Sub SetFimTextoNull()
            Me(Me.tableSFRDDatasProducao.FimTextoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimAnoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.FimAnoColumn)
        End Function
        
        Public Sub SetFimAnoNull()
            Me(Me.tableSFRDDatasProducao.FimAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimMesNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.FimMesColumn)
        End Function
        
        Public Sub SetFimMesNull()
            Me(Me.tableSFRDDatasProducao.FimMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimDiaNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.FimDiaColumn)
        End Function
        
        Public Sub SetFimDiaNull()
            Me(Me.tableSFRDDatasProducao.FimDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableSFRDDatasProducao.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableSFRDDatasProducao.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SFRDDatasProducaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SFRDDatasProducaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SFRDDatasProducaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SFRDDatasProducaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RelacaoHierarquicaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnIDUpper As DataColumn
        
        Private columnIDTipoNivelRelacionado As DataColumn
        
        Private columnDescricao As DataColumn
        
        Private columnInicioAno As DataColumn
        
        Private columnInicioMes As DataColumn
        
        Private columnInicioDia As DataColumn
        
        Private columnFimAno As DataColumn
        
        Private columnFimMes As DataColumn
        
        Private columnFimDia As DataColumn
        
        Private columnVersao As DataColumn
        
        Private columnisDeleted As DataColumn
        
        Friend Sub New()
            MyBase.New("RelacaoHierarquica")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property IDUpperColumn As DataColumn
            Get
                Return Me.columnIDUpper
            End Get
        End Property
        
        Friend ReadOnly Property IDTipoNivelRelacionadoColumn As DataColumn
            Get
                Return Me.columnIDTipoNivelRelacionado
            End Get
        End Property
        
        Friend ReadOnly Property DescricaoColumn As DataColumn
            Get
                Return Me.columnDescricao
            End Get
        End Property
        
        Friend ReadOnly Property InicioAnoColumn As DataColumn
            Get
                Return Me.columnInicioAno
            End Get
        End Property
        
        Friend ReadOnly Property InicioMesColumn As DataColumn
            Get
                Return Me.columnInicioMes
            End Get
        End Property
        
        Friend ReadOnly Property InicioDiaColumn As DataColumn
            Get
                Return Me.columnInicioDia
            End Get
        End Property
        
        Friend ReadOnly Property FimAnoColumn As DataColumn
            Get
                Return Me.columnFimAno
            End Get
        End Property
        
        Friend ReadOnly Property FimMesColumn As DataColumn
            Get
                Return Me.columnFimMes
            End Get
        End Property
        
        Friend ReadOnly Property FimDiaColumn As DataColumn
            Get
                Return Me.columnFimDia
            End Get
        End Property
        
        Friend ReadOnly Property VersaoColumn As DataColumn
            Get
                Return Me.columnVersao
            End Get
        End Property
        
        Friend ReadOnly Property isDeletedColumn As DataColumn
            Get
                Return Me.columnisDeleted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RelacaoHierarquicaRow
            Get
                Return CType(Me.Rows(index),RelacaoHierarquicaRow)
            End Get
        End Property
        
        Public Event RelacaoHierarquicaRowChanged As RelacaoHierarquicaRowChangeEventHandler
        
        Public Event RelacaoHierarquicaRowChanging As RelacaoHierarquicaRowChangeEventHandler
        
        Public Event RelacaoHierarquicaRowDeleted As RelacaoHierarquicaRowChangeEventHandler
        
        Public Event RelacaoHierarquicaRowDeleting As RelacaoHierarquicaRowChangeEventHandler
        
        Public Overloads Sub AddRelacaoHierarquicaRow(ByVal row As RelacaoHierarquicaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRelacaoHierarquicaRow(ByVal parentNivelRowByNivelRelacaoHierarquica As NivelRow, ByVal parentNivelRowByNivelRelacaoHierarquicaUpper As NivelRow, ByVal parentTipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoHierarquica As TipoNivelRelacionadoRow, ByVal Descricao As String, ByVal InicioAno As String, ByVal InicioMes As String, ByVal InicioDia As String, ByVal FimAno As String, ByVal FimMes As String, ByVal FimDia As String, ByVal Versao() As Byte, ByVal isDeleted As Boolean) As RelacaoHierarquicaRow
            Dim rowRelacaoHierarquicaRow As RelacaoHierarquicaRow = CType(Me.NewRow,RelacaoHierarquicaRow)
            rowRelacaoHierarquicaRow.ItemArray = New Object() {parentNivelRowByNivelRelacaoHierarquica(0), parentNivelRowByNivelRelacaoHierarquicaUpper(0), parentTipoNivelRelacionadoRowByTipoNivelRelacionadoRelacaoHierarquica(0), Descricao, InicioAno, InicioMes, InicioDia, FimAno, FimMes, FimDia, Versao, isDeleted}
            Me.Rows.Add(rowRelacaoHierarquicaRow)
            Return rowRelacaoHierarquicaRow
        End Function
        
        Public Function FindByIDIDUpper(ByVal ID As Long, ByVal IDUpper As Long) As RelacaoHierarquicaRow
            Return CType(Me.Rows.Find(New Object() {ID, IDUpper}),RelacaoHierarquicaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RelacaoHierarquicaDataTable = CType(MyBase.Clone,RelacaoHierarquicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RelacaoHierarquicaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnIDUpper = Me.Columns("IDUpper")
            Me.columnIDTipoNivelRelacionado = Me.Columns("IDTipoNivelRelacionado")
            Me.columnDescricao = Me.Columns("Descricao")
            Me.columnInicioAno = Me.Columns("InicioAno")
            Me.columnInicioMes = Me.Columns("InicioMes")
            Me.columnInicioDia = Me.Columns("InicioDia")
            Me.columnFimAno = Me.Columns("FimAno")
            Me.columnFimMes = Me.Columns("FimMes")
            Me.columnFimDia = Me.Columns("FimDia")
            Me.columnVersao = Me.Columns("Versao")
            Me.columnisDeleted = Me.Columns("isDeleted")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnIDUpper = New DataColumn("IDUpper", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDUpper)
            Me.columnIDTipoNivelRelacionado = New DataColumn("IDTipoNivelRelacionado", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDTipoNivelRelacionado)
            Me.columnDescricao = New DataColumn("Descricao", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescricao)
            Me.columnInicioAno = New DataColumn("InicioAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioAno)
            Me.columnInicioMes = New DataColumn("InicioMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioMes)
            Me.columnInicioDia = New DataColumn("InicioDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInicioDia)
            Me.columnFimAno = New DataColumn("FimAno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimAno)
            Me.columnFimMes = New DataColumn("FimMes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimMes)
            Me.columnFimDia = New DataColumn("FimDia", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFimDia)
            Me.columnVersao = New DataColumn("Versao", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVersao)
            Me.columnisDeleted = New DataColumn("isDeleted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnisDeleted)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID, Me.columnIDUpper}, true))
            Me.columnID.AllowDBNull = false
            Me.columnIDUpper.AllowDBNull = false
            Me.columnIDTipoNivelRelacionado.AllowDBNull = false
            Me.columnDescricao.MaxLength = 4000
            Me.columnInicioAno.MaxLength = 4
            Me.columnInicioMes.MaxLength = 2
            Me.columnInicioDia.MaxLength = 2
            Me.columnFimAno.MaxLength = 4
            Me.columnFimMes.MaxLength = 2
            Me.columnFimDia.MaxLength = 2
            Me.columnVersao.ReadOnly = true
            Me.columnisDeleted.AllowDBNull = false
            Me.columnisDeleted.DefaultValue = false
        End Sub
        
        Public Function NewRelacaoHierarquicaRow() As RelacaoHierarquicaRow
            Return CType(Me.NewRow,RelacaoHierarquicaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RelacaoHierarquicaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RelacaoHierarquicaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RelacaoHierarquicaRowChangedEvent) Is Nothing) Then
                RaiseEvent RelacaoHierarquicaRowChanged(Me, New RelacaoHierarquicaRowChangeEvent(CType(e.Row,RelacaoHierarquicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RelacaoHierarquicaRowChangingEvent) Is Nothing) Then
                RaiseEvent RelacaoHierarquicaRowChanging(Me, New RelacaoHierarquicaRowChangeEvent(CType(e.Row,RelacaoHierarquicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RelacaoHierarquicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent RelacaoHierarquicaRowDeleted(Me, New RelacaoHierarquicaRowChangeEvent(CType(e.Row,RelacaoHierarquicaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RelacaoHierarquicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent RelacaoHierarquicaRowDeleting(Me, New RelacaoHierarquicaRowChangeEvent(CType(e.Row,RelacaoHierarquicaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRelacaoHierarquicaRow(ByVal row As RelacaoHierarquicaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RelacaoHierarquicaRow
        Inherits DataRow
        
        Private tableRelacaoHierarquica As RelacaoHierarquicaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRelacaoHierarquica = CType(Me.Table,RelacaoHierarquicaDataTable)
        End Sub
        
        Public Property ID As Long
            Get
                Return CType(Me(Me.tableRelacaoHierarquica.IDColumn),Long)
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.IDColumn) = value
            End Set
        End Property
        
        Public Property IDUpper As Long
            Get
                Return CType(Me(Me.tableRelacaoHierarquica.IDUpperColumn),Long)
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.IDUpperColumn) = value
            End Set
        End Property
        
        Public Property IDTipoNivelRelacionado As Long
            Get
                Return CType(Me(Me.tableRelacaoHierarquica.IDTipoNivelRelacionadoColumn),Long)
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.IDTipoNivelRelacionadoColumn) = value
            End Set
        End Property
        
        Public Property Descricao As String
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.DescricaoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.DescricaoColumn) = value
            End Set
        End Property
        
        Public Property InicioAno As String
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.InicioAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.InicioAnoColumn) = value
            End Set
        End Property
        
        Public Property InicioMes As String
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.InicioMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.InicioMesColumn) = value
            End Set
        End Property
        
        Public Property InicioDia As String
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.InicioDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.InicioDiaColumn) = value
            End Set
        End Property
        
        Public Property FimAno As String
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.FimAnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.FimAnoColumn) = value
            End Set
        End Property
        
        Public Property FimMes As String
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.FimMesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.FimMesColumn) = value
            End Set
        End Property
        
        Public Property FimDia As String
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.FimDiaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.FimDiaColumn) = value
            End Set
        End Property
        
        Public Property Versao As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableRelacaoHierarquica.VersaoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.VersaoColumn) = value
            End Set
        End Property
        
        Public Property isDeleted As Boolean
            Get
                Return CType(Me(Me.tableRelacaoHierarquica.isDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableRelacaoHierarquica.isDeletedColumn) = value
            End Set
        End Property
        
        Public Property TipoNivelRelacionadoRow As TipoNivelRelacionadoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoNivelRelacionadoRelacaoHierarquica")),TipoNivelRelacionadoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoNivelRelacionadoRelacaoHierarquica"))
            End Set
        End Property
        
        Public Property NivelRowByNivelRelacaoHierarquicaUpper As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelRelacaoHierarquicaUpper")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelRelacaoHierarquicaUpper"))
            End Set
        End Property
        
        Public Property NivelRowByNivelRelacaoHierarquica As NivelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NivelRelacaoHierarquica")),NivelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NivelRelacaoHierarquica"))
            End Set
        End Property
        
        Public Function IsDescricaoNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.DescricaoColumn)
        End Function
        
        Public Sub SetDescricaoNull()
            Me(Me.tableRelacaoHierarquica.DescricaoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioAnoNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.InicioAnoColumn)
        End Function
        
        Public Sub SetInicioAnoNull()
            Me(Me.tableRelacaoHierarquica.InicioAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioMesNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.InicioMesColumn)
        End Function
        
        Public Sub SetInicioMesNull()
            Me(Me.tableRelacaoHierarquica.InicioMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInicioDiaNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.InicioDiaColumn)
        End Function
        
        Public Sub SetInicioDiaNull()
            Me(Me.tableRelacaoHierarquica.InicioDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimAnoNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.FimAnoColumn)
        End Function
        
        Public Sub SetFimAnoNull()
            Me(Me.tableRelacaoHierarquica.FimAnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimMesNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.FimMesColumn)
        End Function
        
        Public Sub SetFimMesNull()
            Me(Me.tableRelacaoHierarquica.FimMesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFimDiaNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.FimDiaColumn)
        End Function
        
        Public Sub SetFimDiaNull()
            Me(Me.tableRelacaoHierarquica.FimDiaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVersaoNull() As Boolean
            Return Me.IsNull(Me.tableRelacaoHierarquica.VersaoColumn)
        End Function
        
        Public Sub SetVersaoNull()
            Me(Me.tableRelacaoHierarquica.VersaoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RelacaoHierarquicaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RelacaoHierarquicaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RelacaoHierarquicaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RelacaoHierarquicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
